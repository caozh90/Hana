PROCEDURE "SZEBGVMI"."cdp.szebgvmi.procedures.pkg_report::PRC_INVENTORY_COMPARASION" (
    IN p_wfname VARCHAR(10), OUT p_out_exitcode DECIMAL
 ) 
	LANGUAGE SQLSCRIPT
	--ASSQL SECURITY INVOKER 
	DEFAULT SCHEMA SZEBGVMI
	--READS SQL DATA 
	AS
    /************************************************************************
    *name      : PRC_INVENTORY_COMPARASION              --函数名
    *function  :               --函数功能
    *input     ：    --输入参数
    *output     : --输出参数
    *author     : Fangyuan               --作者
    *CreateDate : 20150128                  --创建时间
    *UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
    
    *************************************************************************/       
    v_prc_name VARCHAR(70) := 'PRC_INVENTORY_COMPARASION';
    gv_logic_name    VARCHAR2 (40)  := 'PKG_PCDW_TO_VMI';
    v_full_name VARCHAR(100) := gv_logic_name||'.'||v_prc_name;
    v_logidi INTEGER := 0;	
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
         p_out_exitcode := ::SQL_ERROR_CODE;
         CALL "EX_LOG"."cdp.log.procedures::logProc"
            (I_TYPE=>'PROC_ERROR',I_LOGSID=>:v_logidi,
             I_EVENT_NAME=>:v_full_name,I_MODULE=>'SZEBGVMI',
             I_MESSAGE=>'ERROR',
             I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' ||substr(::SQL_ERROR_MESSAGE, 1, 512)||':'||'Failure');                                                  
         
         --COMMIT;       
    END;

    CALL "EX_LOG"."cdp.log.procedures::logProc"
            (I_TYPE=>'PROC_START',I_LOGSID=>:v_logidi,
             I_EVENT_NAME=>:v_full_name,I_MODULE=>'SZEBGVMI',
             I_DETAIL=>'Start');

    
    DELETE FROM rpt_inventory_comp where r3_timestamp<ADD_DAYS ( CURRENT_TIMESTAMP, -7);

    DELETE FROM tpl_inventory a
      WHERE a.whs_no IS NULL
         OR a.werks IS NULL
         OR a.storage_location IS NULL
         OR a.storage_type IS NULL
         OR a.storage_bin IS NULL ;

    --COMMIT ;

    INSERT INTO rpt_inventory_comp
   SELECT
     * 
FROM (SELECT
     ocvmicomrt_r3_inventory.matnr,
     ocvmicomrt_r3_inventory.werks,
     ocvmicomrt_r3_inventory.lifnr,
     ocvmicomrt_r3_inventory.storage_type,
     ocvmicomrt_r3_inventory.storage_bin,
     ocvmicomrt_r3_inventory.hold_type,
     (SUM (ocvmicomrt_r3_inventory.qty)) r3_qty,
     (SUM (ocvmicomrt_tpl_inventory.qty)) tpl_qty,
     ( CASE WHEN (SUM (ocvmicomrt_r3_inventory.qty)) IS NULL 
        THEN 0 
        ELSE SUM (ocvmicomrt_r3_inventory.qty) 
        END - CASE WHEN (SUM (ocvmicomrt_tpl_inventory.qty)) IS NULL 
                   THEN 0 
                   ELSE SUM (ocvmicomrt_tpl_inventory.qty) 
                   END ) r3_tpl_diff,
     IFNULL (ocvmicomrt_tpl_inventory.sys_source,'NONE' ) sys_source,
     MAX (ocvmicomrt_r3_inventory.sys_created_date) r3_timestamp,
     MAX (ocvmicomrt_tpl_inventory.sys_timestamp) tpl_timestamp 
    FROM 
    z_pcdw_inventory_snapshot ocvmicomrt_r3_inventory 
    LEFT OUTER JOIN 
    tpl_inventory ocvmicomrt_tpl_inventory 
    ON ocvmicomrt_r3_inventory.matnr = ocvmicomrt_tpl_inventory.matnr 
    AND ocvmicomrt_r3_inventory.werks = ocvmicomrt_tpl_inventory.werks 
    AND ocvmicomrt_r3_inventory.lifnr = ocvmicomrt_tpl_inventory.lifnr 
    AND ocvmicomrt_r3_inventory.whs_no = ocvmicomrt_tpl_inventory.whs_no 
    AND ocvmicomrt_r3_inventory.storage_type = ocvmicomrt_tpl_inventory.storage_type 
    AND ocvmicomrt_r3_inventory.storage_bin = ocvmicomrt_tpl_inventory.storage_bin 
    AND ocvmicomrt_r3_inventory.hold_type = ocvmicomrt_tpl_inventory.hold_type 
    AND to_date (ocvmicomrt_r3_inventory.sys_created_date) = to_date (ocvmicomrt_tpl_inventory.sys_timestamp) 
    WHERE 
    ( ocvmicomrt_r3_inventory.storage_type LIKE 'L%' 
        OR ocvmicomrt_r3_inventory.storage_type LIKE 'C%' ) 
    AND ocvmicomrt_r3_inventory.sys_created_date > to_date (current_timestamp) 
    GROUP BY ocvmicomrt_r3_inventory.matnr,
     ocvmicomrt_r3_inventory.werks,
     ocvmicomrt_r3_inventory.lifnr,
     ocvmicomrt_r3_inventory.storage_type,
     ocvmicomrt_r3_inventory.storage_bin,
     ocvmicomrt_r3_inventory.hold_type,
     IFNULL (ocvmicomrt_tpl_inventory.sys_source,'NONE')
      HAVING ( CASE WHEN (SUM (ocvmicomrt_r3_inventory.qty)) IS NULL 
                THEN 0 
                ELSE SUM (ocvmicomrt_r3_inventory.qty) 
                 END - CASE WHEN (SUM (ocvmicomrt_tpl_inventory.qty)) IS NULL 
                        THEN 0 
                        ELSE SUM (ocvmicomrt_tpl_inventory.qty) 
                        END ) <> 0 
    ORDER BY 1,2,3,4,5,6) x 
UNION 
SELECT
     * 
FROM (SELECT
     ocvmicomrt_tpl_inventory.matnr,
     ocvmicomrt_tpl_inventory.werks,
     ocvmicomrt_tpl_inventory.lifnr,
     ocvmicomrt_tpl_inventory.storage_type,
     ocvmicomrt_tpl_inventory.storage_bin,
     ocvmicomrt_tpl_inventory.hold_type,
     (SUM (ocvmicomrt_r3_inventory.qty)) r3_qty,
     (SUM (ocvmicomrt_tpl_inventory.qty)) tpl_qty,
     ( CASE WHEN (SUM (ocvmicomrt_r3_inventory.qty)) IS NULL 
        THEN 0 
        ELSE SUM (ocvmicomrt_r3_inventory.qty) 
        END - CASE WHEN (SUM (ocvmicomrt_tpl_inventory.qty)) IS NULL 
        THEN 0 
        ELSE SUM (ocvmicomrt_tpl_inventory.qty) 
        END ) r3_tpl_diff,
     ocvmicomrt_tpl_inventory.sys_source,
     MAX (ocvmicomrt_r3_inventory.sys_created_date) r3_timestamp,
     MAX (ocvmicomrt_tpl_inventory.sys_timestamp) tpl_timestamp 
    FROM tpl_inventory ocvmicomrt_tpl_inventory 
    LEFT OUTER JOIN z_pcdw_inventory_snapshot ocvmicomrt_r3_inventory ON ocvmicomrt_r3_inventory.matnr = ocvmicomrt_tpl_inventory.matnr 
    AND ocvmicomrt_r3_inventory.werks = ocvmicomrt_tpl_inventory.werks 
    AND ocvmicomrt_r3_inventory.lifnr = ocvmicomrt_tpl_inventory.lifnr 
    AND ocvmicomrt_r3_inventory.whs_no = ocvmicomrt_tpl_inventory.whs_no 
    AND ocvmicomrt_r3_inventory.storage_type = ocvmicomrt_tpl_inventory.storage_type 
    AND ocvmicomrt_r3_inventory.storage_bin = ocvmicomrt_tpl_inventory.storage_bin 
    AND ocvmicomrt_r3_inventory.hold_type = ocvmicomrt_tpl_inventory.hold_type 
    AND to_date (ocvmicomrt_r3_inventory.sys_created_date) = to_date (ocvmicomrt_tpl_inventory.sys_timestamp) 
    WHERE ( ocvmicomrt_tpl_inventory.storage_type LIKE 'L%' 
        OR ocvmicomrt_tpl_inventory.storage_type LIKE 'C%' ) 
    AND ocvmicomrt_tpl_inventory.whs_no IS NOT NULL 
    AND ocvmicomrt_tpl_inventory.sys_timestamp > to_date (current_timestamp) 
    GROUP BY ocvmicomrt_tpl_inventory.matnr,
     ocvmicomrt_tpl_inventory.werks,
     ocvmicomrt_tpl_inventory.lifnr,
     ocvmicomrt_tpl_inventory.storage_type,
     ocvmicomrt_tpl_inventory.storage_bin,
     ocvmicomrt_tpl_inventory.hold_type,
     ocvmicomrt_tpl_inventory.sys_source 
     HAVING ( CASE WHEN (SUM (ocvmicomrt_r3_inventory.qty)) IS NULL 
        THEN 0 
        ELSE SUM (ocvmicomrt_r3_inventory.qty) 
        END - CASE WHEN (SUM (ocvmicomrt_tpl_inventory.qty)) IS NULL 
        THEN 0 
        ELSE SUM (ocvmicomrt_tpl_inventory.qty) 
        END ) <> 0 
    ORDER BY 1,2,3,4,5,6) y
;

    UPDATE rpt_inventory_comp SET r3_timestamp = tpl_timestamp
     WHERE r3_timestamp IS NULL;

    --COMMIT ;

    DELETE FROM rpt_inventory_comp x
      WHERE x."$rowid$" IN (
		SELECT
		     x."$rowid$" x1 
		FROM rpt_inventory_comp x,
		     (SELECT
		     FIRST_VALUE (r."$rowid$") OVER (PARTITION BY matnr,
		     werks,
		     lifnr,
		     storage_type,
		     storage_bin,
		     hold_type 
		    ORDER BY r3_timestamp DESC 
		   --ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
		) rid,
		     matnr,
		     werks,
		     lifnr,
		     storage_type,
		     storage_bin,
		     hold_type 
		FROM rpt_inventory_comp r 
		WHERE (matnr,
		     werks,
		     lifnr,
		     storage_type,
		     storage_bin,
		     hold_type ) IN ( SELECT
		     matnr,
		     werks,
		     lifnr,
		     storage_type,
		     storage_bin,
		     hold_type 
		    FROM rpt_inventory_comp 
		    WHERE to_Date (r3_timestamp) = to_date (current_timestamp) 
		    GROUP BY matnr,
		     werks,
		     lifnr,
		     storage_type,
		     storage_bin,
		     hold_type HAVING COUNT (*) > 1) 
		    AND to_date (r3_timestamp) = to_date (current_timestamp)) y 
		WHERE x.matnr = y.matnr 
		AND x.werks = y.werks 
		AND x.lifnr = y.lifnr 
		AND x.storage_type = y.storage_type 
		AND x.hold_type = y.hold_type 
		AND x."$rowid$" <> y.rid 
		AND to_date (x.r3_timestamp) = to_date (current_timestamp));
    --commit;             
             
             
    CALL "EX_LOG"."cdp.log.procedures::logProc"
            (I_TYPE=>'PROC_END',I_LOGSID=>:v_logidi,
             I_EVENT_NAME=>:v_full_name,I_MODULE=>'SZEBGVMI',
             I_DETAIL=>'Success');              
END;
