PROCEDURE "EX_LOG"."cdp.log.procedures::logProcBASE" (
    IN I_EVENT_TYPE VARCHAR(10), --INFO ,ERR,WARN,PROC_LOG ,SEC_LOG,
    IN I_STATUS VARCHAR(10), -- START .END .ERROR ,STEP
    INOUT I_LOGSID VARCHAR(10) ,IN I_EVENT_NAME VARCHAR(100),IN I_MODULE VARCHAR(10),IN I_MESSAGE VARCHAR(3000) DEFAULT '',
    IN I_DETAIL VARCHAR(3000) DEFAULT '',IN I_STEP_COUNT INTEGER DEFAULT 0, IN I_CURRENT_STEP INTEGER DEFAULT 0
 ) 
    LANGUAGE SQLSCRIPT
    --SQL SECURITY INVOKER 
    --DEFAULT SCHEMA <default_schema_name>
    --READS SQL DATA 
    
	/************************************************************************
	*name      : logProcBASE              --函数名
	*function  : 记录transaction log              --函数功能
	*input     ：  I_EVENT_TYPE  类型：INFO ,ERR,WARN,PROC_LOG ,SEC_LOG
				 I_STATUS	      状态：START,END,ERROR ,STEP
				 I_LOGSID	  log id
				 I_EVENT_NAME 包名.存储过程名
				 I_MODULE	  module:CFE,VMI
				 I_MESSAGE	  message
				 I_DETAIL	  detail
				 I_STEP_COUNT	有关step的过程，全部step数
				 I_CURRENT_STEP 有关step的过程，当前step数
				 
	             --输入参数
	*output     :无 --输出参数
	*author     : Fangyuan               --作者
	*CreateDate : 20141128                  --创建时间
	*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
	
	*************************************************************************/    

    AS

    V_EVENT_NAME VARCHAR(100):=IFNULL(:I_EVENT_NAME,'ERROR: EVENT_NAME IS NULL');
    V_COUNT INTEGER;
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
           SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;
    END;

        SELECT COUNT(*) INTO V_COUNT 
        FROM "EX_LOG"."cdp.log.data::Logs.TRANSACTION_LOG_FILE"
        WHERE LOGSID   = :I_LOGSID
          AND EVENT_NAME = :V_EVENT_NAME
          AND EVENT_TYPE = :I_EVENT_TYPE ;
          

       IF :V_COUNT > 0 AND (I_STATUS = 'END' OR I_STATUS = 'ERROR')THEN
	        UPDATE "EX_LOG"."cdp.log.data::Logs.TRANSACTION_LOG_FILE" A
	        SET START_TIME = CASE  WHEN :I_STATUS = 'START' OR :I_STATUS = 'STEP' THEN CURRENT_TIMESTAMP ELSE A.START_TIME END,
	            LOG_DATE = CURRENT_TIMESTAMP,
	            END_TIME = CASE  WHEN :I_STATUS <> 'START' AND :I_STATUS <> 'STEP'  THEN CURRENT_TIMESTAMP ELSE A.END_TIME END,
	            MESSAGE = CASE WHEN LENGTH(:I_MESSAGE)>0 THEN :I_MESSAGE ELSE A.MESSAGE END,
	            DETAILS  = CASE WHEN LENGTH(:I_DETAIL)>0 THEN :I_DETAIL ELSE A.DETAILS END,
	            STEP_COUNT = CASE WHEN :I_STEP_COUNT=0 THEN A.STEP_COUNT ELSE :I_STEP_COUNT END,
	            CURRENT_STEP = CASE WHEN :I_STEP_COUNT=0 THEN A.CURRENT_STEP ELSE :I_CURRENT_STEP END,
	            STATUS = CASE WHEN I_STATUS = 'END' THEN 'SUCCESS' ELSE 'ERROR' END
	        WHERE LOGSID   = :I_LOGSID
	            AND EVENT_NAME = :V_EVENT_NAME
	            AND EVENT_TYPE = :I_EVENT_TYPE;  
      ELSE
            SELECT "EX_LOG"."cdp.log.data::transKeyId".NEXTVAL INTO I_LOGSID FROM DUMMY;
           INSERT INTO "EX_LOG"."cdp.log.data::Logs.TRANSACTION_LOG_FILE" 
                (LOGSID, EVENT_NAME, EVENT_TYPE, START_TIME, MESSAGE, DETAILS, LOG_DATE,CREATE_DATE
                ,MODULE
                ,STATUS,
                USER_NAME,STEP_COUNT,CURRENT_STEP)
                VALUES(
                :I_LOGSID, :V_EVENT_NAME, :I_EVENT_TYPE, CURRENT_TIMESTAMP, 
                :I_MESSAGE, :I_DETAIL, CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
                ,:I_MODULE
                ,:I_STATUS,
                SESSION_USER,I_STEP_COUNT,I_CURRENT_STEP);
      END IF;
      
END;