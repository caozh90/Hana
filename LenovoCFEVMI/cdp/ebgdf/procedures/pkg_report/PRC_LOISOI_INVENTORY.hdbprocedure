PROCEDURE "EBGDF"."cdp.ebgdf.procedures.pkg_report::PRC_LOISOI_INVENTORY"(IN P_IN_WFNAME varchar(40),
																		  OUT P_OUT_EXITCODE  INTEGER)
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGDF AS
	
BEGIN

  -- data
  DECLARE   V_PKG_NAME        VARCHAR(100) := 'PKG_REPORT';    
  DECLARE   V_PRC_NAME        VARCHAR(100) := 'PRC_LOISOI_INVENTORY';
  DECLARE   V_FUNC_FULL_NAME  VARCHAR(100) := :V_PKG_NAME || '.' || :V_PRC_NAME;  
  DECLARE   logidi            INTEGER := 0;
  
  -- exception
  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN              
            P_OUT_EXITCODE := -1;  
      CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_ERROR',
										          I_LOGSID=>:logidi,
										          I_EVENT_NAME=>:V_FUNC_FULL_NAME, 
										          I_MODULE=>'EBGDF',
										          I_MESSAGE=>'ERROR', 
										          I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' || substr(::SQL_ERROR_MESSAGE, 1, 1000) );    
      RESIGNAL;     
    END;  
    
  -- process logic
  P_OUT_EXITCODE := -1;
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',
											  I_LOGSID=>:logidi,
										      I_EVENT_NAME=>:V_FUNC_FULL_NAME,
									   	      I_MODULE=>'EBGDF');   
    
  delete from "EBGDF"."LOISOI_INVENTORY";
  
  insert into "EBGDF"."LOISOI_INVENTORY" (MATNR,
										WERKS,
										LGORT,
										UNRESTRICTED_QTY,
										INSPECTION_QTY,
										BLOCK_QTY,
										SYS_CREATED_DATE,
										SYS_CREATED_BY,
										SYS_LAST_MODIFIED_DATE,
										SYS_LAST_MODIFIED_BY,
										UMLME,
										LGNUM,
										LGTYP,
										LGPLA,
										VERME,
										BESTQ,
										SONUM,
										SOBKZ,
										WFNAME)
     select MATNR,
			WERKS,
			LGORT,
			UNRESTRICTED_QTY,
			INSPECTION_QTY,
			BLOCK_QTY,
			SYS_CREATED_DATE,
			SYS_CREATED_BY,
			SYS_LAST_MODIFIED_DATE,
			SYS_LAST_MODIFIED_BY,
			UMLME,
			LGNUM,
			LGTYP,
			LGPLA,
			VERME,
			BESTQ,
			SONUM,
			SOBKZ,
			WFNAME
       from pcdw.ecc_inventory
      where WFNAME = P_IN_WFNAME;
  
  P_OUT_EXITCODE := 0;
  
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',
  											  I_LOGSID=>:logidi,
										      I_EVENT_NAME=>:V_FUNC_FULL_NAME,
										      I_MODULE=>'EBGDF');  
  
END;
