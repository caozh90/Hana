PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_STDCOST_MONTHLY" (
	IN p_item VARCHAR(2000),
	IN p_cycle VARCHAR(40),
	OUT p_out_exitcode  INTEGER,
    OUT p_out_exitmess  VARCHAR(500) 
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE 
	AS
		v_g_pkg_name        VARCHAR(30)  := 'PKG_REPORT'; 
		v_prc_name          VARCHAR(30)  := 'PRC_RPT_STDCOST_MONTHLY';
     	v_full_name         VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;
       	logidi              INTEGER      := 0;
       	v_sql				VARCHAR(2000);
       	v_tab_item 			TABLE(item VARCHAR(40)); 
  
BEGIN
/***************************** 
-- Author:      Zhangxj
-- Create date: 2015-09-20
-- Description: stdcost_monthly
-- Modify [1]:  Frankie
-- Modified date[1]:2015-10-20
-- Modify [2]:  Zhangxj,copy cfe_plant to multiple ecc plant
--Modify [3]: tuyn1, change m1 to m2 for zhaoxt2's request via WO0000000319650
	
 *****************************/
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := SUBSTR(::SQL_ERROR_MESSAGE, 1, 500 );  
 	 	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE        => 'PROC_ERROR',
 	 	                                            I_LOGSID      => :logidi,
 	 	                                            I_EVENT_NAME  => :v_full_name,
 	 	                                            I_MODULE      => 'EBGCFE',
		                                            I_MESSAGE     => 'ERROR',
		                                            I_DETAIL      => TO_CHAR(::SQL_ERROR_CODE) || ':' ||
                                                                     SUBSTR(::SQL_ERROR_MESSAGE, 1, 500) );                                   
    END;
    
    /*
    delete  target table 
    */
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                 I_LOGSID     => :logidi,
		                                         I_EVENT_NAME => :v_full_name,
		                                         I_MODULE     => 'EBGCFE'); 
    DELETE FROM   rpt_stdcost_monthly ;
    DELETE FROM   ui_stdcost_monthly ;
    DELETE FROM   mid_stdcost_monthly ;
    DELETE FROM   mid_pre_stdcost_monthly;
    
    
	/*
	split string and set elements of an array
	then, set value of a table variable
	*/
    BEGIN
    	DECLARE v_str VARCHAR(2000) := p_item;
     	DECLARE v_temp_str VARCHAR(2000);
 	 	DECLARE v_location INTEGER;
 	 	DECLARE v_totallength INTEGER;
	 	DECLARE v_name  VARCHAR(2000) ARRAY ;
	 	--DECLARE v_tab_item TABLE(item VARCHAR(40)); 
	 	
	 	WHILE LENGTH(v_str) > 0 DO
	 	 v_totallength:=length(v_str);
	 	 v_location:=LOCATE(v_str,',');
	 	IF v_location=0
	 		THEN
	 		v_temp_str:=v_str;
	 		v_str:='';
	 		ELSE
	 		v_temp_str:=LEFT(v_str,v_location-1);
	 		v_str:=right(v_str,v_totallength-v_location);
	 		END IF; 
	 	v_name := CONCAT(:v_name,ARRAY(v_temp_str));
	 	END WHILE;
     	ret_str = UNNEST(:v_name) AS ("NAME");
     	v_tab_item = SELECT name AS item FROM :ret_str;
     END;

	 /*
	 get subgeo,cfe_plant,ecc_plant and Calculation formula from conf_parameters and ui_cfe_ecc_plantmapping tables.
	 */
	 conf_map = SELECT pm.*, cp.pdesc
                  FROM (SELECT p.cfe_plant, ecc_plant, p.item_type
                          FROM ui_cfe_ecc_plantmapping p) pm,
                       conf_parameters cp
                 WHERE pm.ecc_plant = (CASE WHEN cp.pname = 'PLANT' THEN  cp.pvalue  END)
                   AND cp.pdomain = 'STDCOST';
       	
    IF p_cycle='CURRENT' THEN 
    
    	 IF IFNULL(p_item,'') = '' THEN
    	 	v_tab_item = SELECT DISTINCT item FROM ui_item WHERE item_type IN ('COMPONENT','OPTION');
   		 END IF;
   		
   		 bome_item = SELECT DISTINCT model FROM biz_costadder_mtm 
                      WHERE model_type IN ('COMPONENT','OPTION')
                        AND children = 'LEVEL0_ALL_COST';
                     
         item_filter = SELECT b.item FROM :bome_item a,:v_tab_item b WHERE a.model = b.item ;
   			
		INSERT INTO rpt_stdcost_monthly
		(cycle, product_group, item, cfe_plant,plant, item_desc, item_type, bome, stdcost,action,status,change_id,change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT ct.cycle,
			ct.product_group,
			ct.part_number,
			p.cfe_plant,
			p.ecc_plant,
			i.item_desc,
			i.item_type,
			ct.tote - ct.bntx AS bome,
			ct.tote - ct.bntx AS stdcost,
			'INSERT' AS action,
			'ACTIVE' AS stauts,
			NULL AS change_id,
			'COST_TAPE' AS change_action,
			CURRENT_TIMESTAMP AS sys_created_date,
			v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date,
			v_full_name AS sys_last_modified_by
		FROM (SELECT cycle,
					product_group,
					part_number,
					plant,
					SUM(MAP(cost_elem, 'TOTE', m2)) AS tote,
					ifnull(SUM(MAP(cost_elem, 'BNTX', m2)), 0) bntx
				FROM ui_cost_tape
				GROUP BY cycle, product_group, part_number, plant) ct,
			ui_item i,
			ui_cfe_ecc_plantmapping p
		WHERE ct.part_number = i.item
		AND ct.tote IS NOT NULL
		AND i.item_type     = 'COMPONENT'
		AND p.cfe_plant     = ct.plant
		AND p.item_type     = i.item_type
		AND i.product_group = ct.product_group
		AND i.product_group = p.product_group
		AND ct.part_number IN (SELECT item FROM :v_tab_item)
		AND EXISTS (SELECT 1 FROM z_pcdw_item z
				     WHERE z.item               = i.item
				       AND z.siteid             = ct.plant
				       AND ifnull(z.lvorm, '') <> 'X'
				       AND z.beskz              = 'F');
		
		   
		/*
		cal mva,ifrt,sw value and insert middle table 
		*/

		INSERT INTO mid_stdcost_monthly
		(cycle, product_group, item, cfe_plant,plant, item_desc,country,subgeo,item_type, bome,mva,ifrt,sw)
		SELECT MAX(cm.cycle),
               MAX(cm.product_group),
               cm.model,
               cm.plant,
               t.ecc_plant,
               i.item_desc,
               cm.country,
               cm.subgeo,
               cm.model_type,
               --t.item_type,
               SUM(CASE WHEN cm.children = 'LEVEL0_ALL_COST' THEN cm.m2 END) AS bome,
               IFNULL(SUM(CASE WHEN cm.children IN ('XMVA%', 'XMVA$') AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END),0) AS mva,
               IFNULL(SUM(CASE WHEN cm.children IN ('XIFRT%', 'XIFRT$') AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END),0) AS ifrt,
               IFNULL(SUM(CASE WHEN cm.children = 'XSWR$' AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END),0) AS sw
          FROM (SELECT * FROM biz_costadder_mtm
                 WHERE (model, plant, country) IN (SELECT model, plant, country
                                              FROM (SELECT model,
                                                           plant,
                                                           country,
                                                           row_number() over(PARTITION BY model,plant ORDER BY m2, country) AS rn
                                                      FROM biz_costadder_mtm
                                                     WHERE cost_name = 'BOME 1'
                                                       AND m2 IS NOT NULL)
                                             WHERE rn = 1)) cm,
               ui_item i,
               :conf_map t
         WHERE cm.model_type  = t.item_type
           AND i.item_type    = t.item_type
           AND cm.model_type  = 'OPTION'
           AND i.item         = cm.model
           AND cm.model       IN (SELECT * FROM :item_filter)
           AND cm.children    IN ('XMVA%', 'XMVA$', 'XIFRT%', 'XIFRT$', 'XSWR$', 'LEVEL0_ALL_COST')
           AND cm.plant       = t.cfe_plant
           AND cm.m1         IS NOT NULL
           AND EXISTS (SELECT 1 FROM z_pcdw_item z
                        WHERE z.item   = i.item
                          AND z.siteid = cm.plant
                          AND IFNULL(z.lvorm, '') <> 'X')
         GROUP BY cm.model,cm.plant,t.ecc_plant,i.item_desc,cm.model_type,cm.country,cm.subgeo;
		
        --set bome = tote - bntx
        bome = 
        --mtm-option-sbb
        SELECT model, plant,SUM(bntx) AS bntx
		FROM (SELECT model,
				     plant,
				     --SUM(MAP(cost_elem, 'TOTE', m1)) AS tote,
				     IFNULL(SUM(MAP(cost_elem, 'BNTX', m2)), 0) AS bntx
		     	FROM (SELECT model, plant, cost_elem, SUM(m2) AS m2
					    FROM ((SELECT t1.model,
									  t1.plant,
									  t2.cost_elem,
							    	  SUM(t2.m2 * t1.qtyper) AS m2
							     FROM biz_cbom_mtmsbb t1,
									 (SELECT b.model,
											SUM(c.m2 * b.qtyper) AS m2,
											b.plant,
											c.cost_elem
									    FROM biz_cbom_sbb b, ui_cost_tape c --sbb-component
									   WHERE b.children = c.part_number
									  	 AND b.plant = c.plant
									   GROUP BY b.model, b.plant, c.cost_elem) t2
							     WHERE t1.children    = t2.model
								   AND t1.plant       = t2.plant
								   AND t1.item_type_c = 'SBB'
							   GROUP BY t1.model, t1.plant, t2.cost_elem) 
							UNION ALL
							(SELECT a.model,
									a.plant,
									b.cost_elem,
									SUM(b.m2 * a.qtyper * (a.altpercent / 100)) AS m2
							FROM biz_cbom_mtmsbb a, ui_cost_tape b
							WHERE a.children      = b.part_number
								AND a.plant       = b.plant
								AND a.item_type_c <> 'SBB'
							GROUP BY a.model, a.plant, b.cost_elem))       
					GROUP BY model, plant, cost_elem)
			GROUP BY model, plant)
		GROUP BY model, plant;
        
	    UPDATE mid_stdcost_monthly a
		SET bome =
			(SELECT a.bome - b.bntx FROM :bome b
			  WHERE a.item      = b.model
				AND a.cfe_plant = b.plant
				AND a.item_type = 'OPTION')
		WHERE EXISTS(SELECT 1 FROM :bome b
	                  WHERE a.item      = b.model
				        AND a.cfe_plant = b.plant
				        AND a.item_type = 'OPTION')
		 AND a.item_type = 'OPTION';

	ELSE 
		/*
		when cycle<>'CURRENT'
		*/
    	IF IFNULL(p_item,'') = '' THEN
    		v_tab_item = SELECT DISTINCT item FROM ui_item_his 
    		              WHERE item_type IN ('COMPONENT','OPTION')
    		                AND cycle              =  p_cycle
    		                AND cycle_productgroup = p_cycle||'EBG';
   		END IF;
   		--get LEVEL0 model list
   		bome_item = SELECT DISTINCT model FROM biz_costadder_mtm_his 
                   WHERE model_type IN ('COMPONENT','OPTION')
                     AND children           = 'LEVEL0_ALL_COST'
                     AND cycle              =  p_cycle
                     AND cycle_productgroup = p_cycle||'EBG';
                     
        item_filter = SELECT b.item FROM :bome_item a,:v_tab_item b WHERE a.model = b.item ;  
         			
		INSERT INTO rpt_stdcost_monthly
			(cycle, product_group, item, cfe_plant,plant, item_desc, item_type, bome, stdcost,action,status,change_id,
			 change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT ct.cycle,
			ct.product_group,
			ct.part_number,
			ct.plant,
			p.ecc_plant,
			i.item_desc,
			i.item_type,
			ct.tote - bntx AS bome,
			ct.tote - bntx AS stdcost,
			'INSERT' AS action,
			'ACTION' AS stauts,
			NULL AS change_id,
			'COST_TAPE' AS change_action,
			CURRENT_TIMESTAMP AS sys_created_date,
			v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date,
			v_full_name AS sys_last_modified_by
		FROM (SELECT cycle,
					product_group,
					part_number,
					plant,
					SUM(MAP(cost_elem, 'TOTE', m2)) AS tote,
					IFNULL(SUM(MAP(cost_elem, 'BNTX', m2)), 0) AS bntx
				FROM ui_cost_tape_his
				WHERE cycle_productgroup = p_cycle || 'EBG'
				GROUP BY cycle, product_group, part_number, plant) ct,
			ui_item_his i,
			ui_cfe_ecc_plantmapping p
		WHERE ct.part_number     = i.item
		AND ct.tote              IS NOT NULL
		AND i.item_type          = 'COMPONENT'
		AND p.cfe_plant          = ct.plant
		AND p.item_type          = i.item_type
		AND i.product_group      = ct.product_group
		AND i.product_group      = p.product_group
		AND ct.cycle             = i.cycle
		AND ct.cycle             = p_cycle
		AND i.cycle_productgroup = p_cycle || 'EBG'
		AND ct.part_number IN (SELECT item FROM :v_tab_item)
		AND EXISTS (SELECT 1 FROM z_pcdw_item z 
		             WHERE z.item = i.item
				       AND z.siteid = ct.plant
				       AND z.beskz  = 'F'
				       AND IFNULL(z.lvorm, '') <> 'X');
		/*
		calculate mva,ifrt,sw 
		*/
		
		INSERT INTO mid_stdcost_monthly
		(cycle, product_group, item, cfe_plant,plant, item_desc,country,subgeo, item_type, bome,mva,ifrt,sw)
        SELECT MAX(cm.cycle),
               MAX(cm.product_group),
               cm.model,
               cm.plant,
               t.ecc_plant,
               i.item_desc,
               cm.country,
               cm.subgeo,
               cm.model_type,
               IFNULL(SUM(CASE WHEN cm.children = 'LEVEL0_ALL_COST' THEN cm.m2 END), 0) AS bome,
               IFNULL(SUM(CASE WHEN cm.children IN ('XMVA%', 'XMVA$') AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END), 0) AS mva,
               IFNULL(SUM(CASE WHEN cm.children IN ('XIFRT%', 'XIFRT$') AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END), 0) AS ifrt,
               IFNULL(SUM(CASE WHEN cm.children = 'XSWR$' AND cm.value_type = 'US_DOLLAR' THEN cm.m2 END), 0) AS sw
          FROM (SELECT * FROM biz_costadder_mtm_his 
                 WHERE (model, plant, country) IN (SELECT model, plant, country
                                              FROM (SELECT model,
                                                           plant,
                                                           country,
                                                           row_number() over(PARTITION BY model,plant ORDER BY m2, country) AS rn
                                                      FROM biz_costadder_mtm
                                                     WHERE cost_name          = 'BOME 1'
													   AND cycle_productgroup = p_cycle||'EBG'
													   AND m1 IS NOT NULL)
                                             WHERE rn = 1)
				  AND cycle_productgroup = p_cycle||'EBG') cm,
               ui_item_his i,
               :conf_map t
         WHERE cm.model_type        = t.item_type
           AND i.item_type          = t.item_type
           AND cm.model_type        = 'OPTION'
           AND i.item               = cm.model
           AND cm.model             IN (SELECT * FROM :item_filter)
           AND cm.children          IN ('XMVA%', 'XMVA$', 'XIFRT%', 'XIFRT$', 'XSWR$', 'LEVEL0_ALL_COST')
           AND cm.plant             = t.cfe_plant
		   AND i.cycle_productgroup = cm.cycle_productgroup
		   AND i.cycle_productgroup = p_cycle||'EBG'
           AND cm.m1                IS NOT NULL
           AND EXISTS (SELECT 1 FROM z_pcdw_item z
                        WHERE z.item = i.item
                          AND z.siteid = cm.plant
                          AND IFNULL(z.lvorm, '') <> 'X')
         GROUP BY cm.model,cm.plant,t.ecc_plant,i.item_desc,cm.model_type,cm.country,cm.subgeo;
        --set bome = tote - bntx
        bome = 
            --mtm-option-sbb
        SELECT model, plant, SUM(bntx) AS bntx
          FROM (SELECT model,
                       plant,
                   --SUM(MAP(cost_elem, 'TOTE', m1)) AS tote,
                       IFNULL(SUM(MAP(cost_elem, 'BNTX', m2)), 0) AS bntx
                  FROM (SELECT model, plant, cost_elem, SUM(m2) AS m2
                          FROM ((SELECT t1.model,
                                        t1.plant,
                                        t2.cost_elem,
                                        SUM(t2.m2 * t1.qtyper) AS m2
                                   FROM biz_cbom_mtmsbb_his t1,
                                        (SELECT b.model,
                                                SUM(c.m2 * b.qtyper) AS m2,
                                                b.plant,
                                                c.cost_elem
                                           FROM biz_cbom_sbb_his b,
                                                ui_cost_tape_his c --sbb-component
                                          WHERE b.children           = c.part_number
                                            AND b.plant              = c.plant
                                            AND b.cycle_productgroup = c.cycle_productgroup
                                            AND c.cycle_productgroup = p_cycle || 'EBG'
                                       GROUP BY b.model, b.plant, c.cost_elem) t2
                                  WHERE t1.children           = t2.model
                                    AND t1.plant              = t2.plant
                                    AND t1.item_type_c        = 'SBB'
                                    AND t1.cycle_productgroup = p_cycle || 'EBG'
                              GROUP BY t1.model, t1.plant, t2.cost_elem) 
                              UNION ALL
                             (SELECT a.model,
                                     a.plant,
                                     b.cost_elem,
                                     SUM(b.m2 * a.qtyper * (a.altpercent / 100)) AS m2
                                FROM biz_cbom_mtmsbb_his a, ui_cost_tape_his b
                               WHERE a.children          = b.part_number
                                 AND a.plant             = b.plant
                                 AND a.item_type_c       <> 'SBB'
                                 AND a.cycle_productgroup = b.cycle_productgroup
                                 AND b.cycle_productgroup = p_cycle || 'EBG'
                              GROUP BY a.model, a.plant, b.cost_elem))
                     GROUP BY model, plant, cost_elem)
             GROUP BY model, plant)
     GROUP BY model, plant;
        
	    UPDATE mid_stdcost_monthly a
		SET bome =
			(SELECT a.bome - b.bntx
				FROM :bome b
				WHERE a.item     = b.model
				AND a.cfe_plant  = b.plant
				AND a.item_type  = 'OPTION')
		WHERE EXISTS(SELECT 1 FROM :bome b
				      WHERE a.item      = b.model
				        AND a.cfe_plant = b.plant
				        AND a.item_type = 'OPTION')
		AND a.item_type = 'OPTION';

	END IF;
	
   /*
   calculate stdcost 
   */
   
    BEGIN
		DECLARE CURSOR c_cur_conf FOR --SELECT  pname,pvalue FROM conf_parameters WHERE pdomain='STDCOST';
		SELECT DISTINCT cfe_plant,ecc_plant,pdesc FROM :conf_map;
 
		FOR cur_conf AS c_cur_conf DO
		
			v_sql := 'INSERT INTO rpt_stdcost_monthly
   			(cycle, product_group, item, cfe_plant,plant, item_desc, item_type, bome,mva,ifrt,sw, stdcost,action,status,change_id,change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
  			SELECT mid.cycle,
     		 mid.product_group,
     		 mid.item,
     		 mid.cfe_plant,
     		 mid.plant,
    		 mid.item_desc,
    		 mid.item_type,
     		 mid.bome,
    		 mid.mva,
   		 	 mid.ifrt,
     		 mid.sw,
     		 '||cur_conf.pdesc||' AS stdcost,
     		 ''INSERT'' AS action,
    	 	 ''ACTIVE'' AS stauts,
     		 NULL AS change_id,
     		 ''COSTADDER'' AS change_action,
     		 CURRENT_TIMESTAMP AS sys_created_date,
     		 '''||v_full_name||''' AS sys_created_by,
     		 CURRENT_TIMESTAMP AS sys_last_modified_date,
     		 '''||v_full_name||''' AS sys_last_modified_by
   			FROM mid_stdcost_monthly mid
   			WHERE mid.cfe_plant = '''||cur_conf.cfe_plant||'''
   			  AND mid.plant     = '''||cur_conf.ecc_plant||'''
   			  AND mid.bome      > 0 ';
     	  EXECUTE IMMEDIATE v_sql;
     	END FOR;
     	
     END;
    
    --DELETE FROM rpt_stdcost_monthly WHERE BOME<=0;
	---set stdcost = 0.01
    IF  p_cycle='CURRENT' THEN 
    	/*
    	 IF IFNULL(p_item,'') = '' THEN
    	 	v_tab_item = SELECT DISTINCT item FROM ui_item WHERE item_type IN ('COMPONENT','OPTION');
   		 END IF;
    
    	INSERT INTO rpt_stdcost_monthly
		(cycle, product_group, item, cfe_plant,plant, item_desc, item_type, bome, stdcost,action,status,change_id,change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT ct.cycle,
			ct.product_group,
			ct.part_number,
			p.cfe_plant,
			p.ecc_plant,
			i.item_desc,
			i.item_type,
			ct.tote - ct.bntx AS bome,
			ct.tote - ct.bntx AS stdcost,
			'INSERT' AS action,
			'ACTIVE' AS stauts,
			NULL AS change_id,
			'COST_TAPE_OPTION' AS change_action,
			CURRENT_TIMESTAMP AS sys_created_date,
			v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date,
			v_full_name AS sys_last_modified_by
		FROM (SELECT cycle,
					product_group,
					part_number,
					plant,
					SUM(MAP(cost_elem, 'TOTE', m1)) AS tote,
					ifnull(SUM(MAP(cost_elem, 'BNTX', m1)), 0) bntx
				FROM ui_cost_tape
				GROUP BY cycle, product_group, part_number, plant) ct,
			ui_item i,
			ui_cfe_ecc_plantmapping p
		WHERE ct.part_number = i.item
		  AND ct.tote IS NOT NULL
		  AND i.item_type     = 'OPTION'
	      AND p.cfe_plant     = ct.plant
		  AND p.item_type     = i.item_type
		  AND i.product_group = ct.product_group
		  AND i.product_group = p.product_group
		  AND ct.part_number IN (SELECT item FROM :v_tab_item)
		  AND EXISTS (SELECT 1 FROM z_pcdw_item z
			   	       WHERE z.item            = i.item
				         AND z.siteid            = ct.plant
				         AND IFNULL(z.lvorm, '') <> 'X')
	      AND NOT EXISTS(SELECT 1 FROM rpt_stdcost_monthly t
	                      WHERE t.item      = ct.part_number
	                        AND t.cfe_plant = ct.plant
	                        AND t.item_type = 'OPTION');
	                        */
    	 
        --when X_SPECMODDESG in ('TREX','D5') then set stdcost=0.01
        
        UPDATE rpt_stdcost_monthly a
           SET stdcost = 0.01
          FROM ui_item b , z_pcdw_item z
         WHERE a.item           = b.item 
           AND b.item           = z.item
           AND a.stdcost        = 0
           AND a.item_type     <> 'OPTION'
           AND z.x_specmoddesg IN ('TREX','D5')
           AND z.mtart          = 'ZXSW';
           
        --when basic_name in ('RECRDMEDIA','DPK','TAPE','SOFTWARE','SOFTW_GRP','FLYER','MS_PUBS',
        -- 'PUBS','LABEL','COA_LABELS','PACKAGING','SERVICE','WARRANTY') and stdcost=0 then set stdcost=0.01
        UPDATE rpt_stdcost_monthly a
           SET stdcost = 0.01
          FROM ui_item b
         WHERE a.item           = b.item 
           AND a.stdcost        = 0
           --Modified by Zhoubinbin 20160628
           AND a.item_type     <> 'OPTION'
           AND b.zeinr          IN  (SELECT pvalue FROM conf_parameters 
                                      WHERE pdomain = 'STDCOST' 
                                        AND pname   = 'BASIC_NAME');
                                      
        INSERT INTO rpt_stdcost_monthly
			(cycle,product_group,item,cfe_plant,plant,item_desc,item_type,bome,mva,ifrt,sw,stdcost,action,status,
			change_id,change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT i.cycle,i.product_group,i.item,t.cfe_plant,t.ecc_plant,i.item_desc,i.item_type,0.01 AS bome,NULL AS mva,NULL AS ifrt,
	        NULL AS sw,0.01 AS stdcost,'INSERT','ACTIVE',NULL,'NO_COST',CURRENT_TIMESTAMP,v_full_name,CURRENT_TIMESTAMP,v_full_name
	     FROM ui_item i,z_pcdw_item z,:conf_map t
	    WHERE i.item       = z.item
	      AND i.item_type  = t.item_type
	      AND z.siteid     = t.cfe_plant
	      AND i.eol_status IN ('OL','TEMP')
          AND IFNULL(z.lvorm,'') <> 'X'
	      AND z.beskz            IN ('E','F')
	      --Modified by Zhoubinbin 20160628
	      AND ((i.x_specmoddesg IN ('TREX','D5') 
	           AND z.mtart          = 'ZXSW'
	           AND i.item_type  IN ('COMPONENT','OPTION'))
	            OR (i.zeinr     IN  (SELECT pvalue FROM conf_parameters 
                                      WHERE pdomain = 'STDCOST' 
                                       AND pname   = 'BASIC_NAME')
                   AND i.item_type <> 'OPTION')
              )
	      AND NOT EXISTS (SELECT NULL FROM rpt_stdcost_monthly m
	                       WHERE i.item           = m.item
						     AND i.item_type      = m.item_type
							 AND t.ecc_plant      = m.plant
	                         AND i.cycle          = m.cycle
	                         AND i.product_group  = m.product_group
	                         AND m.cycle          = p_cycle) ;
	ELSE
        /*
   		IF IFNULL(p_item,'') = '' THEN
    		v_tab_item = SELECT DISTINCT item FROM ui_item_his 
    		              WHERE item_type IN ('COMPONENT','OPTION')
    		                AND cycle              =  p_cycle
    		                AND cycle_productgroup = p_cycle||'EBG';
   		END IF;
         			
		INSERT INTO rpt_stdcost_monthly
			(cycle, product_group, item, cfe_plant,plant, item_desc, item_type, bome, stdcost,action,status,change_id,
			 change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT ct.cycle,
			ct.product_group,
			ct.part_number,
			ct.plant,
			p.ecc_plant,
			i.item_desc,
			i.item_type,
			ct.tote - bntx AS bome,
			ct.tote - bntx AS stdcost,
			'INSERT' AS action,
			'ACTIVE' AS stauts,
			NULL AS change_id,
			'COST_TAPE_OPTION' AS change_action,
			CURRENT_TIMESTAMP AS sys_created_date,
			v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date,
			v_full_name AS sys_last_modified_by
		FROM (SELECT cycle,
					product_group,
					part_number,
					plant,
					SUM(MAP(cost_elem, 'TOTE', m1)) AS tote,
					IFNULL(SUM(MAP(cost_elem, 'BNTX', m1)), 0) AS bntx
				FROM ui_cost_tape_his
				WHERE cycle_productgroup = p_cycle || 'EBG'
				GROUP BY cycle, product_group, part_number, plant) ct,
			ui_item_his i,
			ui_cfe_ecc_plantmapping p
		WHERE ct.part_number     = i.item
		AND ct.tote              IS NOT NULL
		AND i.item_type          = 'OPTION'
		AND p.cfe_plant          = ct.plant
		AND p.item_type          = i.item_type
		AND i.product_group      = ct.product_group
		AND i.product_group      = p.product_group
		AND ct.cycle             = i.cycle
		AND ct.cycle             = p_cycle
		AND i.cycle_productgroup = p_cycle || 'EBG'
		AND ct.part_number IN (SELECT item FROM :v_tab_item)
		AND EXISTS (SELECT 1 FROM z_pcdw_item z
				WHERE z.item = i.item
				AND z.siteid = ct.plant
				AND IFNULL(z.lvorm, '') <> 'X')
		AND NOT EXISTS (SELECT 1 FROM rpt_stdcost_monthly t
		                 WHERE t.cycle     = ct.cycle
		                   AND t.item      = ct.part_number
		                   AND t.cfe_plant = ct.plant
		                   AND t.item_type = 'OPTION');
		*/                   
        --when X_SPECMODDESG in ('TREX','D5') then set stdcost=0.01
        
        UPDATE rpt_stdcost_monthly a
           SET stdcost = 0.01
          FROM ui_item_his b , z_pcdw_item z
         WHERE a.item                = b.item 
           AND b.item                = z.item
           AND a.stdcost             = 0
           AND z.x_specmoddesg       IN ('TREX','D5')
           AND z.mtart               = 'ZXSW'
           AND b.cycle_productgroup = p_cycle||'EBG' ;
           
        --when basic_name in ('RECRDMEDIA','DPK','TAPE','SOFTWARE','SOFTW_GRP','FLYER','MS_PUBS',
        -- 'PUBS','LABEL','COA_LABELS','PACKAGING','SERVICE','WARRANTY') and stdcost=0 then set stdcost=0.01
        UPDATE rpt_stdcost_monthly a
           SET stdcost = 0.01
          FROM ui_item_his b
         WHERE a.item               = b.item 
           AND a.stdcost            = 0
           --Modified by Zhoubinbin 20160628
           AND a.item_type     <> 'OPTION'
           AND b.cycle_productgroup = p_cycle||'EBG'
           AND b.zeinr          IN  (SELECT pvalue FROM conf_parameters 
                                      WHERE pdomain = 'STDCOST' 
                                        AND pname   = 'BASIC_NAME');
                                      
        INSERT INTO rpt_stdcost_monthly
			(cycle,product_group,item,cfe_plant,plant,item_desc,item_type,bome,mva,ifrt,sw,stdcost,action,status,
			change_id,change_action,sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
		SELECT i.cycle,i.product_group,i.item,t.cfe_plant,t.ecc_plant,i.item_desc,i.item_type,0.01 AS bome,NULL AS mva,NULL AS ifrt,
	        NULL AS sw,0.01 AS stdcost,'INSERT','ACTIVE',NULL,'NO_COST',CURRENT_TIMESTAMP,v_full_name,CURRENT_TIMESTAMP,v_full_name
	     FROM ui_item_his i,z_pcdw_item z,:conf_map t
	    WHERE i.item               = z.item
	      AND i.item_type          = t.item_type
	      AND z.siteid             = t.cfe_plant
	      AND i.eol_status        IN ('OL','TEMP')
          AND IFNULL(z.lvorm,'')  <> 'X'
          AND i.cycle_productgroup = p_cycle||'EBG'
	      AND z.beskz            IN ('E','F')
	      --Modified by Zhoubinbin 20160628
	      AND ((i.x_specmoddesg IN ('TREX','D5') 
	           AND z.mtart          = 'ZXSW'
	           AND i.item_type         IN ('COMPONENT','OPTION'))
	            OR (i.zeinr     IN  (SELECT pvalue FROM conf_parameters 
                                      WHERE pdomain = 'STDCOST' 
                                       AND pname   = 'BASIC_NAME')
                   AND i.item_type <> 'OPTION')
              )
	      AND NOT EXISTS (SELECT NULL FROM rpt_stdcost_monthly m
	                       WHERE i.item               = m.item
						     AND i.item_type          = m.item_type
							 AND t.cfe_plant          = m.cfe_plant
	                         AND i.cycle              = m.cycle
	                         AND i.product_group      = m.product_group
	                         AND i.cycle_productgroup = p_cycle||'EBG' ) ;	
	END IF;

    UPDATE rpt_stdcost_monthly a
       SET stdcost = 0.01	
     WHERE stdcost < 0.01
       AND stdcost > 0;
		   
	INSERT INTO ui_stdcost_monthly
	SELECT cycle,
		 product_group,
		 item,
		 plant,
		 stdcost,
		 action,
		 status,
		 change_id,
		 change_action,
		 sys_created_date,
		 sys_created_by,
		 sys_last_modified_date,
		 sys_last_modified_by
	FROM rpt_stdcost_monthly 
    WHERE stdcost > 0;
   
   	EXEC 'commit';
    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
     
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');  
 
END;