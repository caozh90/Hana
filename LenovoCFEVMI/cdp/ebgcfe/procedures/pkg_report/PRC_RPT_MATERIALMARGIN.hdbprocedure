PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN" 
( 
    IN  p_in_cycle         VARCHAR(40),
    IN  p_in_deltacycle    VARCHAR(40),
    OUT p_out_exitcode     NUMBER,
    OUT p_out_exitmess     VARCHAR(2000)
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	
	--READS SQL DATA 
/************************************************************************
*name       : PRC_RPT_MATERIALMARGIN 
*function   : Material Margin Report
*input      :p_in_cycle, p_in_deltacycle
*output     : p_out_exitcode : error code, p_out_exitmess: error message 
*author     : Leonard Ling
*CreateDate : 2015-02-05
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
AS
	  v_user_id           VARCHAR(64) := SESSION_USER;
      v_pkg_name          VARCHAR(30) := 'PKG_REPORT';
      v_prc_name          VARCHAR(50) := 'PRC_RPT_MATERIALMARGIN';
      v_report_name       VARCHAR(50) := 'RPT_MATERIALMARGIN';
      v_full_name         VARCHAR(100) := :v_pkg_name || '.' || :v_prc_name;	
      v_exitmess          VARCHAR(200) := '';
      logidi              INTEGER := 0;
      v_mon               VARCHAR(3);
      v_residue           INTEGER;
      v_subprc_exitcode   INTEGER;
BEGIN    

	DECLARE V_T_MID_RPT_MATERIALMARGIN_CYCLE 			"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_DELTACYCLE 		"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_MTM_CYCLE 		"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_MTM_DELTACYCLE 	"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_CTO_CYCLE 		"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_CTO_DELTACYCLE 	"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_SWR_CYCLE 		"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	DECLARE V_T_MID_RPT_MATERIALMARGIN_SWR_DELTACYCLE 	"EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.MID_RPT_MATERIALMARGIN";
	
	DECLARE V_BIZ_COST_MODEL_LIST                	    "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.T_BIZ_COST_MODEL_LIST";
	
	DECLARE V_COUNTER  INTEGER;
    DECLARE i INTEGER;
	
	DECLARE CURSOR c_cursor FOR
	    SELECT pvalue, ptype FROM conf_parameters
	     WHERE pdomain = 'PERFORMANCE_TUNING'
	       AND pname   = 'LOOP_BY_ITEMTYPE'
	    ORDER BY ptype;
	
    DECLARE exp_procedure CONDITION for SQL_ERROR_CODE 10001;  
    DECLARE EXIT HANDLER FOR exp_procedure
    BEGIN
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
											        I_EVENT_NAME => :v_full_name,
											        I_MODULE     => 'EBGCFE',
											        I_MESSAGE    => 'ERROR',
											        I_DETAIL     => :p_out_exitmess );                                                  
    END;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN         
        p_out_exitcode:=::SQL_ERROR_CODE;
        p_out_exitmess := to_char(::SQL_ERROR_CODE) || ':' || 
		                  substr(::SQL_ERROR_MESSAGE, 1, 500);       
	    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
	                                                I_LOGSID     => :logidi,
		                                            I_EVENT_NAME => :v_full_name, 
		                                            I_MODULE     => 'EBGCFE',
		                                            I_MESSAGE    => 'ERROR', 
		                                            I_DETAIL     => :p_out_exitmess); 
		                                                             
    END;   
    
    --process logic  
    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');  
		                                        
    EXEC 'TRUNCATE TABLE rpt_materialmargin'; 
    
		                                        
	--Call COST_MODEL_LIST process for cycle
	CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_ONDEMAND_LIST"(:p_in_cycle,:p_in_deltacycle, v_report_name, v_subprc_exitcode,:V_BIZ_COST_MODEL_LIST);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_ONDEMAND_LIST(CALL CYCLE)';
        SIGNAL exp_procedure;
    END IF;	
    
    FOR cur_row AS c_cursor
    DO
        SELECT COUNT(0) INTO V_COUNTER
          FROM :V_BIZ_COST_MODEL_LIST
         WHERE ITEM_TYPE = cur_row.ptype;
          
	    FOR i IN 1..CEIL(v_counter/cur_row.pvalue)
	    DO
	        TAB_LOOP_MODEL_LIST = 
	              SELECT * 
	                FROM :V_BIZ_COST_MODEL_LIST
	               WHERE ITEM_TYPE = cur_row.ptype
	                 AND SEQ_ID    > (I-1)*cur_row.pvalue
	                 AND SEQ_ID    <= I*cur_row.pvalue;
    
		    IF cur_row.ptype <> 'CTO'
		    THEN
			    --Call mtm process for cycle
				CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_MTM"('CYCLE', :p_in_cycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode,:V_T_MID_RPT_MATERIALMARGIN_MTM_CYCLE);
			    IF v_subprc_exitcode <> 0 THEN
			        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_MTM(CALL CYCLE)';
			        SIGNAL exp_procedure;
			    END IF;
			    
			    --Call mtm process for deltacycle
				CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_MTM"('DELTACYCLE', :p_in_deltacycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode,:V_T_MID_RPT_MATERIALMARGIN_MTM_DELTACYCLE);
			    IF v_subprc_exitcode <> 0 THEN
			        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_MTM(CALL DELTACYCLE)';
			        SIGNAL exp_procedure;
			    END IF; 
			    
			    V_T_MID_RPT_MATERIALMARGIN_CTO_CYCLE = 
			      SELECT '' AS PRODUCT_GROUP, '' AS CYCLE, '' AS CYCLE_TYPE, '' AS BRAND,
			             '' AS FAMILY, '' AS CTO, '' AS ASSEMBLY, '' AS EOL_STATUS,
			             '' AS ASSEMBLY_DESC, 0 AS QTY, '' AS COMPONENT, '' AS COMP_DESC,
			             '' AS PLANT, '' AS SUBGEO, '' AS COUNTRY, 0 AS M1, 0 AS M2, 0 AS M3,
			             0 AS M4, 0 AS M5, 0 AS M6, 0 AS M7, 0 AS M8, 0 AS M9, 0 AS M10,
			             0 AS M11, 0 AS M12, 0 AS M13, 0 AS M14, 0 AS M15, 0 AS M16, 0 AS M17,
			             0 AS M18
			        FROM DUMMy
			       LIMIT 0;
			       
			    V_T_MID_RPT_MATERIALMARGIN_CTO_DELTACYCLE = 
			      SELECT '' AS PRODUCT_GROUP, '' AS CYCLE, '' AS CYCLE_TYPE, '' AS BRAND,
			             '' AS FAMILY, '' AS CTO, '' AS ASSEMBLY, '' AS EOL_STATUS,
			             '' AS ASSEMBLY_DESC, 0 AS QTY, '' AS COMPONENT, '' AS COMP_DESC,
			             '' AS PLANT, '' AS SUBGEO, '' AS COUNTRY, 0 AS M1, 0 AS M2, 0 AS M3,
			             0 AS M4, 0 AS M5, 0 AS M6, 0 AS M7, 0 AS M8, 0 AS M9, 0 AS M10,
			             0 AS M11, 0 AS M12, 0 AS M13, 0 AS M14, 0 AS M15, 0 AS M16, 0 AS M17,
			             0 AS M18
			        FROM DUMMy
			       LIMIT 0;
            ELSE			       
			    --Call cto process for cycle
			    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_CTO"('CYCLE', :p_in_cycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode, :V_T_MID_RPT_MATERIALMARGIN_CTO_CYCLE);
			    IF v_subprc_exitcode <> 0 THEN
			        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_CTO(CALL CYCLE)';
			        SIGNAL exp_procedure;
			    END IF;
			
			    --Call cto process for deltacycle
				CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_CTO"('DELTACYCLE', :p_in_deltacycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode,:V_T_MID_RPT_MATERIALMARGIN_CTO_DELTACYCLE);
			    IF v_subprc_exitcode <> 0 THEN
			        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_CTO(CALL DELTACYCLE)';
			        SIGNAL exp_procedure;
			    END IF;
			    
			    V_T_MID_RPT_MATERIALMARGIN_MTM_CYCLE = 
			      SELECT '' AS PRODUCT_GROUP, '' AS CYCLE, '' AS CYCLE_TYPE, '' AS BRAND,
			             '' AS FAMILY, '' AS CTO, '' AS ASSEMBLY, '' AS EOL_STATUS,
			             '' AS ASSEMBLY_DESC, 0 AS QTY, '' AS COMPONENT, '' AS COMP_DESC,
			             '' AS PLANT, '' AS SUBGEO, '' AS COUNTRY, 0 AS M1, 0 AS M2, 0 AS M3,
			             0 AS M4, 0 AS M5, 0 AS M6, 0 AS M7, 0 AS M8, 0 AS M9, 0 AS M10,
			             0 AS M11, 0 AS M12, 0 AS M13, 0 AS M14, 0 AS M15, 0 AS M16, 0 AS M17,
			             0 AS M18
			        FROM DUMMy
			       LIMIT 0; 
			       
			    V_T_MID_RPT_MATERIALMARGIN_MTM_DELTACYCLE = 
			      SELECT '' AS PRODUCT_GROUP, '' AS CYCLE, '' AS CYCLE_TYPE, '' AS BRAND,
			             '' AS FAMILY, '' AS CTO, '' AS ASSEMBLY, '' AS EOL_STATUS,
			             '' AS ASSEMBLY_DESC, 0 AS QTY, '' AS COMPONENT, '' AS COMP_DESC,
			             '' AS PLANT, '' AS SUBGEO, '' AS COUNTRY, 0 AS M1, 0 AS M2, 0 AS M3,
			             0 AS M4, 0 AS M5, 0 AS M6, 0 AS M7, 0 AS M8, 0 AS M9, 0 AS M10,
			             0 AS M11, 0 AS M12, 0 AS M13, 0 AS M14, 0 AS M15, 0 AS M16, 0 AS M17,
			             0 AS M18
			        FROM DUMMy
			       LIMIT 0;
		    END IF;

    
		    --Call swr process for cycle
		    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_SWR"('CYCLE', :p_in_cycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode,:V_T_MID_RPT_MATERIALMARGIN_SWR_CYCLE);
		    IF v_subprc_exitcode <> 0 THEN
		        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_SWR(CALL CYCLE)';
		        SIGNAL exp_procedure;
		    END IF;
		    
		    --Call swr process for deltacycle
			CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_MATERIALMARGIN_BYCYCLE_SWR"('DELTACYCLE', :p_in_deltacycle,:TAB_LOOP_MODEL_LIST, v_subprc_exitcode,:V_T_MID_RPT_MATERIALMARGIN_SWR_DELTACYCLE);
		    IF v_subprc_exitcode <> 0 THEN
		        p_out_exitmess := 'ERROR OCCUR IN PRC_RPT_MATERIALMARGIN_BYCYCLE_SWR(CALL DELTACYCLE)';
		        SIGNAL exp_procedure;
		    END IF;
		
			V_T_MID_RPT_MATERIALMARGIN_CYCLE=
			SELECT product_group, cycle, cycle_type, brand, family, cto, assembly,
		           eol_status, MAX(assembly_desc) AS assembly_desc, SUM(qty) AS qty, 
		           component, MAX(comp_desc) AS comp_desc,
		           plant, subgeo, country, SUM(m1) AS m1, SUM(m2) AS m2, SUM(m3) AS m3,
		           SUM(m4) AS m4, SUM(m5) AS m5, SUM(m6) AS m6, SUM(m7) AS m7,
		           SUM(m8) AS m8, SUM(m9) AS m9, SUM(m10) AS m10, SUM(m11) AS m11,
		           SUM(m12) AS m12, SUM(m13) AS m13, SUM(m14) AS m14, SUM(m15) AS m15,
		           SUM(m16) AS m16, SUM(m17) AS m17, SUM(m18) AS m18
		      FROM (
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_CTO_CYCLE
			        UNION ALL
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_MTM_CYCLE
			        UNION ALL
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_SWR_CYCLE
			       )
			GROUP BY product_group, cycle, cycle_type, brand, family, cto, assembly,
		             eol_status, component, plant, subgeo, country
		    WITH HINT(NO_INLINE);
		
			V_T_MID_RPT_MATERIALMARGIN_DELTACYCLE=
			SELECT product_group, cycle, cycle_type, brand, family, cto, assembly,
		           eol_status, MAX(assembly_desc) AS assembly_desc, SUM(qty) AS qty, 
		           component, MAX(comp_desc) AS comp_desc,
		           plant, subgeo, country, SUM(m1) AS m1, SUM(m2) AS m2, SUM(m3) AS m3,
		           SUM(m4) AS m4, SUM(m5) AS m5, SUM(m6) AS m6, SUM(m7) AS m7,
		           SUM(m8) AS m8, SUM(m9) AS m9, SUM(m10) AS m10, SUM(m11) AS m11,
		           SUM(m12) AS m12, SUM(m13) AS m13, SUM(m14) AS m14, SUM(m15) AS m15,
		           SUM(m16) AS m16, SUM(m17) AS m17, SUM(m18) AS m18
		      FROM (
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_CTO_DELTACYCLE
			        UNION ALL
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_MTM_DELTACYCLE
			        UNION ALL
			        SELECT * FROM :V_T_MID_RPT_MATERIALMARGIN_SWR_DELTACYCLE
			       )
			GROUP BY product_group, cycle, cycle_type, brand, family, cto, assembly,
		             eol_status, component, plant, subgeo, country
		    WITH HINT(NO_INLINE);
			
			INSERT INTO rpt_materialmargin
			    (product_group, cycle, deltacycle, brand, family, cto, assembly,
		         eol_status, assembly_desc, qty, component, comp_desc, plant, subgeo,
		         country, cyclem1, cyclem2, cyclem3, cyclem4, cyclem5, cyclem6,
		         cyclem7, cyclem8, cyclem9, cyclem10, cyclem11, cyclem12, cyclem13,
		         cyclem14, cyclem15, cyclem16, cyclem17, cyclem18, tocyclem1,
		         tocyclem2, tocyclem3, tocyclem4, tocyclem5, tocyclem6, tocyclem7,
		         tocyclem8, tocyclem9, tocyclem10, tocyclem11, tocyclem12, tocyclem13,
		         tocyclem14, tocyclem15, tocyclem16, tocyclem17, tocyclem18, deltam1,
		         deltam2, deltam3, deltam4, deltam5, deltam6, deltam7, deltam8,
		         deltam9, deltam10, deltam11, deltam12, deltam13, deltam14, deltam15,
		         deltam16, deltam17, deltam18, status, sys_created_by,
		         sys_created_date, sys_last_modified_by, sys_last_modified_date)
		    SELECT IFNULL(t1.product_group, t2.product_group) AS product_group,
		           :p_in_cycle                                AS cycle,
		           :p_in_deltacycle                           AS deltacycle,
		           IFNULL(t1.brand, t2.brand)                 AS brand,
		           IFNULL(t1.family, t2.family)               AS family,
		           IFNULL(t1.cto, t2.cto)                     AS cto,
		           IFNULL(t1.assembly, t2.assembly)           AS assembly,
		           IFNULL(t1.eol_status, t2.eol_status)       AS eol_status,
		           IFNULL(t1.assembly_desc, t2.assembly_desc) AS assembly_desc,
		           IFNULL(t1.qty, t2.qty)                     AS qty,
		           IFNULL(t1.component, t2.component)         AS component,
		           IFNULL(t1.comp_desc, t2.comp_desc)         AS comp_desc,
		           IFNULL(t1.plant, t2.plant)                 AS plant,
		           IFNULL(t1.subgeo, t2.subgeo)               AS subgeo,
		           IFNULL(t1.country, t2.country)             AS country,
		           t1.m1 AS cyclem1, t1.m2 AS cyclem2, t1.m3 AS cyclem3,
		           t1.m4 AS cyclem4, t1.m5 AS cyclem5, t1.m6 AS cyclem6,
		           t1.m7 AS cyclem7, t1.m8 AS cyclem8, t1.m9 AS cyclem9,
		           t1.m10 AS cyclem10, t1.m11 AS cyclem11, t1.m12 AS cyclem12,
		           t1.m13 AS cyclem13, t1.m14 AS cyclem14, t1.m15 AS cyclem15,
		           t1.m16 AS cyclem16, t1.m17 AS cyclem17, t1.m18 AS cyclem18,
		           t2.m1 AS tocyclem1, t2.m2 AS tocyclem2, t2.m3 AS tocyclem3,
		           t2.m4 AS tocyclem4, t2.m5 AS tocyclem5, t2.m6 AS tocyclem6,
		           t2.m7 AS tocyclem7, t2.m8 AS tocyclem8, t2.m9 AS tocyclem9,
		           t2.m10 AS tocyclem10, t2.m11 AS tocyclem11, t2.m12 AS tocyclem12,
		           t2.m13 AS tocyclem13, t2.m14 AS tocyclem14, t2.m15 AS tocyclem15,
		           t2.m16 AS tocyclem16, t2.m17 AS tocyclem17, t2.m18 AS tocyclem18,
		           IFNULL(t1.m1, 0) - IFNULL(t2.m1, 0) AS deltam1,
		           IFNULL(t1.m2, 0) - IFNULL(t2.m2, 0) AS deltam2,
		           IFNULL(t1.m3, 0) - IFNULL(t2.m3, 0) AS deltam3,
		           IFNULL(t1.m4, 0) - IFNULL(t2.m4, 0) AS deltam4,
		           IFNULL(t1.m5, 0) - IFNULL(t2.m5, 0) AS deltam5,
		           IFNULL(t1.m6, 0) - IFNULL(t2.m6, 0) AS deltam6,
		           IFNULL(t1.m7, 0) - IFNULL(t2.m7, 0) AS deltam7,
		           IFNULL(t1.m8, 0) - IFNULL(t2.m8, 0) AS deltam8,
		           IFNULL(t1.m9, 0) - IFNULL(t2.m9, 0) AS deltam9,
		           IFNULL(t1.m10, 0) - IFNULL(t2.m10, 0) AS deltam10,
		           IFNULL(t1.m11, 0) - IFNULL(t2.m11, 0) AS deltam11,
		           IFNULL(t1.m12, 0) - IFNULL(t2.m12, 0) AS deltam12,
		           IFNULL(t1.m13, 0) - IFNULL(t2.m13, 0) AS deltam13,
		           IFNULL(t1.m14, 0) - IFNULL(t2.m14, 0) AS deltam14,
		           IFNULL(t1.m15, 0) - IFNULL(t2.m15, 0) AS deltam15,
		           IFNULL(t1.m16, 0) - IFNULL(t2.m16, 0) AS deltam16,
		           IFNULL(t1.m17, 0) - IFNULL(t2.m17, 0) AS deltam17,
		           IFNULL(t1.m18, 0) - IFNULL(t2.m18, 0) AS deltam18,
		           'ACTIVE' AS status, :v_user_id, current_timestamp,
		           :v_user_id, current_timestamp
		      FROM :V_T_MID_RPT_MATERIALMARGIN_CYCLE      t1
		           FULL JOIN
		           :V_T_MID_RPT_MATERIALMARGIN_DELTACYCLE t2 
		           ON t1.product_group = t2.product_group
		          AND t1.cto           = t2.cto
		          AND t1.assembly      = t2.assembly
		          AND t1.component     = t2.component
		          AND t1.plant         = t2.plant
		          AND t1.subgeo        = t2.subgeo
		          AND t1.country       = t2.country;

    	END FOR;
    END FOR;
    
    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
	                                            I_EVENT_NAME => :v_full_name,
	                                            I_MODULE     => 'EBGCFE');   
END;