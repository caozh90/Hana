PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_cycle::PRC_MONTH_ROLLING" (
   IN    p_in_product_group   VARCHAR(10),
   IN    p_in_cycle_cur_month VARCHAR(100),
   --IN    p_in_ui_name         VARCHAR(50),
   OUT   p_out_exitcode       INTEGER,
   OUT   p_out_exitmessage    VARCHAR(500)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_MONTH_ROLLING           
*function   : Calculate Rolling Month
*input      ：p_in_product_group : product group / p_in_cycle_cur_month :
              cycle of current month / p_in_ui_name : name from UI
*output     : p_out_exitcode : error code / p_out_exitmessage : error message 
*author     : Leonard Ling
*CreateDate : 2015-01-04
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS
BEGIN

  -- data
  DECLARE      v_pkg_name        VARCHAR(30) := 'PKG_CYCLE';     
  DECLARE      v_proc_name       VARCHAR(50) := 'PRC_MONTH_ROLLING';
  DECLARE      v_tablename       VARCHAR(30);  
  DECLARE      v_sql             VARCHAR(2000);  
  DECLARE      v_full_name       VARCHAR(60)  := :v_pkg_name ||'.'|| :v_proc_name;
  DECLARE      v_cycle_mon_date_format VARCHAR(20); 
  DECLARE      v_cycle_current   VARCHAR(20);  
  DECLARE      v_current_month   DATE;
  DECLARE      logidi            INTEGER := 0;   
  DECLARE      v_size            INTEGER;
  DECLARE      v_id              INTEGER;
  DECLARE      pvalue_array      VARCHAR(600) ARRAY;
  DECLARE      v_months          INTEGER;       
  
  -- exception
   DECLARE EXIT HANDLER FOR SQLEXCEPTION 
   BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmessage := substr(::SQL_ERROR_MESSAGE, 1, 500 );        
 	   CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_ERROR',I_LOGSID=>:logidi,
				I_EVENT_NAME=>:v_full_name, I_MODULE=>'EBGCFE',
				I_MESSAGE=>'ERROR', I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' || substr(::SQL_ERROR_MESSAGE, 1, 500) );         
   END;    
  
  -- process logic
    P_OUT_EXITCODE := -1;
    P_OUT_EXITMESSAGE := 'Error Message';
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',I_LOGSID=>:logidi,
		                                        I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE'); 
		
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().CYCLE_MON_DATE_FORMAT INTO v_cycle_mon_date_format FROM dummy; --'MONYYYY'
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().CYCLE_CURRENT INTO v_cycle_current FROM dummy;		
    SELECT to_date(m1, :v_cycle_mon_date_format) INTO v_current_month
        FROM ui_cycle 
        WHERE product_group = :p_in_product_group
          AND cycle IN (SELECT last_cycle FROM ui_cycle WHERE cycle = :v_cycle_current);

    v_months := days_between(last_day(:v_current_month), to_date(TO_CHAR(TO_DATE(:p_in_cycle_cur_month,'MM/DD/YYYY' ),'MONYYYY'), :v_cycle_mon_date_format ));

	-- rolling all the cost related tables
    IF :v_months > 0 THEN
	   pvalue_tab = SELECT p.pvalue FROM conf_parameters p
	             WHERE p.pdomain ='CYCLE_ROLLING'
		           AND p.product_group = :p_in_product_group;
	   pvalue_array := ARRAY_AGG(:pvalue_tab.pvalue);
	   v_size := CARDINALITY(:pvalue_array);		
	   FOR v_id IN 1 .. :v_size DO  
        v_sql :=  ' UPDATE ' || :pvalue_array[:v_id]
           || ' set m1 = m2,m2 = m3,m3 = m4,m4 = m5, m5 = m6, m6 = m7, m7 = m8 ,m8 = m9,m9 = m10,m10 = m11,m11 = m12, m12=m13, m13=m14, m14=m15, m15=m16, m16=m17, m17=m18'
           || ' where product_group = '
           || ''''
           || :p_in_product_group
           || ''''; 
		  
	    EXECUTE IMMEDIATE v_sql;	  
	   END FOR;    
    END IF;

    P_OUT_EXITCODE := 0;
    P_OUT_EXITMESSAGE := 'SUCCESS';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logidi,
                                                I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE');      
END;