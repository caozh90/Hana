PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bak::PRC_TABLE_BAK_SPECIAL" (
  IN   p_in_product_group  VARCHAR(20),
  IN   p_in_table_name     VARCHAR(30),
  OUT  p_out_exitcode      INTEGER
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_TABLE_BAK_PROCESS        
*function   : Table Backup Processing
*input      ：  P_IN_PRODUCTGROUP : Product Group / P_IN_TABLE_NAME : Product Group
*output     : P_OUT_EXITCODE : error code 
*author     : Zhoubinbin
*CreateDate : 2015-3-5
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
	AS
BEGIN
    -- DATA
    DECLARE  v_g_pkg_name       VARCHAR(30)  := 'PKG_BAK';
    DECLARE  v_prc_name         VARCHAR(50)  := 'PRC_TABLE_BAK_SPECIAL';
    DECLARE  v_full_name        VARCHAR(100) := :V_G_PKG_NAME || '.' || :V_PRC_NAME;      
        
    DECLARE  logidi             INTEGER := 0;  
    DECLARE  logidj             INTEGER := 0;  
    DECLARE  logidk             INTEGER := 0;  
    DECLARE  logidl             INTEGER := 0;  
    DECLARE  logidm             INTEGER := 0;  
            
    -- EXCEPTION
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN     
	    P_OUT_EXITCODE := ::SQL_ERROR_CODE;
	    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO', 
	                                                I_LOGSID     => :logidj, 
				                                    I_EVENT_NAME => :v_full_name, 
				                                    I_MODULE     => 'EBGCFE',	
				                                    I_MESSAGE    => 'ERROR TABLE NAME: ' || :p_in_table_name);           
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
									                I_EVENT_NAME => :v_full_name, 
									                I_MODULE     => 'EBGCFE',
									                I_MESSAGE    => 'ERROR', 
									                I_DETAIl     => to_char(::SQL_ERROR_CODE) || ':' || 
									                                substr(::SQL_ERROR_MESSAGE, 1, 500 ));
	    RESIGNAL;							   
    END;     
  
    -- PROCESS
    P_OUT_EXITCODE := -1;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE'); 
		                                        		                                        
    
    P_OUT_EXITCODE := 0;
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO', 
	                                            I_LOGSID     => :logidm, 
				                                I_EVENT_NAME => :v_full_name, 
				                                I_MODULE     => 'EBGCFE',	
				                                I_MESSAGE    => 'SUCCESS TABLE NAME:' || :p_in_table_name);     
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END', 
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');   
END;
