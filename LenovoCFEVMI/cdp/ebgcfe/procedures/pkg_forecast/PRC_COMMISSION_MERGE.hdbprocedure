PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_forecast::PRC_COMMISSION_MERGE" ( 
	IN p_in_categroy VARCHAR(200),
	OUT p_out_exitcode  INTEGER,
    OUT p_out_exitmess  VARCHAR(500) 
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE 
	AS
		v_g_pkg_name        VARCHAR(30)  := 'PKG_FORECAST'; 
		v_prc_name          VARCHAR(30)  := 'PRC_COMMISSION_MERGE';
     	v_full_name         VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;
       	logidi              INTEGER := 0;
       	v_cycle_name		VARCHAR(40);
       	v_is_ondemand       INTEGER;
    
BEGIN
/***************************** 

-- Author:      Zhangxj
-- Create date: 2015-11-09
-- Description: commission cost merge into all table
-- Modify [1]:  

 *****************************/
 
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := SUBSTR(::SQL_ERROR_MESSAGE, 1, 500 );  
 	 	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE        => 'PROC_ERROR',
 	 	                                            I_LOGSID      => :logidi,
 	 	                                            I_EVENT_NAME  => :v_full_name,
 	 	                                            I_MODULE      => 'EBGCFE',
		                                            I_MESSAGE     => 'ERROR',
		                                            I_DETAIL      => TO_CHAR(::SQL_ERROR_CODE) || ':' ||
                                                                     SUBSTR(::SQL_ERROR_MESSAGE, 1, 500) );                                   
    END;
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE'); 
		                                        
	SELECT cycle_name INTO v_cycle_name from ui_control_point WHERE control_point='WRITE_BACK';
	--if input categroy is mtm ,merge mtm commission cost all from pre                                           
    IF p_in_categroy = 'MTM' THEN
    	
    	SELECT COUNT(*) INTO v_is_ondemand FROM ui_ondemand_cal_list  WHERE item_type='MTM';
    	
    	IF v_is_ondemand> 0 THEN
    	
    	    DELETE FROM biz_mtm_commissioncost_all  a
    	    WHERE a.cycle = v_cycle_name
    	      AND EXISTS (SELECT 1 FROM biz_mtm_commissioncost_pre p
    	  				    WHERE a.mtm_no        = p.mtm_no
    	  				      AND a.sales_org     = p.sales_org
    	  				      AND a.product_group = p.product_group );
        ELSE 
         
           DELETE FROM biz_mtm_commissioncost_all WHERE cycle=v_cycle_name;
        
        END IF;
    	
		INSERT INTO biz_mtm_commissioncost_all
			(mtm_no, sales_org, cycle, currency_name, price_unit, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,from_date, to_date, 
			action, status, sys_created_date, sys_created_by,sys_last_modified_date, sys_last_modified_by,product_group)  
		SELECT mtm_no, sales_org, cycle, currency_name, price_unit,	m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,from_date, to_date,
			action, status, CURRENT_TIMESTAMP AS sys_created_date, :v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date, :v_full_name AS sys_last_modified_by,product_group
		FROM biz_mtm_commissioncost_pre;
		
	END IF;
	
	--if input categroy is cto ,merge cto commission cost all from pre 
	IF p_in_categroy = 'CTO' THEN
	
    	SELECT COUNT(*) INTO v_is_ondemand FROM ui_ondemand_cal_list  WHERE item_type='CTO';
    	
    	IF v_is_ondemand> 0 THEN
		
		    DELETE FROM biz_cto_commissioncost_all a
		    WHERE a.cycle = v_cycle_name
		      AND EXISTS (SELECT 1 FROM biz_cto_commissioncost_pre b
		  			 	    WHERE a.variant       = b.variant
		  			    	  AND a.sales_org     = b.sales_org
		  				      AND a.producthier_1 = b.producthier_1
		  			    	  AND a.producthier_2 = b.producthier_2
		  				      AND a.producthier_3 = b.producthier_3
		  				      AND a.producthier_4 = b.producthier_4
		  				      AND a.product_group = b.product_group);
		ELSE
		    
		    DELETE FROM biz_cto_commissioncost_all WHERE cycle = v_cycle_name;
		 
		END IF;
		
		  				  
		INSERT INTO biz_cto_commissioncost_all
			(variant,sales_org,producthier_1,producthier_2,producthier_3,producthier_4,cycle,currency_name,
			price_unit,from_date,to_date,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,action,status,  
			sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by,product_group )   	
		SELECT variant,sales_org,producthier_1,producthier_2,producthier_3,producthier_4,cycle,currency_name,
			price_unit,from_date,to_date,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,action,status,  
			CURRENT_TIMESTAMP AS sys_created_date, :v_full_name AS sys_created_by,
			CURRENT_TIMESTAMP AS sys_last_modified_date, :v_full_name AS sys_last_modified_by,product_group	
		FROM biz_cto_commissioncost_pre;
		
	END IF;

	p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';

    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');  
 	
END;
