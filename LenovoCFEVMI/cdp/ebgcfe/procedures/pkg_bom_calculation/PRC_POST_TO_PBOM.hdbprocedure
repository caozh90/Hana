PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_POST_TO_PBOM" ( 
    IN  p_change_id      VARCHAR(100),
    IN  p_product_group  VARCHAR(20),
    OUT p_out_exitcode  NUMBER
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_POST_TO_PBOM             
*function   : Product BOM - Insert mid table data into biz_pbom table
*input      ：p_change_id : change id / p_product_group : product group
*output     : p_out_exitcode : error code
*author     : Eric Zhou
*CreateDate : 2014-11-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS
	    v_change_id         VARCHAR2(100) := p_change_id;
        v_product_group     VARCHAR2(20)  := p_product_group;
        v_prc_name          VARCHAR2(30)  := 'PRC_POST_TO_PBOM';
        v_g_pkg_name        VARCHAR2(30) := 'PKG_BOM_CALCULATION';        
        v_full_name         VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;
        v_nobom_ksbb_pg     VARCHAR2(10);

        v_logidi            INTEGER := 0;
		v_logidj            INTEGER := 0;
		v_logidk            INTEGER := 0;
		v_logidl            INTEGER := 0;
		v_count             INTEGER;		
------------package parameter----------------------------			
		v_time              DECIMAL(17,3);
		v_step_counter      INTEGER       := 0;
    	v_taking_time       DECIMAL(17,3);
		v_runlvl            VARCHAR(20);
		v_exists			INTEGER;
		v_debug             VARCHAR(10);	
BEGIN
    -- Exception 
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    
    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;
    
    p_out_exitcode := -1;
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') into v_step_counter FROM DUMMY;

/****************Translation of Merge into********************/   

    INSERT INTO CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    SELECT v_g_pkg_name, v_prc_name, CURRENT_TIMESTAMP, v_product_group FROM dummy;
        --COMMIT;

    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM DUMMY;
    
    IF v_debug = 'T'
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
    
    --Added by Zhoubinbin 2016086
    --Get bundle-seo/option structure
    tab_bundle_bom = SELECT DISTINCT 
                            t1.product_group, t1.item AS model, t2.idnrk AS father,
                            t1.plant, t1.bom_plant, t1.bom_plant AS sbom_plant, 
                            NULL AS oem, t1.brand, t1.asp_prd_family, 
                            t1.output_type AS item_type
                      FROM biz_toplayer_ch t1, z_pcdw_bom t2
                     WHERE t1.change_id     = :p_change_id
                       AND t1.product_group = t2.product_group
                       AND t1.item          = t2.name
                       AND t1.bom_plant     = t2.werks
                       AND t1.output_type   = 'BUNDLE';
    
    --Missing bundle-seo-ip structure, Need to get ip under seo for bundle 
    INSERT INTO MID_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, oem, brand, asp_prd_family, qtyper, altgrup, altpri, 
         altpercent, costflag, item_type_m, item_type_f, item_type_c, 
         bom_lvl, cost_plant, is_basesbb, action, status, sys_created_date, 
         sys_created_by, sys_last_modified_date, sys_last_modified_by)
    SELECT t1.product_group, t1.model, t1.model, t2.children, t2.item_desc, 
           t1.plant, t1.bom_plant, t2.sbom_plant, t1.oem, t1.brand, t1.asp_prd_family, 
           t2.qtyper, t2.altgrup, t2.altpri, t2.altpercent, t2.costflag, 
           t1.item_type AS item_type_m, t1.item_type AS item_type_f, t2.item_type_c, 
           'MTM' AS bom_lvl, t2.cost_plant, t2.is_basesbb, 'INSERT', NULL, current_timestamp, 
           v_full_name, current_timestamp, v_full_name
      FROM :tab_bundle_bom t1, MID_biz_pbom t2
     WHERE t1.product_group = t2.product_group
       AND t1.father        = t2.model
       AND t1.plant         = t2.plant
       AND t2.bom_lvl       = 'MTM'
       AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t3
                       WHERE t3.product_group = t1.product_group
                         AND t3.model         = t1.model
                         AND t3.children      = t2.children
                         AND t3.plant         = t1.plant);
    
    tab_optionbom = 
    SELECT t1.product_group, t1.model, t1.father, t2.children, t2.item_desc, 
           t1.plant, t1.bom_plant, t2.sbom_plant, t1.oem, t1.brand, t1.asp_prd_family,
           t1.country, t1.qtyper*t2.qtyper AS qtyper, t2.altgrup, t2.altpri, 
           t1.altpercent*t2.altpercent/100 AS altpercent, t2.costflag, t1.item_type_m,
           t1.item_type_f, t2.item_type_c, t1.bom_lvl, t2.cost_plant, t1.is_basesbb,
           t1.subgeo, t2.type, t2.swrc, t2.curr, t1.children AS ori_children
      FROM MID_biz_pbom t1, MID_biz_pbom t2
     WHERE t1.product_group = :v_product_group
       AND t1.product_group = t2.product_group
       AND t1.children      = t2.model
       AND t1.plant         = t2.plant
       AND t1.item_type_c   = 'OPTION'
       AND t1.model        <> t1.children
       AND IFNULL(t1.status, 'ACTIVE') = 'ACTIVE'
       AND IFNULL(t2.status, 'ACTIVE') = 'ACTIVE'
       AND EXISTS(SELECT 1 FROM MID_biz_pbom t3
                   WHERE t3.product_group = t1.product_group
                     AND t3.model         = t1.children
                     AND t3.plant         = t1.plant
                     AND t3.model        <> t3.children
                     AND t3.item_type_m   = 'OPTION'
                     AND IFNULL(t3.status, 'ACTIVE') = 'ACTIVE');    
                     
    UPDATE MID_biz_pbom t1
       SET t1.status = 'INACTIVE'
     WHERE t1.product_group = :v_product_group
       AND EXISTS(SELECT 1 FROM :tab_optionbom t2
                   WHERE t2.product_group = t1.product_group
                     AND t2.model         = t1.model
                     AND t2.father        = t1.father
                     AND t2.ori_children  = t1.children
                     AND t2.plant         = t1.plant);
                    
    UPDATE MID_biz_pbom t1
       SET t1.qtyper  = t1.qtyper + t2.qtyper*t2.altpercent/100
      FROM :tab_optionbom t2
     WHERE t1.product_group = :v_product_group
       AND t1.product_group = t2.product_group
       AND t1.model         = t2.model
       AND t1.father        = t2.father
       AND t1.children      = t2.children
       AND t1.plant         = t2.plant
       AND IFNULL(t1.status, 'ACTIVE') = 'ACTIVE';
       
       
    INSERT INTO MID_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
         altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
         bom_lvl, cost_plant, is_basesbb, subgeo, type, 
         swrc, curr, action, status, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by)
    SELECT product_group, model, father, children, item_desc, plant, bom_plant, 
           sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
           altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
           bom_lvl, cost_plant, is_basesbb, subgeo, type, swrc, curr, 'INSERT', 
           NULL, current_timestamp, v_full_name, current_timestamp, v_full_name
      FROM :tab_optionbom t1
     WHERE NOT EXISTS(SELECT 1 FROM MID_biz_pbom t2
                       WHERE t2.product_group = t1.product_group
                         AND t2.model         = t1.model
                         AND t2.father        = t1.father
                         AND t2.children      = t1.children
                         AND t2.plant         = t1.plant
                         AND IFNULL(t2.status, 'ACTIVE') = 'ACTIVE');
    
     --Inactive 
     UPDATE MID_biz_pbom t
        SET t.status = 'INACTIVE'
      WHERE t.product_group = :v_product_group
        AND t.model        <> t.father
        AND ifnull(t.status, 'ACTIVE') = 'ACTIVE';         
        
    --Delete SBB with no subnode
    UPDATE MID_biz_pbom t1
       SET status = 'INACTIVE'
    WHERE item_type_c = 'SBB'
      AND bom_lvl     = 'MTM'
      AND product_group = :v_product_group
      AND ifnull(t1.status, 'ACTIVE') = 'ACTIVE'
      AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t2
                     WHERE t2.sbom_plant = t1.sbom_plant
                       AND t2.father     = t1.children
                       AND t2.bom_lvl    = 'SBB'
                       AND t2.product_group = t1.product_group
                       AND ifnull(t2.status, 'ACTIVE') = 'ACTIVE');

    --Delete SBB bom is not used
    UPDATE MID_biz_pbom t1
       SET status = 'INACTIVE'
    WHERE bom_lvl = 'SBB'
      AND product_group = :v_product_group
      AND ifnull(t1.status, 'ACTIVE') = 'ACTIVE'
      AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t2
                     WHERE t2.sbom_plant = t1.sbom_plant
                       AND t2.children = t1.model
                       --20140823 lidm1 add option visual
                       AND t2.item_type_c in ('SBB','OPTION','VISUAL')
                       AND t2.bom_lvl = 'MTM'
                       AND t2.product_group = t1.product_group
                       AND ifnull(t1.status, 'ACTIVE') = 'ACTIVE');  

     --BASE SBB FLAG
    UPDATE MID_biz_pbom b
       SET is_basesbb = 1
     WHERE EXISTS(SELECT 1 FROM UI_sbbcategory m
                   WHERE m.bbid          = b.children
                     AND m.cost_category = 'BASE'
                     AND m.product_group = b.product_group)
       AND bom_lvl       = 'MTM'
       AND item_type_m   = 'CTO'
       AND product_group = :v_product_group;
       
    /*--Fix wrong alternate percentage, Set highest alternate priority parts percentage to 100, otherwise 0
    tab_wrong_altper = SELECT product_group, model, father, children, plant, 
                              CASE WHEN ROW_NUMBER() OVER(PARTITION BY product_group, model, plant,
                                                                       altgrup
                                                          ORDER BY altpri DESC) = 1
                                       THEN 100
                                  ELSE 0 END AS altpercent
                         FROM MID_biz_pbom t1
                        WHERE t1.product_group = :p_product_group
                          AND IFNULL(t1.altgrup, '') <> ''
                          AND LEFT(t1.altgrup, 1)    <> '-'
                          AND EXISTS(SELECT 1 FROM (
                                        SELECT product_group, model, plant, altgrup
                                          FROM MID_biz_pbom 
                                         WHERE product_group           = :p_product_group
                                           AND IFNULL(t1.altgrup, '') <> ''
                                           AND LEFT(t1.altgrup, 1)    <> '-'
                                        GROUP BY product_group, model, plant, altgrup
                                        HAVING SUM(altpercent) <> 100) t2
                                     WHERE t2.product_group = t1.product_group
                                       AND t2.model         = t1.model
                                       AND t2.plant         = t1.plant
                                       AND t2.altgrup       = t1.altgrup);
                                       
    --Reset alternate percentage for wrong alternate group
    UPDATE MID_biz_pbom t1
       SET t1.altpercent = t2.altpercent
      FROM :tab_wrong_altper t2
     WHERE t1.product_group = t2.product_group
       AND t1.model         = t2.model
       AND t1.father        = t2.father
       AND t1.children      = t2.children
       AND t1.plant         = t2.plant;
    
    tab1 = SELECT DISTINCT
                  product_group, model, plant, altgrup 
             FROM MID_biz_pbom t1
            WHERE t1.product_group = :v_product_group
              AND IFNULL(t1.altgrup, '') <> ''
              AND LEFT(t1.altgrup, 1)    <> '-'
              AND t1.altpercent          <> 0
              AND EXISTS(SELECT 1 FROM UI_cost_tape t2
                          WHERE t2.product_group = t1.product_group
                            AND t2.plant         = IFNULL(t1.cost_plant, t1.plant)
                            AND t2.part_number   = t1.children
                            AND t2.cost_elem     = 'TOTE');
                            
    --Reset alternate percentage to 0 when some parts in same alternate group has cost
    UPDATE MID_biz_pbom t1
       SET t1.altpercent = 0
     WHERE t1.product_group = :v_product_group
       AND IFNULL(t1.altgrup, '') <> ''
       AND LEFT(t1.altgrup, 1)    <> '-'
       AND EXISTS(SELECT 1 FROM MID_biz_pbom t2
                   WHERE t2.product_group = t1.product_group
                     AND t2.model         = t1.model
                     AND t2.plant         = t1.plant
                     AND t2.altgrup       = t1.altgrup
                     AND EXISTS(SELECT 1 FROM UI_cost_tape t3
                                 WHERE t3.product_group = t2.product_group
                                   AND t3.part_number   = t2.children
                                   AND t3.plant         = IFNULL(t2.cost_plant, t1.plant)
                                   AND t3.cost_elem     = 'TOTE'))
       AND NOT EXISTS(SELECT 1 FROM :tab1 t4
                       WHERE t4.product_group = t1.product_group
                         AND t4.model         = t1.model
                         AND t4.plant         = t1.plant
                         AND t4.altgrup       = t1.altgrup);
    
    --Set alternate percentage to 100 when the part has highest cost in same alternate group
    UPDATE MID_biz_pbom t1
       SET t1.altpercent = 100
      FROM (SELECT t2.product_group, t2.model, t2.father, t2.children, 
                   t2.plant, t2.altgrup,
                   row_number() over(partition by t2.product_group, t2.model, 
                                                  t2.father, t2.plant, t2.altgrup
                                     order by t3.m1 desc) AS pri
              FROM MID_biz_pbom t2, UI_cost_tape t3
             WHERE t2.product_group = :v_product_group
               AND t2.product_group = t3.product_group
               AND t2.children      = t3.part_number
               AND IFNULL(t2.cost_plant, t2.plant) = t3.plant
               AND IFNULL(t2.altgrup, '') <> ''
               AND LEFT(t2.altgrup, 1)    <> '-'
               AND t3.cost_elem     = 'TOTE') t4
     WHERE t1.product_group = :v_product_group
       AND t1.product_group = t4.product_group
       AND t1.model         = t4.model
       AND t1.father        = t4.father
       AND t1.children      = t4.children
       AND t1.plant         = t4.plant
       AND t4.pri           = 1
       AND NOT EXISTS(SELECT 1 FROM :tab1 t5
                       WHERE t5.product_group = t4.product_group
                         AND t5.model         = t4.model
                         AND t5.plant         = t4.plant
                         AND t5.altgrup       = t4.altgrup);  */                      

    UPDATE MID_biz_pbom s
       SET s.item_desc = (SELECT i.item_desc FROM UI_item i
                           WHERE i.item = s.children
                             AND i.product_group = s.product_group)
     WHERE s.product_group = :v_product_group;
     
    SELECT run_level INTO v_runlvl FROM biz_toplayer_ch
     WHERE change_id = :v_change_id
    LIMIT 1;
    
    IF v_runlvl = 'FULL'
    THEN
        DELETE FROM BIZ_pbom 
         WHERE product_group = :v_product_group;
    ELSE
        DELETE FROM BIZ_pbom t1
         WHERE t1.product_group = :v_product_group
           AND EXISTS(SELECT 1 FROM MID_biz_pbom t2
                       WHERE t2.product_group = t1.product_group
                         AND t2.plant = t1.plant
                         AND t2.model = t1.model);
    END IF;                           

    INSERT INTO BIZ_pbom
         (product_group, model, father, children, item_desc, plant, bom_plant,
          sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
          altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
          bom_lvl, cost_plant, TYPE, swrc, curr, action, status, sys_created_date,
          sys_created_by, sys_last_modified_date, sys_last_modified_by, is_basesbb, 
          subgeo)
    SELECT product_group, model, father, children, item_desc, plant, bom_plant,
           sbom_plant, oem, brand, asp_prd_family, country,
           CASE WHEN item_type_m = 'CTO' THEN 1 ELSE qtyper END AS qtyper,
           LTRIM(RTRIM(REPLACE(altgrup, father,''), '-'), '-') AS altgrup, altpri,
           CASE WHEN item_type_m = 'CTO' THEN 100 ELSE altpercent END AS altpercent,
           costflag, item_type_m, item_type_f, item_type_c, bom_lvl, cost_plant, 
           TYPE, swrc, curr, action, status, current_timestamp, :v_full_name, 
           current_timestamp, :v_full_name, is_basesbb, subgeo
      FROM MID_biz_pbom
     WHERE product_group = :v_product_group
       AND ifnull(status, 'ACTIVE') <> 'INACTIVE';
       
    EXEC 'COMMIT';        

    IF v_debug = 'T'
    THEN
        v_step_counter := v_step_counter + 1;
        v_taking_time  := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - v_time;
            
        IF :v_taking_time < 0 THEN v_taking_time := :v_taking_time + 86400.000;  END IF;            
            
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                        I_LOGSID     => :v_logidl,
                                                        I_EVENT_NAME => :v_full_name,
                                                        I_MODULE     => 'EBGCFE',
									                    I_MESSAGE    =>'step '||to_char(:v_step_counter)||': ' ||
									                                   to_char(:v_taking_time) || ' sec'); 
            
            v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;

    UPDATE CAL_RUNTIME x 
       SET end_t = CURRENT_TIMESTAMP
     WHERE x.pkg_name  =v_g_pkg_name 
       AND x.proc_name =v_prc_name 
       AND end_t is null 
       AND prd_group   =v_product_group;
           
    p_out_exitcode := 0;
        
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

    exec 'SET ''v_step_counter_bom_calculation'' = '''||v_step_counter||'''';                 
END;