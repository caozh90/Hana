PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_CBOM_GET_COSTTAPE" ( 
         IN p_change_id     VARCHAR(100),
         IN p_product_group VARCHAR(20),
         IN p_user_id       VARCHAR(64),
         OUT p_out_exitcode  INTEGER,
         OUT p_out_exitmess  VARCHAR(500)         
) 
    LANGUAGE SQLSCRIPT 
    SQL SECURITY DEFINER 
    DEFAULT SCHEMA EBGCFE
    --READS SQL DATA 
/************************************************************************
*name       : PRC_CBOM_GET_COSTTAPE              
*function   : Cost BOM - Get Cost Tape
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Leonard Ling
*CreateDate : 2014-11-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/    
    AS
BEGIN
    -- data 
    DECLARE   v_change_id         VARCHAR(100) := p_change_id;
    DECLARE   v_product_group     VARCHAR(20)  := p_product_group;
    DECLARE   v_user_id           VARCHAR(64)  := p_user_id;
    DECLARE   v_prc_name          VARCHAR(30)  := 'PRC_CBOM_GET_COSTTAPE';
    DECLARE   v_g_pkg_name        VARCHAR(30)  := 'PKG_BOM_CALCULATION';
    DECLARE   v_full_name         VARCHAR(60)  := v_g_pkg_name ||'.'|| v_prc_name;
    
    DECLARE   v_nobom_ksbb_pg     VARCHAR(10);    
    DECLARE   v_time              DECIMAL(17,3);
    DECLARE   v_step_counter      INTEGER;
    DECLARE   v_taking_time       DECIMAL(17,3);
    DECLARE   v_debug             VARCHAR(1);
    DECLARE   logidi              INTEGER := 0;
    DECLARE   logidj              INTEGER := 0;
    DECLARE   logidk              INTEGER := 0;
    DECLARE   v_message           VARCHAR(500);
    DECLARE   v_isnull            INTEGER :=0;
    DECLARE   v_default_cost      INTEGER;
    DECLARE   v_runlvl            VARCHAR(20);
     
    -- exception
    DECLARE exp_procedure CONDITION FOR SQL_ERROR_CODE 10001;   
    DECLARE exp_wrong_pg CONDITION FOR SQL_ERROR_CODE 10002;        
    DECLARE EXIT HANDLER FOR exp_procedure   
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE; 
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR', 
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000));
    END;    
        
    DECLARE EXIT HANDLER FOR exp_wrong_pg   
    BEGIN  
        p_out_exitcode := ::SQL_ERROR_CODE;    
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR', 
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000));        
    END;     
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN    
        p_out_exitcode := ::SQL_ERROR_CODE;           
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR', 
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000));
    END;            
     
    -- process logic
    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';
    
    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') INTO v_step_counter FROM DUMMY; 
       
    --log_data_process.proc_start;
    logidi:=0;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START', 
                                                I_LOGSID     => :logidi, 
                                                I_EVENT_NAME => :v_full_name, 
                                                I_MODULE     => 'EBGCFE'); 
       
          
    INSERT INTO CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    VALUES (:v_g_pkg_name, :v_prc_name, CURRENT_TIMESTAMP, :v_product_group);
                 

    DELETE FROM MID_biz_cbom_sbb1 WHERE product_group = :v_product_group;
    DELETE FROM MID_biz_cbom_sbb2 WHERE product_group = :v_product_group;
    DELETE FROM MID_cbom_sbb_sum  WHERE product_group = :v_product_group;

    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM DUMMY;
    IF v_debug IS NOT NULL --pkg_cons.c_f_debug
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
    
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().DEFAULT_COST INTO v_default_cost
      FROM dummy;
      
    SELECT run_level INTO v_runlvl FROM biz_toplayer_ch
     WHERE change_id = v_change_id
    LIMIT 1;
       
    IF v_runlvl = 'FULL'  
    THEN
        DELETE FROM BIZ_cbom_sbb
         WHERE product_group = :v_product_group;
    ELSE
        DELETE FROM BIZ_cbom_sbb t1
         WHERE t1.product_group = :v_product_group
           AND EXISTS(SELECT 1 FROM MID_costbom_sbb t2
                       WHERE t2.plant = t1.plant
                         AND t2.children = t1.model
                         AND t2.product_group = t1.product_group);
    END IF;  
    
    INSERT INTO MID_biz_cbom_sbb1
        (cycle, product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, oem, brand, asp_prd_family, geo, subgeo, country, qtyper, altgrup, 
         altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, bom_lvl, 
         cost_plant, is_basesbb,swrc, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11,
         m12, m13, m14, m15, m16, m17, m18, weighted_average, lattest_procur)
    SELECT 'CURRENT' as cycle, t1.product_group, t1.model, t1.father, t1.children, 
            t1.item_desc, t1.plant, t1.bom_plant, t1.sbom_plant, t1.oem, t1.brand, 
            t1.asp_prd_family, NULL AS geo, NULL AS subgeo, t1.country, t1.qtyper, 
            t1.altgrup, t1.altpri, t1.altpercent, t1.costflag, t1.item_type_m, 
            t1.item_type_f, t1.item_type_c, t1.bom_lvl, t1.cost_plant, t1.is_basesbb,
            t1.swrc, 
            t2.m1*t1.qtyper*(t1.altpercent/100) AS m1, t2.m2*t1.qtyper*(t1.altpercent/100) AS m2, 
            t2.m3*t1.qtyper*(t1.altpercent/100) AS m3, t2.m4*t1.qtyper*(t1.altpercent/100) AS M4, 
            t2.m5*t1.qtyper*(t1.altpercent/100) AS M5, t2.m6*t1.qtyper*(t1.altpercent/100) AS m6, 
            t2.m7*t1.qtyper*(t1.altpercent/100) AS m7, t2.m8*t1.qtyper*(t1.altpercent/100) AS m8, 
            t2.m9*t1.qtyper*(t1.altpercent/100) AS m9, t2.m10*t1.qtyper*(t1.altpercent/100) AS m10, 
            t2.m11*t1.qtyper*(t1.altpercent/100) AS m11, t2.m12*t1.qtyper*(t1.altpercent/100) AS m12, 
            t2.m13*t1.qtyper*(t1.altpercent/100) AS m13, t2.m14*t1.qtyper*(t1.altpercent/100) AS m14, 
            t2.m15*t1.qtyper*(t1.altpercent/100) AS m15, t2.m16*t1.qtyper*(t1.altpercent/100) AS m16, 
            t2.m17*t1.qtyper*(t1.altpercent/100) AS m17, t2.m18*t1.qtyper*(t1.altpercent/100) AS m18, 
            t2.weighted_average*t1.qtyper*(t1.altpercent/100) AS weighted_average,
            t2.lattest_procur*t1.qtyper*(t1.altpercent/100)   AS lattest_procur
       FROM (SELECT * FROM MID_costbom_comp 
              WHERE product_group = :v_product_group
                AND item_type_c  NOT IN ('SERVICE', 'SWR')) t1
            LEFT JOIN 
            (SELECT * FROM ui_cost_tape
              WHERE cost_elem     = 'TOTE'
                AND product_group = :v_product_group) t2
            ON t1.cost_plant = t2.plant
           AND t1.children   = t2.part_number;

    INSERT INTO MID_biz_cbom_sbb2
        (cycle, product_group, model, father, children, item_desc, plant, 
         bom_plant, sbom_plant, oem, brand, asp_prd_family, geo, subgeo, 
         country, qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
         item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb,swrc, m1, 
         m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17,
         m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, lm13, 
         lm14, lm15, lm16, lm17, lm18, weighted_average, lattest_procur)
    SELECT 'CURRENT' AS cycle, t1.product_group, t1.model, t1.father, t1.children, 
           t1.item_desc, t1.plant, t1.bom_plant, t1.sbom_plant, t1.oem, t1.brand, 
           t1.asp_prd_family, t1.geo, t1.subgeo, t1.country, t1.qtyper, t1.altgrup,
           t1.altpri, t1.altpercent, t1.costflag, t1.item_type_m, t1.item_type_f, 
           t1.item_type_c, t1.bom_lvl, t1.cost_plant, t1.is_basesbb,t1.swrc, t1.m1, 
           t1.m2, t1.m3, t1.m4, t1.m5, t1.m6, t1.m7, t1.m8, t1.m9, t1.m10, t1.m11, 
           t1.m12, t1.m13, t1.m14, t1.m15, t1.m16, t1.m17, t1.m18, 
           t2.m1*t1.qtyper*(t1.altpercent/100) AS lm1,
           t2.m2*t1.qtyper*(t1.altpercent/100) AS lm2,
           t2.m3*t1.qtyper*(t1.altpercent/100) AS lm3,
           t2.m4*t1.qtyper*(t1.altpercent/100) AS lm4,
           t2.m5*t1.qtyper*(t1.altpercent/100) AS lm5,
           t2.m6*t1.qtyper*(t1.altpercent/100) AS lm6,
           t2.m7*t1.qtyper*(t1.altpercent/100) AS lm7,
           t2.m8*t1.qtyper*(t1.altpercent/100) AS lm8,
           t2.m9*t1.qtyper*(t1.altpercent/100) AS lm9,
           t2.m10*t1.qtyper*(t1.altpercent/100) AS lm10,
           t2.m11*t1.qtyper*(t1.altpercent/100) AS lm11,
           t2.m12*t1.qtyper*(t1.altpercent/100) AS lm12,
           t2.m13*t1.qtyper*(t1.altpercent/100) AS lm13,
           t2.m14*t1.qtyper*(t1.altpercent/100) AS lm14,
           t2.m15*t1.qtyper*(t1.altpercent/100) AS lm15,
           t2.m16*t1.qtyper*(t1.altpercent/100) AS lm16,
           t2.m17*t1.qtyper*(t1.altpercent/100) AS lm17,
           t2.m18*t1.qtyper*(t1.altpercent/100) AS lm18,
           t1.weighted_average, t1.lattest_procur
      FROM (SELECT * FROM MID_biz_cbom_sbb1 
             WHERE product_group = :v_product_group) t1
           LEFT JOIN 
           (SELECT * FROM ui_cost_tape
             WHERE cost_elem     = 'TOTL'
               AND product_group = :v_product_group) t2
           ON t1.cost_plant = t2.plant
          AND t1.children   = t2.part_number;   
    
    --Set low cost part's cost to zero according to its basic name    
    
	UPDATE MID_biz_cbom_sbb2 t1
       SET (m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18,
            lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, lm13, lm14, lm15, 
            lm16, lm17, lm18, weighted_average, lattest_procur) =
            (SELECT low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost,
                    low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost,
                    low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost,
                    low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost, low_cost,
                    low_cost, low_cost, low_cost, low_cost, low_cost, low_cost
              FROM (SELECT t2.product_group,item,pvalue,TO_DECIMAL(ptype,15,4) AS low_cost 
                      FROM conf_parameters t3 ,ui_item t2  
                     WHERE  t3.pdomain = 'BOM_CALCULATION'
                       AND  t3.pname   = 'ZERO_BASIC_NAME'
                       AND  t2.zeinr   = t3.pvalue ) a
             WHERE a.item          = t1.children
               AND a.product_group = t1.product_group )
     WHERE t1.product_group = :v_product_group
       AND t1.m1 IS NULL
       AND EXISTS(SELECT 1 FROM (SELECT t2.product_group,item,pvalue,TO_DECIMAL(ptype,15,4) AS low_cost
                                   FROM conf_parameters t3 ,ui_item t2  
                                  WHERE  t3.pdomain = 'BOM_CALCULATION'
                                    AND  t3.pname   = 'ZERO_BASIC_NAME'
                                    AND  t2.zeinr   = t3.pvalue ) b
                   WHERE b.product_group = t1.product_group
                     AND b.item          = t1.children);       

    --Set missing part's cost to 99999
    UPDATE MID_biz_cbom_sbb2
       SET (m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18,
            lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10,
            lm11, lm12, lm13, lm14, lm15, lm16, lm17, lm18,
            weighted_average, lattest_procur)
         = (SELECT map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost), 
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost),
                   map(ifnull(altpercent*qtyper, 0), 0, 0, :v_default_cost)
              FROM dummy)
     WHERE product_group = v_product_group
       AND m1 IS NULL; 

    INSERT INTO BIZ_cbom_sbb
        (cycle, product_group, model, father, children, item_desc, plant, 
         bom_plant, sbom_plant, oem, brand, asp_prd_family, geo, subgeo, 
         country, qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
         item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, m1, m2, m3, 
         m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, 
         lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, lm13, 
         lm14, lm15, lm16, lm17, lm18, weighted_average, lattest_procur,
         action, status, sys_created_date, sys_created_by, sys_last_modified_date,
         sys_last_modified_by)
    SELECT cycle, product_group, model, father, children, item_desc, plant,
           bom_plant, sbom_plant, oem, brand, asp_prd_family, geo, subgeo, 
           country, qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
           item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, m1, m2, m3,
           m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18,
           lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, lm13, 
           lm14, lm15, lm16, lm17, lm18, weighted_average, lattest_procur,
           'INSERT' AS action, '' AS active, current_timestamp, v_full_name, 
           current_timestamp, v_full_name
      FROM MID_biz_cbom_sbb2
     WHERE BOM_LVL       = 'SBB'
       AND product_group = :v_product_group;
      
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM DUMMY;
    IF v_debug IS NOT NULL --pkg_cons.c_f_debug
    THEN
        v_step_counter := :v_step_counter + 1;
                     
        v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;
        IF :v_taking_time < 0 THEN v_taking_time := :v_taking_time + 86400.000;   END IF;       

        SELECT 'step '||to_char(:v_step_counter)||': ' || to_char(:v_taking_time) || ' sec' INTO v_message FROM dummy;
        
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO', 
                                                    I_LOGSID     => :logidj, 
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => :v_message);
                                                          
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));       
    END IF;

    INSERT INTO MID_cbom_sbb_sum
        (product_group, model, plant, subgeo, country, m1, m2, m3, m4, m5, m6, 
         m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, lm1, lm2,
         lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, lm13, lm14, lm15, 
         lm16, lm17, lm18, weighted_average, lattest_procur)
    SELECT product_group, model, plant, subgeo, country, SUM(m1), SUM(m2), 
           SUM(m3), SUM(m4), SUM(m5), SUM(m6), SUM(m7), SUM(m8), SUM(m9), 
           SUM(m10), SUM(m11), SUM(m12), SUM(m13), SUM(m14), SUM(m15), 
           SUM(m16), SUM(m17), SUM(m18), SUM(lm1), SUM(lm2), SUM(lm3), 
           SUM(lm4), SUM(lm5), SUM(lm6), SUM(lm7), SUM(lm8), SUM(lm9), 
           SUM(lm10), SUM(lm11), SUM(lm12), SUM(lm13), SUM(lm14), 
           SUM(lm15), SUM(lm16), SUM(lm17), SUM(lm18),
           SUM(weighted_average), SUM(lattest_procur)
      FROM MID_biz_cbom_sbb2
     WHERE bom_lvl       = 'SBB'
       AND product_group = :v_product_group
    GROUP BY product_group, model, plant, subgeo, country;

    --Add by Zhoubinbin 20130311 for 2013ER1, Set missing sbb's cost to 99999
    
    SELECT COUNT(0) INTO V_ISNULL
      FROM conf_parameters
     WHERE pdomain = 'BOM_CALCULATION'
       AND pname   = 'KEEP_NOBOM_KEYSBB'
       AND product_group = :v_product_group;
       
    IF :V_ISNULL>0 THEN 
        SELECT pvalue INTO v_nobom_ksbb_pg
          FROM conf_parameters
         WHERE pdomain = 'BOM_CALCULATION'
           AND pname = 'KEEP_NOBOM_KEYSBB'
           AND product_group = v_product_group;
    ELSE
        v_nobom_ksbb_pg :='N';
    END IF;

    IF v_nobom_ksbb_pg = 'Y'
    THEN
        INSERT INTO MID_costbom_sbb
           (product_group, model, father, children, item_desc, plant,
            bom_plant, sbom_plant, oem, brand, asp_prd_family, country,
            qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
            item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb,
            subgeo, TYPE, swrc, curr)
        SELECT product_group, model, father, children, item_desc, plant,
               bom_plant, sbom_plant, oem, brand, asp_prd_family, country,
               qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
               item_type_f, item_type_c, bom_lvl, plant, is_basesbb,
               subgeo, TYPE, swrc, curr
          FROM MID_nobom_keysbb
         WHERE product_group = :v_product_group; 
         
        INSERT INTO MID_cbom_sbb_sum
            (product_group, model, plant, m1, m2, m3, m4, m5, m6, m7,
             m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7,
             lm8, lm9, lm10, lm11, lm12, lm13, lm14, lm15, lm16, lm17, lm18, weighted_average, lattest_procur)
        SELECT DISTINCT t1.product_group, t1.children, t1.plant,
                ifnull(t2.m1, :v_default_cost),
                ifnull(t2.m2, :v_default_cost),
                ifnull(t2.m3, :v_default_cost),
                ifnull(t2.m4, :v_default_cost),
                ifnull(t2.m5, :v_default_cost),
                ifnull(t2.m6, :v_default_cost),
                ifnull(t2.m7, :v_default_cost),
                ifnull(t2.m8, :v_default_cost),
                ifnull(t2.m9, :v_default_cost),
                ifnull(t2.m10, :v_default_cost),
                ifnull(t2.m11, :v_default_cost),
                ifnull(t2.m12, :v_default_cost),
                ifnull(t2.m13, :v_default_cost),
                ifnull(t2.m14, :v_default_cost),
                ifnull(t2.m15, :v_default_cost),
                ifnull(t2.m16, :v_default_cost),
                ifnull(t2.m17, :v_default_cost),
                ifnull(t2.m18, :v_default_cost),
                ifnull(t3.m1, :v_default_cost),
                ifnull(t3.m2, :v_default_cost),
                ifnull(t3.m3, :v_default_cost),
                ifnull(t3.m4, :v_default_cost),
                ifnull(t3.m5, :v_default_cost),
                ifnull(t3.m6, :v_default_cost),
                ifnull(t3.m7, :v_default_cost),
                ifnull(t3.m8, :v_default_cost),
                ifnull(t3.m9, :v_default_cost),
                ifnull(t3.m10, :v_default_cost),
                ifnull(t3.m11, :v_default_cost),
                ifnull(t3.m12, :v_default_cost),
                ifnull(t3.m13, :v_default_cost),
                ifnull(t3.m14, :v_default_cost),
                ifnull(t3.m15, :v_default_cost),
                ifnull(t3.m16, :v_default_cost),
                ifnull(t3.m17, :v_default_cost),
                ifnull(t3.m18, :v_default_cost),
                ifnull(t2.weighted_average, :v_default_cost),
                ifnull(t2.lattest_procur, :v_default_cost)
          FROM (SELECT * FROM MID_nobom_keysbb
                 WHERE product_group = :v_product_group) t1
                LEFT JOIN ui_cost_tape t2
            ON t1.product_group = t2.product_group
           AND t1.children      = t2.part_number
           AND t1.plant         = t2.plant
           AND t2.cost_elem     = 'BOME'
               LEFT JOIN ui_cost_tape t3
            ON t1.product_group = t3.product_group
           AND t1.children      = t3.part_number
           AND t1.plant         = t3.plant
           AND t3.cost_elem     = 'BOML';
    END IF;
    
    UPDATE MID_cbom_sbb_sum t1
       SET(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, 
           m15, m16, m17, m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, 
           lm9, lm10, lm11, lm12, lm13, lm14, lm15, lm16, lm17, lm18, 
           weighted_average, lattest_procur)
          =
          (:v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost,
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost, :v_default_cost, :v_default_cost, 
           :v_default_cost, :v_default_cost)
     WHERE t1.product_group = :v_product_group
       AND EXISTS(SELECT 1 FROM MID_biz_cbom_sbb2 t2
                   WHERE t2.product_group = t1.product_group
                     AND t2.model         = t1.model
                     AND t2.plant         = t1.plant
                     AND IFNULL(TO_CHAR(t2.m1), 'NULL') = IFNULL(TO_CHAR(:v_default_cost), 'NULL'));  

    IF v_debug IS NOT NULL --pkg_cons.c_f_debug
    THEN
        v_step_counter := v_step_counter + 1;
        v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;
        IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;          

        SELECT 'step '||to_char(:v_step_counter)||': ' || to_char(:v_taking_time) || ' sec' INTO v_message FROM dummy;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO', 
                                                    I_LOGSID     => :logidk, 
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => :v_message); 
    
    
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));       
    END IF;        

    UPDATE CAL_RUNTIME x 
       SET end_t = CURRENT_TIMESTAMP
     WHERE x.pkg_name  = :v_g_pkg_name 
       AND x.proc_name = :v_prc_name 
       AND end_t IS NULL 
       AND prd_group   =:v_product_group;

    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';

    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 
                                                
                                                
    EXEC 'SET ''v_step_counter_bom_calculation'' = '''|| :v_step_counter ||'''';
END;