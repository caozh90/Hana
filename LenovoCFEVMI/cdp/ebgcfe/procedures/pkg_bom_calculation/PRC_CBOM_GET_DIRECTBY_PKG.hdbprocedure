PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_CBOM_GET_DIRECTBY_PKG" ( 
      IN  p_change_id      VARCHAR(100),
      IN  p_product_group  VARCHAR(20),
      IN  p_user_id        VARCHAR(64),
      OUT p_out_exitcode   INTEGER,
      OUT p_out_exitmess   VARCHAR(500)           
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_CBOM_GET_DIRECTBY_PKG           
*function   : Cost BOM - Get MTM Package
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Fangyuan
*CreateDate : 2014-11-13
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
AS
    v_g_pkg_name            VARCHAR(20)   := 'PKG_BOM_CALCULATION';
    v_runlvl                VARCHAR(20);
    v_time,v_taking_time    DECIMAL(17,3);
    v_step_counter          INTEGER;
    v_g_curr_date           TIMESTAMP     := CURRENT_TIMESTAMP;
    v_change_id             VARCHAR2(100) := p_change_id;
    v_product_group         VARCHAR2(20)  := p_product_group;
    v_user_id               VARCHAR2(64)  := p_user_id;
    v_prc_name              VARCHAR2(30)  := 'PRC_CBOM_GET_DIRECTBY_PKG';
    v_full_name             VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;

    v_init_date             TIMESTAMP;   
    n_count,logidi,logidj,logida,logidb integer;        
    v_debug               char(1);    
    v_out_exitcode decimal;        	
BEGIN
    -- exception
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299;    --no data found
    DECLARE EXIT HANDLER FOR no_data_found             
    BEGIN
        logida:=0;      
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logida,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR', 
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE , 1, 500) || ')');
    END;           
     
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   --others
    BEGIN 
        logidb:=0;
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidb,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE , 1, 500) || ')');                  
    END; 

    --session parameters
    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') INTO v_step_counter FROM DUMMY;

    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';

    logidi:=0;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); --imodule need to be determined 
           
    INSERT INTO CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    SELECT v_g_pkg_name, v_prc_name, current_timestamp, v_product_group 
      FROM dummy;
      
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM dummy;
      
    IF :v_debug='T' THEN
        v_time := to_decimal(to_char(current_timestamp, 'sssss.ff3'));
    END IF;
         
    --Package Cost
    INSERT INTO MID_adder2
        (product_group, model, father, lvl, plant, children, item_desc, subgeo,
         country, model_type, model_brand, model_family, cost_lvl, cost_geo_lvl, 
         cost_geo_value, cost_plant, cost_type, cost_name, qtyper, altgrup,
   	     altpri, altpercent, path, ct, category, m1, m2, m3, m4, m5, m6, m7, m8, 
   	     m9, m10, m11, m12, lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, 
   	     lm11, lm12, weighted_average,lattest_procur)
    SELECT a.product_group, a.item AS model, a.item AS father, NULL AS lvl, 
           a.plant, b.prod_family || '_' || b.package_type AS children,
           b.prod_family || '_' || b.package_type AS item_desc, a.subgeo AS subgeo,
           a.country AS country, a.output_type AS model_type, a.brand AS model_brand,
           a.asp_prd_family AS model_family, 0 AS cost_lvl, 'PLANT' AS cost_geo_lvl, 
           'ALL' AS cost_geo_value, a.plant AS cost_plant, 
           "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_costtype_comp AS cost_type,
           "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_costname_pkg AS cost_name, 
           1 AS qtyper, NULL AS altgrup, NULL AS altpri, 100 AS altpercent, NULL AS path,  
           "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_code_dollar AS ct, 
           CASE WHEN a.output_type <> 'CTO'  THEN 'BASE' ELSE 'MTM' END AS category,
           b.m1, b.m2, b.m3, b.m4, b.m5, b.m6, b.m7, b.m8, b.m9, b.m10, b.m11, b.m12,
           b.m1, b.m2, b.m3, b.m4, b.m5, b.m6, b.m7, b.m8, b.m9, b.m10, b.m11, b.m12, 
           b.m1, b.m1
      FROM MID_biz_toplayer_ch a, ui_direct_by_pkg b
     WHERE a.asp_prd_family = b.prod_family
       AND a.plant          = b.plant
       AND a.product_group  = b.product_group
       AND b.product_group  = :v_product_group
       AND a.output_type IN('MTM', 'CTO') 
       AND b.PACKAGE_TYPE   <>'Misc_Cost_Group'   --Modified by Ran Yang on 2013-7-13, add Group Cost MISC for SR <WO0000000031136>
       AND NOT EXISTS(SELECT 1 FROM MID_pkg_mtm_country d
                       WHERE d.product_group = a.product_group
                         AND d.model         = a.item
                         AND d.plant         = a.plant
                         AND d.country       = a.country
                         AND d.children      = b.package_type);

    IF v_debug='T' THEN
        v_step_counter := v_step_counter + 1;
        v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;
            
        IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;
  
        logidj:=0;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                    I_LOGSID     => :logidj,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'step '||to_char(v_step_counter)||': ' ||
                                                                    to_char(v_taking_time) || ' sec'); 
            
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
         
    UPDATE CAL_RUNTIME x SET end_t=current_timestamp
     WHERE x.pkg_name  = v_g_pkg_name 
       AND x.proc_name = v_prc_name 
       AND end_t is null 
       AND prd_group   = v_product_group;
       
    
    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';

    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logidi,I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE'); --imodule need to be determined

    EXEC 'SET ''v_step_counter_bom_calculation'' ='''|| :v_step_counter||'''' ; 
      
END;