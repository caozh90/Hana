PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_PCDWBOM" ( 
  IN  p_change_id       VARCHAR(100),
  IN  p_product_group   VARCHAR(20),
  OUT p_out_exitcode    INTEGER
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER  
	DEFAULT SCHEMA EBGCFE 
	--READS SQL DATA 
/************************************************************************
*name       : PRC_PBOM_GET_PCDWBOM     
*function   : Product BOM - Get BOM
*input      ：p_change_id : change id / p_product_group : product group
*output     : p_out_exitcode : error code
*author     : Leonard Ling
*CreateDate : 2015-01-05
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
AS	
    v_package_size      INTEGER DEFAULT 1000;
    v_change_id         VARCHAR(100) := :p_change_id;
    v_product_group     VARCHAR(20)  := :p_product_group;
    v_rownum            INTEGER;
    v_prc_name          VARCHAR(30)  := 'PRC_PBOM_GET_PCDWBOM';
    v_g_pkg_name        VARCHAR2(30) := 'PKG_BOM_CALCULATION';
    v_full_name         VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;
	v_debug  	        VARCHAR(20);
	v_logidi            INTEGER := 0;
	v_logidj            INTEGER := 0;
	v_logidk            INTEGER := 0;
	v_logidl            INTEGER := 0;
	v_count             INTEGER;
	v_init_date         TIMESTAMP;
	v_row_count         INTEGER; 
	v_is_null			INTEGER;	
	v_time              DECIMAL(17,3);
	v_step_counter      INTEGER       := 0;
	v_taking_time       DECIMAL(17,3);		
	v_item_type_f		VARCHAR(20);
    v_level             INTEGER := 0;  -- BOM level, starts from 0	
    v_loop_count        INTEGER;
    i                   INTEGER;
    v_offset            INTEGER;
BEGIN
            
    --	Exception 
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')');                                                  
    END;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN    
        p_out_exitcode := ::SQL_ERROR_CODE;                 
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi, 
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;

    --	Process Logic 
    p_out_exitcode := -1;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',
                                                I_LOGSID=>:v_logidi,
                                                I_EVENT_NAME=>:v_full_name,
                                                I_MODULE=>'EBGCFE'); 
                                                
    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') into v_step_counter FROM DUMMY;   
    IF v_step_counter IS NULL THEN v_step_counter := 0; END IF;

    insert into CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    select v_g_pkg_name,v_prc_name,CURRENT_DATE,v_product_group from dummy;

    DELETE FROM MID_eccplant_bom WHERE product_group =:v_product_group; -- Truncate not supported
    DELETE FROM MID_eccplant_bom_bak WHERE product_group =:v_product_group;     -- Truncate not supported

    DELETE FROM MID_eccplant_bom_agg WHERE product_group =:v_product_group;
    DELETE FROM MID_multiple_parts WHERE product_group = :v_product_group;

    select "cdp.ebgcfe.functions::FUNC_PKG_CONS"().C_F_DEBUG into v_debug from dummy;
    IF :v_debug = 'T' THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;

    -- BOM Processing Cycle 1

    -- first level bom
    v_level := 0;
    level_tab = SELECT a.product_group, a.item as model, a.item as father, b.idnrk as children, 
                       NULL as item_desc, a.plant as plant,a.bom_plant, a.bom_plant as sbom_plant,
                       b.cost_plant,b.oem,a.brand,a.asp_prd_family, NULL AS country, :v_level as lvl, 
                       ifnull(b.menge, 1) AS qtyper,b.stlnr, b.alpgr AS altgrup, b.alprf AS altpri,
                       case when b.alpgr is null or length(b.alpgr) = 0 then 100 
                            when b.alpgr is not null and (b.ewahr is null or length(trim(b.ewahr)) = 0)
                                then 100
                       else to_number(trim(b.ewahr)) end as altpercent, 
                       '/'||b.name as path, b.sanka AS costflag, b.item_type_f AS item_type_m, 
                       b.item_type_f AS item_type_f, NULL AS item_type_c, NULL AS mtart_f, 
                       NULL AS mtart_c, NULL AS schgt_c, NULL AS beskz_f, NULL AS beskz_c,
                       NULL AS sobsl_f, NULL AS sobsl_c, NULL AS ekgrp_c, NULL AS mfrgr_c, 
                       NULL AS stawn_c, 'MTM' AS bom_lvl, NULL AS is_leaf, 'ACTIVE' AS status
				  FROM (select distinct product_group, item, plant, bom_plant, brand, asp_prd_family
				         from biz_toplayer_ch 
				        where change_id     = :v_change_id
				          and product_group = :v_product_group) a,
				      z_pcdw_bom b
			    WHERE a.item = b.name 
			      and a.bom_plant     = b.werks
			      and a.product_group = b.product_group  
                  and b.status        = 'ACTIVE';
                  --Comment by Zhoubinbin 20151102, Get OPTION's BOM 
                  --and b.item_type_f not in('SBB','OPTION','VISUAL');   

    v_row_count := 0;		
    SELECT COUNT(*) INTO v_row_count FROM :level_tab a
     WHERE EXISTS(SELECT 1 FROM z_pcdw_bom b
                   WHERE b.werks = a.bom_plant
                     AND b.name  = a.children
                     AND b.product_group = a.product_group);
                     
  level_agg_tab = SELECT * FROM :level_tab;                      
                   
  v_is_null:=v_row_count;
  -- recursive logic to explore all bom levels
  WHILE :v_row_count > 0 
  DO
	  v_level := :v_level + 1;	
	  level_tab = SELECT b.product_group, a.model, a.children as father, b.idnrk as children, 
	                     NULL as item_desc, a.plant as plant, a.bom_plant, a.sbom_plant AS sbom_plant,	
	                     b.cost_plant, b.oem, a.brand, a.asp_prd_family, NULL AS country, 
	                     :v_level as lvl, ifnull(b.menge, 1) AS qtyper, b.stlnr, b.alpgr AS altgrup,
                         b.alprf AS altpri,
                         case when b.alpgr is null or length(b.alpgr) = 0 then 100 
                              when b.alpgr is not null and (b.ewahr is null or length(trim(b.ewahr)) = 0)
                                  then 100
                              else to_number(trim(b.ewahr)) end as altpercent, 
                         a.path||'/'||b.name as path, 
                         b.sanka AS costflag, a.item_type_m, --root's item type
                         b.item_type_f AS item_type_f,
	                     NULL AS item_type_c, NULL AS mtart_f, NULL AS mtart_c,
	                     NULL AS schgt_c, NULL AS beskz_f, NULL AS beskz_c,
	                     NULL AS sobsl_f, NULL AS sobsl_c, NULL AS ekgrp_c,
	                     NULL AS mfrgr_c, NULL AS stawn_c, a.bom_lvl, 
	                     NULL AS is_leaf, 'ACTIVE' AS status
	                FROM :level_tab a,
	                     z_pcdw_bom b
	               WHERE a.children = b.name 
	                 AND a.bom_plant = b.werks
	                 AND a.product_group = b.product_group
	                 AND b.status = 'ACTIVE'
	                 AND b.item_type_f  not in  ('SBB')
	                 AND locate(a.path, b.idnrk) = 0;    
	
	  level_agg_tab = SELECT * FROM :level_agg_tab UNION ALL SELECT * FROM :level_tab ;	
	  
	  SELECT COUNT(*) INTO v_row_count FROM :level_tab a
       WHERE EXISTS(SELECT 1 FROM z_pcdw_bom b
                     WHERE b.werks = a.bom_plant
                       AND b.name  = a.children
                       AND b.product_group = a.product_group);
	 
  END WHILE;
  --last level
  
   INSERT INTO mid_eccplant_bom
       (product_group, model, father, children, item_desc, plant, bom_plant, sbom_plant, 
        cost_plant, oem, brand, asp_prd_family, country, lvl,qtyper,stlnr, altgrup, altpri,
        altpercent,path,costflag,item_type_m,item_type_f, item_type_c, mtart_f, mtart_c,
        schgt_c, beskz_f, beskz_c, sobsl_f, sobsl_c, ekgrp_c, mfrgr_c, stawn_c, bom_lvl, 
        is_leaf, status) 
   SELECT product_group, model, father, children, item_desc, plant, bom_plant, sbom_plant,
          cost_plant, oem, brand, asp_prd_family, country, lvl,qtyper,stlnr, altgrup, altpri,
          altpercent, path, costflag, item_type_m, item_type_f, item_type_c, mtart_f, mtart_c,
          schgt_c, beskz_f, beskz_c, sobsl_f, sobsl_c, ekgrp_c, mfrgr_c, stawn_c, bom_lvl, 
          is_leaf, status
	 FROM :level_agg_tab;
  
    IF v_debug = 'T'
    THEN
        v_step_counter := :v_step_counter + 1;
        v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;  
      
        IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;       
      
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                    I_LOGSID     => :v_logidk,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
						                            I_MESSAGE    => 'step '||to_char(:v_step_counter)||': ' ||
						                                            to_char(:v_taking_time) || ' sec'); 
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
    
    -- BOM Processing Cycle 2 (Start with Children Nodes)
    -- first level bom
    v_level := 0;
    level_tab = SELECT a.product_group, a.children AS model, a.children as father, b.idnrk as children, 
                     NULL as item_desc, a.sbom_plant as plant, a.sbom_plant as bom_plant, a.sbom_plant as sbom_plant, 
                     b.cost_plant,b.oem, NULL as brand, NULL as asp_prd_family, NULL as country, 
                     :v_level as lvl, ifnull(b.menge, 1) AS qtyper, b.stlnr, b.alpgr AS altgrup,
                     b.alprf AS altpri,
                     case when b.alpgr is null or length(b.alpgr) = 0 then 100 
                          when b.alpgr is not null and (b.ewahr is null or length(trim(b.ewahr)) = 0)
                               then 100
                          else to_number(trim(b.ewahr)) end as altpercent, 
                     '/'||b.name as path,
                     b.sanka AS costflag, b.item_type_f AS item_type_m, b.item_type_f AS item_type_f, 
                     NULL AS item_type_c, NULL AS mtart_f, NULL AS mtart_c,
                     NULL AS schgt_c, NULL AS beskz_f, NULL AS beskz_c,
                     NULL AS sobsl_f, NULL AS sobsl_c, NULL AS ekgrp_c,
                     NULL AS mfrgr_c, NULL AS stawn_c,
                     'SBB' AS bom_lvl, null  AS is_leaf,
                     'ACTIVE' AS status                    
                FROM (SELECT * FROM (
                      SELECT DISTINCT product_group, sbom_plant, children
                        FROM mid_eccplant_bom
                       WHERE product_group = :v_product_group
                      UNION
                      SELECT DISTINCT t1.product_group, t2.bom_plant, t1.children
                        FROM ui_manual_bom t1, biz_toplayer_ch t2
                       WHERE t1.product_group = t2.product_group
                         AND t1.father        = t2.item
                         AND t1.plant         = t2.plant
                         AND t1.bom_level     = 'L1'
                         AND t2.change_id     = :v_change_id
                         AND t2.product_group = :v_product_group
                      ) ia
                       WHERE product_group = :v_product_group
                         AND EXISTS(SELECT 1 FROM UI_item ib
                                     WHERE ib.item = ia.children
                                       AND ib.item_type in ('SBB')
                                       AND ib.product_group = ia.product_group)) a,
                      z_pcdw_bom b 
		where a.children   = b.name 
          and a.sbom_plant = b.werks
          and a.product_group = b.product_group
          and b.status = 'ACTIVE';
          
    v_row_count := 0;		
    SELECT COUNT(*) INTO v_row_count FROM :level_tab a
     where exists(select 1 from z_pcdw_bom b
                  where b.name  = a.children
                    and b.werks = a.bom_plant
                    and b.product_group = a.product_group);
                   
    level_agg_tab = SELECT * FROM :level_tab;
	  
	--avoid cycle of children/father, stop at 1000th level
    --v_is_null:=v_row_count;
    -- recursive logic to explore all bom levels
    WHILE :v_row_count > 0 
    DO
	    v_level := :v_level + 1;	
	    level_tab = SELECT b.product_group, model, a.children as father, b.idnrk as children, NULL as item_desc, 
	                       a.plant as plant, a.bom_plant as bom_plant, a.sbom_plant as sbom_plant, 	
	                     b.cost_plant,b.oem, NULL as brand, NULL as asp_prd_family, NULL as country,                   
	                     :v_level as lvl, ifnull(b.menge, 1) AS qtyper, b.stlnr, b.alpgr AS altgrup,
                         b.alprf AS altpri,
                         case when b.alpgr is null or length(b.alpgr) = 0 then 100 
                              when b.alpgr is not null and (b.ewahr is null or length(trim(b.ewahr)) = 0)
                                   then 100
                          else to_number(trim(b.ewahr)) end as altpercent, 
                         a.path||'/'||b.name as path, 
                         b.sanka AS costflag, a.item_type_m, --root's item type
                         b.item_type_f AS item_type_f,
	                     NULL AS item_type_c, NULL AS mtart_f, NULL AS mtart_c,
	                     NULL AS schgt_c, NULL AS beskz_f, NULL AS beskz_c,
	                     NULL AS sobsl_f, NULL AS sobsl_c, NULL AS ekgrp_c,
	                     NULL AS mfrgr_c, NULL AS stawn_c,
	                     'SBB' AS bom_lvl, null AS is_leaf,
	                     'ACTIVE' AS status	                     
	                FROM :level_tab a, z_pcdw_bom b
	               WHERE a.children  = b.name 
	                 AND a.bom_plant = b.werks 
	                 AND a.product_group = b.product_group
	                 AND b.status = 'ACTIVE'
	                 AND locate(a.path, b.idnrk) = 0;     

	    level_agg_tab = SELECT * FROM :level_agg_tab UNION ALL SELECT * FROM :level_tab;	
	
        SELECT COUNT(*) INTO v_row_count FROM :level_tab a
         where exists(select 1 from z_pcdw_bom b
                       where b.name  = a.children
                         and b.werks = a.bom_plant
                         and b.product_group = a.product_group);
	   
    END WHILE;

  --last level
  --IF :v_is_null>0 THEN
	INSERT INTO mid_eccplant_bom 
	    (product_group, model, father, children, item_desc, plant, bom_plant, 
	     sbom_plant, cost_plant, oem, brand, asp_prd_family, country, lvl, 
	     qtyper, stlnr, altgrup, altpri, altpercent, path, costflag, item_type_m, 
	     item_type_f, item_type_c, mtart_f, mtart_c,schgt_c,beskz_f,beskz_c,sobsl_f,
	     sobsl_c,ekgrp_c,mfrgr_c,stawn_c,bom_lvl,is_leaf,status) 
	SELECT product_group, model, father, children, item_desc, plant, bom_plant, 
	       sbom_plant, cost_plant, oem, brand, asp_prd_family, country, lvl, 
	       qtyper, stlnr, altgrup, altpri, altpercent, path, costflag, item_type_m, 
	       item_type_f, item_type_c, mtart_f, mtart_c,schgt_c,beskz_f,beskz_c,sobsl_f,
	       sobsl_c,ekgrp_c,mfrgr_c,stawn_c,bom_lvl,is_leaf,status 
	  FROM :level_agg_tab;
  --END IF;

    INSERT INTO MID_eccplant_bom_agg
       (product_group, model, father, children, item_desc, plant, oem, brand,
        asp_prd_family, country, qtyper, altgrup, altpri, altpercent, path, 
        costflag, item_type_m, item_type_f, item_type_c, bom_plant, sbom_plant,
        bom_lvl, status, cost_plant)
    SELECT product_group, model, father, children, MIN(item_desc), plant, 
           MIN(oem), MIN(brand), MIN(asp_prd_family), MIN(country), 
           SUM(qtyper * altpercent/100), MIN(altgrup), MIN(altpri),
           100 AS altpercent, MIN(path), MIN(costflag), MIN(item_type_m), 
           MIN(item_type_f), MIN(item_type_c), bom_plant, sbom_plant, 
           bom_lvl, MIN(status), cost_plant
      FROM MID_eccplant_bom
     WHERE product_group = :v_product_group
    GROUP BY product_group, plant, model, father, children, bom_plant,
             sbom_plant, bom_lvl, cost_plant
    HAVING COUNT(0) > 1;
  
    DELETE FROM MID_eccplant_bom t1
     WHERE product_group = :v_product_group
       AND EXISTS(SELECT 1 FROM MID_eccplant_bom_agg t2
                   WHERE t2.product_group = t1.product_group
                     AND t2.plant = t1.plant
                     AND t2.model = t1.model
                     AND t2.father = t1.father
                     AND t2.children = t1.children);

    INSERT INTO MID_multiple_parts
        (product_group, father, children, bom_plant, qtyper, altpercent)
    SELECT product_group, NAME, idnrk, werks, 
           SUM(ifnull(menge, 1) * (case when (alpgr is null or length(alpgr) = 0) then 100 else to_number(ewahr) end) / 100) AS qtyper,
           100 AS altpercent
      FROM z_pcdw_bom t1
     WHERE t1.product_group = :v_product_group
       AND EXISTS (SELECT 1 FROM MID_eccplant_bom_agg t2
                    WHERE t2.father = t1.NAME
                      AND t2.children = t1.idnrk
                      AND t2.bom_plant = t1.werks
                      AND t2.product_group = :v_product_group)
    GROUP BY product_group, NAME, idnrk, werks;

  --------update select------------- 
	UPDATE MID_eccplant_bom_agg t1 
	   set t1.qtyper = t2.qtyper 
	  from MID_multiple_parts t2 
	 WHERE t1.father    = t2.father 
       AND t1.children  = t2.children 
       AND t1.bom_plant = t2.bom_plant
       AND t1.product_group = t2.product_group 
       AND t1.product_group = :v_product_group;

  ----------------------------------------
    INSERT INTO MID_eccplant_bom
        (product_group, model, father, children, item_desc, plant, oem, brand,
         asp_prd_family, country, qtyper, altgrup, altpri, altpercent, path, 
         costflag, item_type_m, item_type_f, item_type_c, bom_plant, sbom_plant,
         bom_lvl, status, cost_plant)
    SELECT product_group, model, father, children, item_desc, plant, oem,
           brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
           path, costflag, item_type_m, item_type_f, item_type_c, bom_plant,
           sbom_plant, bom_lvl, status, cost_plant
      FROM MID_eccplant_bom_agg
     WHERE product_group = :v_product_group; 
     
   EXEC 'COMMIT';

   IF :v_debug = 'T'
   THEN
       v_step_counter := :v_step_counter + 1;
       v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;
           
       IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;
       CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                   I_LOGSID     => :v_logidj,
                                                   I_EVENT_NAME => :v_full_name,
                                                   I_MODULE     => 'EBGCFE',
		    						               I_MESSAGE    => 'step '||to_char(:v_step_counter)||': ' ||
									                                to_char(:v_taking_time) || ' sec'); 

       v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
   END IF;
   
   p_out_exitcode := 0;
   CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                               I_LOGSID     => :v_logidi,
				                               I_EVENT_NAME => :v_full_name,
				                               I_MODULE     => 'EBGCFE'); 
				                               
   exec 'SET ''v_step_counter_bom_calculation'' = '''||ifnull(v_step_counter,0)||'''';
        
END;