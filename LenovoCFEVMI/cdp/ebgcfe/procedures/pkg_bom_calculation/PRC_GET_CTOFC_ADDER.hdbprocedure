PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_GET_CTOFC_ADDER"(
	IN p_change_id       VARCHAR(100),
	IN p_product_group   VARCHAR(20),
	IN p_user_id         VARCHAR(64),
	OUT p_out_exitcode   DECIMAL,
    OUT p_out_exitmess   VARCHAR(500)
)     
    LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_GET_CTOFC_ADDER             
*function   : Get Cost Adder 
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id 
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Liuxt
*CreateDate : 2016-8-23
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS	
BEGIN

    DECLARE v_change_id    	     VARCHAR(100) := p_change_id;
    DECLARE v_product_group   	 VARCHAR(20)  := p_product_group;
    DECLARE v_user_id       	 VARCHAR(64)  := p_user_id;
    DECLARE v_prc_name 	         VARCHAR(30)  := 'PRC_GET_CTOFC_ADDER';
    DECLARE v_g_pkg_name 	     VARCHAR(30)  := 'PKG_BOM_CALCULATION';
    DECLARE v_full_name      	 VARCHAR(60)  := v_g_pkg_name ||'.'|| v_prc_name;
    DECLARE n	INT;
    DECLARE v_time               BIGINT;
    DECLARE v_taking_time        BIGINT;
    DECLARE V_DEBUG              CHAR;
    DECLARE v_step_counter       INT;
    DECLARE v_init_date          TIMESTAMP;
    declare logid1 int :=0;
    declare logid2 int :=0;
    declare logid3 int :=0;
    declare logid4 int :=0;  
    
	-- exception
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found   
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );      
   		 CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
   		                                             I_LOGSID     => :logid1,
   		                                             I_EVENT_NAME => :v_full_name,
   		                                             I_MODULE     => 'EBGCFE',
		                                             I_MESSAGE    =>'ERROR',
		                                             I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                     substr(::SQL_ERROR_MESSAGE, 1, 500) ); 
    END;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  	
   		 CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
   		                                             I_LOGSID     => :logid1,
   		                                             I_EVENT_NAME => :v_full_name,
   		                                             I_MODULE     => 'EBGCFE',
		                                             I_MESSAGE    =>'ERROR',
		                                             I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                     substr(::SQL_ERROR_MESSAGE, 1, 500) );                             
    END;

   	select session_context('v_step_counter_bom_calculation') into v_step_counter from dummy;
   
    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';

	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
	                                            I_LOGSID     => :logid1,
	                                            I_EVENT_NAME => :v_full_name,
	                                            I_MODULE     => 'EBGCFE');    
   
    insert into CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
	values(v_g_pkg_name,v_prc_name,CURRENT_DATE,v_product_group);
	

    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().C_F_DEBUG into v_debug from dummy; 
  	IF :v_debug = 'T' 
    THEN
         v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));     
    END IF;
    
    INSERT INTO mid_adder_final
    (product_group,model,father,lvl,plant,children,item_desc,subgeo,country,model_type,model_brand,model_family,
    cost_lvl,cost_geo_lvl,cost_geo_value,cost_plant,cost_type,cost_name,qtyper,altgrup,altpri,altpercent,path,ct,category,
    is_basesbb,tba_type,value_type,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,lm1,lm2,lm3,lm4,lm5,lm6,lm7,lm8,lm9,
    lm10,lm11,lm12,lm13,lm14,lm15,lm16,lm17,lm18,weighted_average,lattest_procur,sys_created_date)
    --CTO:CTO-SBB
    SELECT DISTINCT a.product_group,a.model,a.children AS father,1 AS lvl,a.plant,
           c.adder_name AS children,c.adder_name AS item_desc,d.subgeo,d.country,d.output_type AS model_type,a.brand AS model_brand,
           a.asp_prd_family AS model_family,c.cost_level AS cost_lvl,'SUBGEO' AS cost_geo_lvl,d.subgeo AS cost_geo_value,
           a.plant AS cost_plant,'TBA' AS cost_type,c.adder_name AS cost_name,1 AS qtyper,NULL AS altgrup,NULL AS altpri,100 AS altpercent,
           NULL AS path,NULL AS ct,NULL AS category,a.is_basesbb,c.tba_type,c.tba_type AS value_type,c.m1,c.m2,c.m3,c.m4,c.m5,c.m6,
           c.m7,c.m8,c.m9,c.m10,c.m11,c.m12,c.m13,c.m14,c.m15,c.m16,c.m17,c.m18,c.m1 AS lm1,c.m2 AS lm2,c.m3 AS lm3,c.m4 AS lm4,c.m5 AS lm5,
           c.m6 AS lm6,c.m7 AS lm7,c.m8 AS lm8,c.m9 AS lm9,c.m10 AS lm10,c.m11 AS lm11,c.m12 AS lm12,c.m13 AS lm13,c.m14 AS lm14,
           c.m15 AS lm15,c.m16 AS lm16,c.m17 AS lm17,c.m18 AS lm18,c.m1 AS weighted_average,c.m1 AS lattest_procur,
           CURRENT_TIMESTAMP AS sys_created_date
      FROM biz_cbom_ctosbb a,ui_ctofc_adder c,biz_toplayer_ch d
     WHERE a.model         = c.cto
       AND a.children      = c.fc
       AND a.plant         = c.plant
       AND a.model         = d.item
       AND a.plant         = d.plant
       AND a.brand         = d.brand
       AND c.subgeo        = d.subgeo
       AND d.change_id     = :v_change_id
       AND a.product_group = :v_product_group
       AND NOT EXISTS(SELECT 1 FROM mid_adder_final f 
                              WHERE a.model=f.model AND a.children=f.father AND c.adder_name=f.children 
                              AND a.plant=f.plant AND d.country=f.country);
    
    --CTO:CTO-FC/——>SBB
    INSERT INTO mid_adder_final
    (product_group,model,father,lvl,plant,children,item_desc,subgeo,country,model_type,model_brand,model_family,
    cost_lvl,cost_geo_lvl,cost_geo_value,cost_plant,cost_type,cost_name,qtyper,altgrup,altpri,altpercent,path,ct,category,
    is_basesbb,tba_type,value_type,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,lm1,lm2,lm3,lm4,lm5,lm6,lm7,lm8,lm9,
    lm10,lm11,lm12,lm13,lm14,lm15,lm16,lm17,lm18,weighted_average,lattest_procur,sys_created_date)
    SELECT DISTINCT a.product_group,a.model,a.children AS father,1 AS lvl,a.plant,
           c.adder_name AS children,c.adder_name AS item_desc,d.subgeo,d.country,d.output_type AS model_type,a.brand AS model_brand,
           a.asp_prd_family AS model_family,c.cost_level AS cost_lvl,'SUBGEO' AS cost_geo_lvl,d.subgeo AS cost_geo_value,
           a.plant AS cost_plant,'TBA' AS cost_type,c.adder_name AS cost_name,1 AS qtyper,NULL AS altgrup,NULL AS altpri,100 AS altpercent,
           NULL AS path,NULL AS ct,NULL AS category,a.is_basesbb,c.tba_type,c.tba_type AS value_type,c.m1,c.m2,c.m3,c.m4,c.m5,c.m6,
           c.m7,c.m8,c.m9,c.m10,c.m11,c.m12,c.m13,c.m14,c.m15,c.m16,c.m17,c.m18,c.m1 AS lm1,c.m2 AS lm2,c.m3 AS lm3,c.m4 AS lm4,c.m5 AS lm5,
           c.m6 AS lm6,c.m7 AS lm7,c.m8 AS lm8,c.m9 AS lm9,c.m10 AS lm10,c.m11 AS lm11,c.m12 AS lm12,c.m13 AS lm13,c.m14 AS lm14,
           c.m15 AS lm15,c.m16 AS lm16,c.m17 AS lm17,c.m18 AS lm18,c.m1 AS weighted_average,c.m1 AS lattest_procur,
           CURRENT_TIMESTAMP AS sys_created_date
      FROM biz_cbom_ctosbb a,ui_ctofc_adder c,biz_toplayer_ch d,biz_fcsbbmap b
     WHERE c.cto           = b.matnr
       AND c.fc            = b.fc
       AND b.matnr         = a.model
       AND b.idnrk         = a.children
       AND a.model         = d.item
       AND a.plant         = d.plant
       AND a.brand         = d.brand
       AND c.subgeo        = d.subgeo
       AND d.change_id     = :v_change_id
       AND a.product_group = :v_product_group
       AND b.idnrk<>b.fc
       AND NOT EXISTS(SELECT 1 FROM mid_adder_final f 
                              WHERE a.model=f.model AND a.children=f.father AND c.adder_name=f.children 
                                AND a.plant=f.plant AND d.country=f.country);
       
   
    --SWR:CTO-SBB    
    INSERT INTO mid_adder_final
    (product_group,model,father,lvl,plant,children,item_desc,subgeo,country,model_type,model_brand,model_family,
    cost_lvl,cost_geo_lvl,cost_geo_value,cost_plant,cost_type,cost_name,qtyper,altgrup,altpri,altpercent,path,ct,category,
    is_basesbb,tba_type,value_type,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,lm1,lm2,lm3,lm4,lm5,lm6,lm7,lm8,lm9,
    lm10,lm11,lm12,lm13,lm14,lm15,lm16,lm17,lm18,weighted_average,lattest_procur,sys_created_date)   
    SELECT DISTINCT a.product_group,a.model,a.children AS father,1 AS lvl,a.plant,
           c.adder_name AS children,
           c.adder_name AS item_desc,d.subgeo,d.country,d.output_type AS model_type,a.brand AS model_brand,a.asp_prd_family AS model_family,
           c.cost_level AS cost_lvl,'SUBGEO' AS cost_geo_lvl,d.subgeo AS cost_geo_value,a.plant AS cost_plant,'TBA' AS cost_type,
           c.adder_name AS cost_name,
           1 AS qtyper,NULL AS altgrup,NULL AS altpri,100 AS altpercent,NULL AS path,NULL AS ct,NULL AS category,a.is_basesbb,
           c.tba_type,c.tba_type AS value_type,c.m1,c.m2,c.m3,c.m4,c.m5,c.m6,c.m7,c.m8,c.m9,c.m10,c.m11,c.m12,c.m13,c.m14,c.m15,
           c.m16,c.m17,c.m18,c.m1 AS lm1,c.m2 AS lm2,c.m3 AS lm3,c.m4 AS lm4,c.m5 AS lm5,c.m6 AS lm6,c.m7 AS lm7,
           c.m8 AS lm8,c.m9 AS lm9,c.m10 AS lm10,c.m11 AS lm11,c.m12 AS lm12,c.m13 AS lm13,c.m14 AS lm14,c.m15 AS lm15,
           c.m16 AS lm16,c.m17 AS lm17,c.m18 AS lm18,c.m1 AS weighted_average,c.m1 AS lattest_procur,
           CURRENT_TIMESTAMP AS sys_created_date
      FROM biz_cbom_swrcost a,ui_ctofc_adder c,biz_toplayer_ch d
     WHERE a.model              = c.cto
       AND a.children           = c.fc
       AND a.plant              = c.plant
       AND a.model              = d.item
       AND a.plant              = d.plant
       AND a.country            = d.country
       AND c.subgeo             = d.subgeo
       AND d.change_id          = :v_change_id
       AND a.product_group      = :v_product_group
       AND a.item_type_m        = 'CTO' 
       AND NOT EXISTS(SELECT 1 FROM biz_cbom_ctosbb b WHERE a.model=b.model AND a.children=b.children AND a.plant=b.plant)
       AND NOT EXISTS(SELECT 1 FROM mid_adder_final f 
                              WHERE a.model=f.model AND a.children=f.father AND c.adder_name=f.children 
                                AND a.plant=f.plant AND d.country=f.country); 
                                
   
    --SWR: CTO-FC/——>SBB   Added by Liuxt 20170228                       
      INSERT INTO mid_adder_final
    (product_group,model,father,lvl,plant,children,item_desc,subgeo,country,model_type,model_brand,model_family,
    cost_lvl,cost_geo_lvl,cost_geo_value,cost_plant,cost_type,cost_name,qtyper,altgrup,altpri,altpercent,path,ct,category,
    is_basesbb,tba_type,value_type,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,lm1,lm2,lm3,lm4,lm5,lm6,lm7,lm8,lm9,
    lm10,lm11,lm12,lm13,lm14,lm15,lm16,lm17,lm18,weighted_average,lattest_procur,sys_created_date)
    SELECT DISTINCT a.product_group,a.model,a.children AS father,1 AS lvl,a.plant,
           c.adder_name AS children,c.adder_name AS item_desc,d.subgeo,d.country,d.output_type AS model_type,a.brand AS model_brand,
           a.asp_prd_family AS model_family,c.cost_level AS cost_lvl,'SUBGEO' AS cost_geo_lvl,d.subgeo AS cost_geo_value,
           a.plant AS cost_plant,'TBA' AS cost_type,c.adder_name AS cost_name,1 AS qtyper,NULL AS altgrup,NULL AS altpri,100 AS altpercent,
           NULL AS path,NULL AS ct,NULL AS category,a.is_basesbb,c.tba_type,c.tba_type AS value_type,c.m1,c.m2,c.m3,c.m4,c.m5,c.m6,
           c.m7,c.m8,c.m9,c.m10,c.m11,c.m12,c.m13,c.m14,c.m15,c.m16,c.m17,c.m18,c.m1 AS lm1,c.m2 AS lm2,c.m3 AS lm3,c.m4 AS lm4,c.m5 AS lm5,
           c.m6 AS lm6,c.m7 AS lm7,c.m8 AS lm8,c.m9 AS lm9,c.m10 AS lm10,c.m11 AS lm11,c.m12 AS lm12,c.m13 AS lm13,c.m14 AS lm14,
           c.m15 AS lm15,c.m16 AS lm16,c.m17 AS lm17,c.m18 AS lm18,c.m1 AS weighted_average,c.m1 AS lattest_procur,
           CURRENT_TIMESTAMP AS sys_created_date
      FROM biz_cbom_swrcost a,ui_ctofc_adder c,biz_toplayer_ch d,biz_fcsbbmap b
     WHERE c.cto           = b.matnr
       AND c.fc            = b.fc
       AND b.matnr         = a.model
       AND b.idnrk         = a.children
       AND a.model         = d.item
       AND a.plant         = d.plant
       AND a.brand         = d.brand
       AND c.subgeo        = d.subgeo
       AND d.change_id     = :v_change_id
       AND a.product_group = :v_product_group
       AND b.idnrk<>b.fc
       AND NOT EXISTS(SELECT 1 FROM biz_cbom_ctosbb e WHERE a.model=e.model AND a.children=e.children AND a.plant=e.plant)
       AND NOT EXISTS(SELECT 1 FROM mid_adder_final f 
                              WHERE a.model=f.model AND a.children=f.father AND c.adder_name=f.children 
                                AND a.plant=f.plant AND d.country=f.country);   

IF (:v_debug='T')
        THEN
            v_step_counter := :v_step_counter + 1;
            v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - v_time;
            IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;
            CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'INFO',I_LOGSID=>:logid4,I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE',
            I_MESSAGE=>'step '||to_char(:v_step_counter)||': ' || to_char(:v_taking_time) || ' sec'); 
            --log_data_process.info('step '||to_char(v_step_counter)||': ' || to_char(v_taking_time) || ' sec');
            v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
     END IF;
	 update CAL_RUNTIME x set end_t=CURRENT_TIMESTAMP
	 where x.pkg_name=:v_g_pkg_name and x.proc_name=:v_prc_name and end_t is null and
      prd_group=:v_product_group;
        
     p_out_exitcode := 0;
     p_out_exitmess := 'SUCCESSFUL';
     
     exec 'SET ''v_step_counter_bom_calculation'' = '''||ifnull(:v_step_counter,0)||'''';  
     CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logid1,I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE'); 
     --   log_data_process.proc_end ();  
      
  	
END;
