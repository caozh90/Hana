PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_net_change::PRC_NET_CHANGE_CAL" ( 
  IN P_CHANGE_ID       VARCHAR(100),
  IN P_PRODUCT_GROUP   VARCHAR(20),
  IN P_USER_ID         VARCHAR(64),
  OUT P_EXIT_CODE      INTEGER,
  OUT P_EXIT_MESSAGE   VARCHAR(500)
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
/************************************************************************
*name       : PRC_NET_CHANGE_CAL              
*function   : Process Net Change
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_exit_code : error code / p_exit_message : error message
*author     : Leonard Ling
*CreateDate : 2015-01-14
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
	AS
BEGIN
  -- data
  DECLARE v_pkg_name          VARCHAR(30) := 'PKG_NET_CHANGE';
  DECLARE v_prc_name          VARCHAR(30) := 'PRC_NET_CHANGE_CAL';
  DECLARE v_full_name         VARCHAR(60) := :v_pkg_name ||'.'|| :v_prc_name;
  DECLARE logidi              INTEGER := 0;
  DECLARE v_subprc_exitcode   INTEGER;
  DECLARE v_control_point_status VARCHAR(20);
    
  -- exception
  DECLARE exp_procedure CONDITION FOR SQL_ERROR_CODE 10001;   
  DECLARE EXIT HANDLER FOR exp_procedure   
    BEGIN
      P_EXIT_CODE := ::SQL_ERROR_CODE;
      CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_ERROR',I_LOGSID=>:logidi,
		I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE',
		I_MESSAGE=>'ERROR', I_DETAIL=>:p_exit_message); 			           
    END;    
  DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN      
      P_EXIT_CODE := ::SQL_ERROR_CODE;        
	  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_ERROR',I_LOGSID=>:logidi,
		I_EVENT_NAME=>:v_full_name, I_MODULE=>'EBGCFE',
		I_MESSAGE=>'ERROR', I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' || substr(::SQL_ERROR_MESSAGE, 1, 500) );    
    END;   

  -- process logic
  P_EXIT_CODE := -1;
  P_EXIT_MESSAGE := 'FAILED';
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',I_LOGSID=>:logidi,
		                                      I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE');  
	
  -- MM net change
  CALL "cdp.ebgcfe.procedures.pkg_net_change::PRC_NET_CHANGE_MM"(:P_CHANGE_ID, :P_PRODUCT_GROUP, :P_USER_ID, :v_subprc_exitcode, :P_EXIT_MESSAGE);
  IF :v_subprc_exitcode <> 0 THEN
  	SIGNAL exp_procedure SET MESSAGE_TEXT = :p_exit_message;
  END IF;  
  
  -- MVKE net change
  CALL "cdp.ebgcfe.procedures.pkg_net_change::PRC_NET_CHANGE_MVKE"(:P_CHANGE_ID, :P_PRODUCT_GROUP, :P_USER_ID, :v_subprc_exitcode, :P_EXIT_MESSAGE);
  IF :v_subprc_exitcode <> 0 THEN
  	SIGNAL exp_procedure SET MESSAGE_TEXT = :p_exit_message;
  END IF; 
  
  -- FCSBBMAP
  CALL "cdp.ebgcfe.procedures.pkg_net_change::PRC_NET_CHANGE_FCSBBMAP"(:P_CHANGE_ID, :P_PRODUCT_GROUP, :P_USER_ID, :v_subprc_exitcode, :P_EXIT_MESSAGE);
  IF :v_subprc_exitcode <> 0 THEN
  	SIGNAL exp_procedure SET MESSAGE_TEXT = :p_exit_message;
  END IF;  
  
  -- Sync BOM data
  select control_point_status into v_control_point_status from UI_control_point where control_point='Cutoff BOM Refresh';
  IF v_control_point_status ='ON' THEN
  	CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_BOM_INIT"(:P_PRODUCT_GROUP, :V_SUBPRC_EXITCODE);
  	IF :V_SUBPRC_EXITCODE <> 0  THEN
      SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  	END IF;   
  END IF;

  CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_SWR_INIT"(:P_PRODUCT_GROUP, :V_SUBPRC_EXITCODE);
  IF :V_SUBPRC_EXITCODE <> 0  THEN
    SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  END IF;

 -- Sync ctofc_flag data
  CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_CTOFC_FLAG_INIT" (:P_PRODUCT_GROUP, :V_SUBPRC_EXITCODE);
  IF :V_SUBPRC_EXITCODE <> 0  THEN
    SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  END IF;
  
  --Generate cost flag report
   CALL "cdp.ebgcfe.procedures.pkg_report::PRC_RPT_COST_FLAG"('CURRENT', :v_subprc_exitcode, :P_EXIT_MESSAGE);
  IF :v_subprc_exitcode <> 0 THEN
  	SIGNAL exp_procedure SET MESSAGE_TEXT = :p_exit_message;
  END IF;   
 
 -- Sync seo_cto_vk mapping data
  CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_SEO_CTO_VK_MAPPING_INIT" (:P_PRODUCT_GROUP, :V_SUBPRC_EXITCODE);
  IF :V_SUBPRC_EXITCODE <> 0  THEN
    SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  END IF;
 --Sync sellable country data 
  CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_SELLABLE_COUNTRY_INIT" (:P_PRODUCT_GROUP, :V_SUBPRC_EXITCODE);
  IF :V_SUBPRC_EXITCODE <> 0  THEN
    SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  END IF;
  --ori data   20161130 LIUXT 
  CALL "cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_CONTRACT_COST" (:V_SUBPRC_EXITCODE);
  IF :V_SUBPRC_EXITCODE <> 0  THEN
    SIGNAL exp_procedure SET MESSAGE_TEXT = :P_EXIT_MESSAGE;   
  END IF;
 
  p_exit_code := 0;
  p_exit_message := 'SUCCESSFUL';
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logidi,
	                                          I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE');     		                                            
END;
