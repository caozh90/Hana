PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping" (
IN  PRODUCT_GROUP varchar(40),
IN	PROD_FAMILY varchar(100),
IN	MACHINETYPE varchar(40),
IN	 	table_name varchar(200),
IN	 	business_name varchar(200),
IN		business_code	INTEGER,
IN 	 	position INTEGER,
IN CYCLE varchar(20),
IN BRAND varchar(40)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	default schema EBGCFE
	AS
/************************************************************************
*name      : ui_mt_family_mapping              --函数名
*function  : upload数据至表ui_mt_family_mapping并记录信息              --函数功能
*input     ：    			--输入参数
*output    :                --输出参数
*author     : Eric               --作者
*CreateDate    : 2015-01-19       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/
		path varchar(100):='cdp.ebgcfe.procedures.pkg_ui.upload';
		proc_name varchar(100) :='ui_mt_family_mapping';
		logid0 INTEGER :=0;
		currentUser varchar(100);
		create_time TIMESTAMP;
		validate int;
		var_oper VARCHAR(10);
		privilegeExists  NVARCHAR(300)  ;
		
	    v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping';
        v_exitcode    DECIMAL;
BEGIN
	--exception        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping_err"(
			:PRODUCT_GROUP,:PROD_FAMILY,:MACHINETYPE,:table_name,:business_name,:business_code,:position,::SQL_ERROR_MESSAGE,:CYCLE,:BRAND);
     	
    END; 
    --exception 
	

	--procedure begin
	
	
	select session_user into currentUser from dummy;
	select CURRENT_TIMESTAMP into create_time from dummy;
     	

	select count(1) into validate from ebgcfe.UI_PRODFAMILY where BRAND = :BRAND;
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping_err"(
			:BRAND,:PROD_FAMILY,:MACHINETYPE,:table_name,:business_name,:business_code,:position,'"BRAND"::'||:BRAND||' is illegal',:CYCLE,:BRAND);
		
		
		return;
	end if;
	
	select count(1) into validate from ebgcfe.UI_PRODFAMILY where prod_family=:PROD_FAMILY and brand=:BRAND;
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping_err"(
			:BRAND,:PROD_FAMILY,:MACHINETYPE,:table_name,:business_name,:business_code,:position,'"PROD_FAMILY"::'||:PROD_FAMILY||' is illegal',:CYCLE,:BRAND);
		
		return;
	end if;
	
	SELECT top 1 count(1) into validate FROM "EBGCFE"."UI_MACHINETYPE" A    
     WHERE A.MACHINETYPE = :MACHINETYPE;
				
	if validate = 0
	then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_mt_family_mapping_err"(
			:BRAND,:PROD_FAMILY,:MACHINETYPE,:table_name,:business_name,:business_code,:position,'"MACHINETYPE"::'||:MACHINETYPE||' is illegal',:CYCLE,:BRAND);
		
		return;
/*		    insert into "EBGCFE"."UI_MACHINETYPE"
  	(PRODUCT_GROUP,MACHINETYPE, BRAND, PROD_FAMILY, CYCLE,
				SYS_CREATED_BY,
		 		SYS_CREATED_DATE,
		 		SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE)
  	values('EPG',:MACHINETYPE, :BRAND, :PROD_FAMILY, 'CURRENT',
				 :currentUser,
			 	 :create_time,
			 	 :currentUser,
			 	 :create_time);
  		var_oper := 'create';
 */
  	else
  		update "EBGCFE"."UI_MACHINETYPE" set
    	PROD_FAMILY = :PROD_FAMILY,
    	BRAND = :BRAND,
    	SYS_LAST_MODIFIED_BY = :currentUser,
		SYS_LAST_MODIFIED_DATE =:create_time
    	where
    	MACHINETYPE = :MACHINETYPE; 
        var_oper := 'update';
  	end if;

insert into "EBGCFE"."UI_MACHINETYPE_LOG"
    (
    	PRODUCT_GROUP,
    	MACHINETYPE,
	    BRAND,
	    PROD_FAMILY,    	
    	SYS_LAST_MODIFIED_DATE,   	
    	AT_ACTION,
    	SYS_LAST_MODIFIED_BY,
    	AT_MODIFIED_ON,
    	AT_MILLIS    	
    )
    values
    (
    	'EBG',
    	:MACHINETYPE,
		:BRAND,
		:PROD_FAMILY,		
    	CURRENT_TIMESTAMP,    	
    	var_oper,
    	SESSION_USER,
    	CURRENT_TIMESTAMP,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
    ); 	
	
	
		update "EBGCFE"."UI_ITEM" A set(A.ASP_PRD_FAMILY, A.BRAND)=(:PROD_FAMILY, :BRAND),
	    A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	    A.SYS_LAST_MODIFIED_BY = session_user  
		where A.MACHINE_TYPE=:MACHINETYPE
		  --and A.ITEM_TYPE   <> 'OPTION'
		  AND IFNULL(A.USER_ASP_PRD_FAMILY,'') = '';	
		
		/*--Update option'family by brand and machine type  	
		update "EBGCFE"."UI_ITEM" A set(A.ASP_PRD_FAMILY)=(:PROD_FAMILY),
	    A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	    A.SYS_LAST_MODIFIED_BY = session_user  
		where A.MACHINE_TYPE=:MACHINETYPE
		  and A.BRAND       =:BRAND
		  and A.ITEM_TYPE   = 'OPTION'
		  AND IFNULL(A.USER_ASP_PRD_FAMILY,'') = '';	*/
		  
	/*update "EBGCFE"."UI_ITEM" A 
	   set A.EOL_STATUS = MAP(IFNULL(A.USER_EOL_STATUS, ''), '', B.EOL_STATUS, A.EOL_STATUS),
	    A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	    A.SYS_LAST_MODIFIED_BY = session_user  
	    from "EBGCFE"."UI_PRODFAMILY" B
		where A.ASP_PRD_FAMILY=B.PROD_FAMILY
		  and A.BRAND=B.BRAND;	*/		
		  
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('MT', :MACHINETYPE, :v_event_name, :v_exitcode);    	
	
	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::business_info"(
			:table_name || TO_VARCHAR(:business_code),:business_name,1,0,:table_name);
	
	
	
END;
