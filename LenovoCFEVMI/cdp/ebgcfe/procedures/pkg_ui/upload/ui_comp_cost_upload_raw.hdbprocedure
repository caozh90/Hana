PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_raw" (
IN 	PART_NUMBER varchar(40),
IN 	CYCLE varchar(40),
IN  PRODUCT_GROUP VARCHAR(10),
IN	MFG_PLANT varchar(20),
IN	COST_ELEM varchar(20),
IN  M1 varchar(20),
IN  M2 varchar(20),
IN  M3 varchar(20),
IN  M4 varchar(20),
IN  M5 varchar(20),
IN  M6 varchar(20),
IN  M7 varchar(20),
IN  M8 varchar(20),
IN  M9 varchar(20),
IN  M10 varchar(20),
IN  M11 varchar(20),
IN  M12 varchar(20),
IN  M13 varchar(20),
IN  M14 varchar(20),
IN  M15 varchar(20),
IN  M16 varchar(20),
IN  M17 varchar(20),
IN  M18 varchar(20),
IN	 	table_name varchar(200),
IN	 	business_name varchar(200),
IN		business_code	INTEGER,
IN 	 	position INTEGER,
IN	COMMODITY varchar(40),
IN	CURRENCY_NAME varchar(20),
IN  OWNER_COSTTAPE nvarchar(70)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	default schema EBGCFE
	AS
	li_count INTEGER;
/************************************************************************
*name      : ui_comp_cost_upload_raw              --函数名
*function  : 先将数据全部插入中间表中，然后对中间表进行验证             --函数功能
*input     ：    			--输入参数
*output    :                --输出参数
*author     : Gavin               --作者
*CreateDate    : 2015-03-04       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/
			desc NVARCHAR(200);
			n int;
			
           v_full_name       VARCHAR(100) := 'cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_raw';
           logidi            INTEGER := 0;  			
BEGIN
	--exception        
	DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;
	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
									                I_EVENT_NAME => :v_full_name, 
									                I_MODULE     => 'EBGCFE',
									                I_MESSAGE    => 'ERROR', 
									                I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || 
									                                ::SQL_ERROR_MESSAGE);      
    
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,
			:table_name,:business_name,:business_code,:position,::SQL_ERROR_MESSAGE,:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
     	
    END; 
    --exception 
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');       
	
	desc := null;
	select count(1) into n from UI_item where item = :PART_NUMBER;
	if n>0 then
		 select TOP 1 item_desc into desc from UI_item where item = :PART_NUMBER;
	end if;
    
    select count(1) into li_count 
    from "EBGCFE"."UI_COST_TAPE_ORI_BUFFER"
    where CYCLE = :CYCLE
	and PRODUCT_GROUP = :PRODUCT_GROUP
	and PART_NUMBER = :PART_NUMBER
	and MFG_PLANT = :MFG_PLANT
	and COST_ELEM = :COST_ELEM;
	
	IF li_count > 0 then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists';
	else
	
    insert into "EBGCFE"."UI_COST_TAPE_ORI_BUFFER"(PART_NUMBER,CYCLE,PRODUCT_GROUP,MFG_PLANT,COST_ELEM,COMMODITY,CURRENCY_NAME,
									DESCRIPTION,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15
									,M16,M17,M18,STATUS,OWNER_COSTTAPE,
				IS_VALIDATE,POSITION,business_code
									) 
	values (:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,:COMMODITY,:CURRENCY_NAME,:desc,
				:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,'INACTIVE',:OWNER_COSTTAPE,
			 	 'INVALIDATE',:position,:business_code);
	end if;		 	 
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                              I_LOGSID     => :logidi,
                                              I_EVENT_NAME => :v_full_name,
                                              I_MODULE     => 'EBGCFE');			 	 


END;