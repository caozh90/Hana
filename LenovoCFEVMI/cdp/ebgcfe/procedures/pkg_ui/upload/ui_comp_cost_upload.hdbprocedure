PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload" (
IN 	PART_NUMBER varchar(40),
IN 	CYCLE varchar(40),
IN  PRODUCT_GROUP VARCHAR(10),
IN	MFG_PLANT varchar(20),
IN	COST_ELEM varchar(20),
IN  M1 varchar(20),
IN  M2 varchar(20),
IN  M3 varchar(20),
IN  M4 varchar(20),
IN  M5 varchar(20),
IN  M6 varchar(20),
IN  M7 varchar(20),
IN  M8 varchar(20),
IN  M9 varchar(20),
IN  M10 varchar(20),
IN  M11 varchar(20),
IN  M12 varchar(20),
IN  M13 varchar(20),
IN  M14 varchar(20),
IN  M15 varchar(20),
IN  M16 varchar(20),
IN  M17 varchar(20),
IN  M18 varchar(20),
IN	 	table_name varchar(200),
IN	 	business_name varchar(200),
IN		business_code	INTEGER,
IN 	 	position INTEGER,
IN	COMMODITY varchar(40),
IN	CURRENCY_NAME varchar(20),
IN  OWNER_COSTTAPE nvarchar(70)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	default schema EBGCFE
	AS
/************************************************************************
*name      : ui_comp_cost_upload              --函数名
*function  : upload数据至表UI_COST_TAPE_ORI并记录信息              --函数功能
*input     ：    			--输入参数
*output    :                --输出参数
*author     : Eric               --作者
*CreateDate    : 2015-01-20       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/
		path varchar(100):='cdp.ebgcfe.procedures.pkg_ui.upload';
		proc_name varchar(100) :='ui_comp_cost_upload';
		logid0 INTEGER :=0;
		validate int;
		var_oper VARCHAR(10);
		privilegeExists  NVARCHAR(300)  ;
		desc NVARCHAR(200);
BEGIN
	--exception        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,
			:table_name,:business_name,:business_code,:position,::SQL_ERROR_MESSAGE,:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
     	
    END; 
    --exception 
	

	--procedure begin
  	
	select  count(1) into validate from UI_item where item = :PART_NUMBER;
	if :validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:table_name,:business_name,:business_code,:position,'"PART_NUMBER"::'||:PART_NUMBER||' is illegal',:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
		return;
	end if;
	
	select  count(1) into validate from UI_PLANT where plant = :MFG_PLANT;
	if :validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:table_name,:business_name,:business_code,:position,'"MFG_PLANT"::'||:MFG_PLANT||' is illegal',:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
		
		return;
	end if;
	
	select  count(1) into validate from UI_COST_ELEM where ElEMENT_Name = :COST_ELEM;
	if :validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:table_name,:business_name,:business_code,:position,'"COST_ELEM"::'||:COST_ELEM||' is illegal',:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
		
		return;
	end if;
	
	select  count(1) into validate from conf_parameters where pdomain='UI_COST_TAPE_ORI' and pname='COMMODITY' and pvalue=:COMMODITY;
	if :validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:table_name,:business_name,:business_code,:position,'"COMMODITY"::'||:COMMODITY||' is illegal',:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
		
		return;
	end if;
	
	select  count(1) into validate from UI_exchange_rate where  CURRENCY_NAME = :CURRENCY_NAME;
	if :validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_comp_cost_upload_err"(
			:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
			:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:table_name,:business_name,:business_code,:position,'"CURRENCY_NAME"::'||:CURRENCY_NAME||' is illegal',:COMMODITY,:CURRENCY_NAME,:OWNER_COSTTAPE);
		
		return;
	end if;
	
	 
	SELECT count(1) into validate FROM "EBGCFE"."UI_COST_TAPE_ORI"    
     WHERE PRODUCT_GROUP = :PRODUCT_GROUP
          AND PART_NUMBER = :PART_NUMBER 
          AND MFG_PLANT = :MFG_PLANT
          AND COST_ELEM = :COST_ELEM
          AND CYCLE = :CYCLE;
 
 
 	if validate != 0
	then
         delete from "EBGCFE"."UI_COST_TAPE_ORI" where PART_NUMBER = :PART_NUMBER;
    end if;
    select TOP 1 item_desc into desc from UI_item where item = :PART_NUMBER;
    insert into "EBGCFE"."UI_COST_TAPE_ORI"(PART_NUMBER,CYCLE,PRODUCT_GROUP,MFG_PLANT,COST_ELEM,COMMODITY,CURRENCY_NAME,
									DESCRIPTION,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15
									,M16,M17,M18,STATUS,OWNER_COSTTAPE,
									
				SYS_CREATED_BY,
		 		SYS_CREATED_DATE,
		 		SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE,
				IS_VALIDATE
									) 
	values (:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,:COMMODITY,:CURRENCY_NAME,:desc,
				:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,'INACTIVE',:OWNER_COSTTAPE,
 	 			 session_user,
			 	 current_timestamp,
			 	 session_user,
			 	 current_timestamp,
			 	 'INVALIDATE');
  		var_oper := 'create';
				
/*	if validate = 0
	then
		    insert into "EBGCFE"."UI_COST_TAPE_ORI"(PART_NUMBER,CYCLE,PRODUCT_GROUP,MFG_PLANT,COST_ELEM,
									M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15
									,M16,M17,M18,
									SYS_CREATED_BY,
									SYS_CREATED_DATE,IS_VALIDATE
									) 
	values (:PART_NUMBER,:CYCLE,:PRODUCT_GROUP,:MFG_PLANT,:COST_ELEM,
				:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,SESSION_USER,CURRENT_TIMESTAMP,'INVALIDATE');
  		var_oper := 'create';
  	else
  		update "EBGCFE"."UI_COST_TAPE_ORI"  set
  		IS_VALIDATE = 'INVALIDATE',
    	M1 = :M1,
    	M2 = :M2,
    	M3 = :M3,
    	M4 = :M4,
    	M5 = :M5,
    	M6 = :M6,
    	M7 = :M7,
    	M8 = :M8,
    	M9 = :M9,
    	M10 = :M10,
    	M11 = :M11,
    	M12 = :M12,
    	M13 = :M13,
    	M14 = :M14,
    	M15 = :M15,
    	M16 = :M16,
    	M17 = :M17,
    	M18 = :M18
    where PART_NUMBER = :PART_NUMBER
          AND MFG_PLANT = :MFG_PLANT
          AND COST_ELEM = :COST_ELEM
    	  AND PRODUCT_GROUP = :PRODUCT_GROUP
    	  AND CYCLE = :CYCLE;
        var_oper := 'update';      
  	end if;
   	*/

insert into  "EBGCFE"."UI_COST_TAPE_ORI_LOG"(
            "CYCLE",
            "PRODUCT_GROUP",
            "PART_NUMBER",
            "MFG_PLANT",
            "COST_ELEM",
            COMMODITY,
            CURRENCY_NAME,
			DESCRIPTION,
            "M1",
            "M2",
            "M3",
            "M4",
            "M5",
            "M6",
            "M7",
            "M8",
            "M9",
            "M10",
            "M11",
            "M12",
            "M13",
            "M14",
            "M15",
            "M16",
            "M17",
            "M18",
            "OWNER_COSTTAPE",           
				SYS_CREATED_BY,
		 		SYS_CREATED_DATE,
		 		SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE,
            "AT_MODIFIED_BY",
            "AT_ACTION",
            "AT_MODIFIED_ON",
            "AT_MILLIS"             
    )   
	values (:CYCLE,:PRODUCT_GROUP,:PART_NUMBER,
				:MFG_PLANT,:COST_ELEM,:COMMODITY,:CURRENCY_NAME,:desc,:M1,:M2,:M3,:M4,:M5,:M6,:M7,:M8,:M9,:M10,:M11,:M12,:M13,:M14,:M15
			,:M16,:M17,:M18,:OWNER_COSTTAPE,
 	 			 session_user,
			 	 current_timestamp,
			 	 session_user,
			 	 current_timestamp,
			 	 SESSION_USER,:var_oper,current_timestamp,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')));
			
	
	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::business_info"(
			:table_name || TO_VARCHAR(:business_code),:business_name,1,0,:table_name);
	
	
	
END;
