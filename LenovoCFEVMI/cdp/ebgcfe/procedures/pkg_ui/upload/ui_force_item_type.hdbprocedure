PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type" (
IN  ITEM varchar(400),
IN	USER_ITEM_TYPE varchar(400),
IN	USER_ITEM_DESC varchar(400),
IN	USER_EOL_STATUS varchar(400),
IN	USER_ASP_PRD_FAMILY varchar(400),

IN	 	table_name varchar(200),
IN	 	business_name varchar(200),
IN		business_code	INTEGER,
IN 	 	position INTEGER,
IN CYCLE varchar(20)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	default schema EBGCFE
	AS
/************************************************************************
*name      : ui_force_item_type              --函数名
*function  : upload数据至表UI_FORCEITEMTYPE并记录信息              --函数功能
*input     ：    			--输入参数
*output    :                --输出参数
*author     : Eric               --作者
*CreateDate    : 2015-01-19       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/
		path varchar(100):='cdp.ebgcfe.procedures.pkg_ui.upload';
		proc_name varchar(100) :='ui_force_item_type';
		logid0 INTEGER :=0;
		currentUser varchar(100);
		create_time TIMESTAMP;
		validate int;
		var_oper VARCHAR(10);
		privilegeExists  NVARCHAR(300)  ;
		
	    v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type';
        v_exitcode    DECIMAL;
BEGIN
	--exception        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type_err"(
			:ITEM,:USER_ITEM_TYPE,:USER_ITEM_DESC,:USER_EOL_STATUS,:USER_ASP_PRD_FAMILY,:table_name,:business_name,:business_code,:position,::SQL_ERROR_MESSAGE,:CYCLE);
     	
    END; 
    --exception 

	--procedure begin
	select session_user into currentUser from dummy;
	select CURRENT_TIMESTAMP into create_time from dummy;
  
	select count(1) into validate from ebgcfe.UI_ITEM where ITEM=:ITEM;
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type_err"(
			:ITEM,:USER_ITEM_TYPE,:USER_ITEM_DESC,:USER_EOL_STATUS,:USER_ASP_PRD_FAMILY,:table_name,:business_name,:business_code,:position,'"ITEM"::'||:ITEM||' is illegal',:CYCLE);
		
		return;
	end if;
     	
	select count(1) into validate from ebgcfe.conf_itemtype 
	 where (item_type =:USER_ITEM_TYPE or ifnull(:USER_ITEM_TYPE, '') = '')
	limit 1;
	
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type_err"(
			:ITEM,:USER_ITEM_TYPE,:USER_ITEM_DESC,:USER_EOL_STATUS,:USER_ASP_PRD_FAMILY,:table_name,:business_name,:business_code,:position,'"USER_ITEM_TYPE"::'||:USER_ITEM_TYPE||' is illegal',:CYCLE);
		
		return;
	end if;
	
	select count(1) into validate from  conf_parameters 
     where pdomain='UI_ITEM' and pname='EOL_STATUS' 
       and (pvalue = :USER_EOL_STATUS or ifnull(:USER_EOL_STATUS, '') = '')
    limit 1;
    
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type_err"(
			:ITEM,:USER_ITEM_TYPE,:USER_ITEM_DESC,:USER_EOL_STATUS,:USER_ASP_PRD_FAMILY,:table_name,:business_name,:business_code,:position,'"USER_EOL_STATUS"::'||:USER_EOL_STATUS||' is illegal',:CYCLE);
		
		return;
	end if;
	
	select count(1) into validate from ebgcfe.UI_PRODFAMILY 
	 where (PROD_FAMILY=:USER_ASP_PRD_FAMILY or ifnull(:USER_ASP_PRD_FAMILY, '') = '')
	limit 1;
	if validate = 0  then
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_force_item_type_err"(
			:ITEM,:USER_ITEM_TYPE,:USER_ITEM_DESC,:USER_EOL_STATUS,:USER_ASP_PRD_FAMILY,:table_name,:business_name,:business_code,:position,'"USER_ASP_PRD_FAMILY"::'||:USER_ASP_PRD_FAMILY||' is illegal',:CYCLE);
		
		return;
	end if;
	
    UPDATE ui_item t1
       SET (t1.asp_prd_family, t1.brand ) = (t2.prod_family, t2.brand )
      FROM ui_machinetype t2
     WHERE IFNULL(t1.user_asp_prd_family, '') <> ''
       AND IFNULL(:USER_ASP_PRD_FAMILY,'')    = ''
       AND t1.item                            = :item
       AND t1.machine_type                    = t2.machinetype;
       
    update "EBGCFE"."UI_ITEM" 
       set ITEM_DESC              = MAP(IFNULL(:USER_ITEM_DESC, ''), '', ITEM_DESC, :USER_ITEM_DESC),
    	   USER_ITEM_DESC         = :USER_ITEM_DESC, 
    	   ITEM_TYPE              = MAP(IFNULL(:USER_ITEM_TYPE, ''), '', ITEM_TYPE, :USER_ITEM_TYPE),
    	   USER_ITEM_TYPE         = :USER_ITEM_TYPE,
    	   --EOL_STATUS             = MAP(IFNULL(:USER_EOL_STATUS, ''), '', EOL_STATUS, :USER_EOL_STATUS),
    	   USER_EOL_STATUS        = :USER_EOL_STATUS,
    	   ASP_PRD_FAMILY         = MAP(IFNULL(:USER_ASP_PRD_FAMILY, ''), '', ASP_PRD_FAMILY, :USER_ASP_PRD_FAMILY),
    	   USER_ASP_PRD_FAMILY    = :USER_ASP_PRD_FAMILY,
    	   SYS_LAST_MODIFIED_BY   = :currentuser,
		   SYS_LAST_MODIFIED_DATE = :create_time
     where ITEM = :ITEM and product_group = 'EBG';
     
    UPDATE UI_ITEM T1
       SET T1.BRAND = T2.BRAND
      FROM ui_prodfamily T2
     WHERE T1.ITEM                             = :ITEM
       AND IFNULL(T1.USER_ASP_PRD_FAMILY, '') <> ''
       AND T1.USER_ASP_PRD_FAMILY = T2.PROD_FAMILY;
        
    var_oper := 'update';
    
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('ITEM', :ITEM, :v_event_name, :v_exitcode); 
 
    /*insert into "EBGCFE"."UI_ITEM_LOG"
        (ITEM, PRODUCT_GROUP, USER_ITEM_TYPE, USER_ITEM_DESC,   
	    USER_EOL_STATUS,
	    USER_ASP_PRD_FAMILY,
    	SYS_LAST_MODIFIED_DATE,   	
    	ACTION,
    	SYS_LAST_MODIFIED_BY,
    	AT_MODIFIED_ON,
    	AT_MILLIS    	
    )
    values
    (
	 	:ITEM,
	 	'EBG',
	    :USER_ITEM_TYPE,	
	    :USER_ITEM_DESC,   
	    :USER_EOL_STATUS,
	    :USER_ASP_PRD_FAMILY,
    	CURRENT_TIMESTAMP,    	
    	:var_oper,
    	session_user,
    	CURRENT_TIMESTAMP,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
    );  */	   	
	
			
	
	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::business_info"(
			:table_name || TO_VARCHAR(:business_code),:business_name,1,0,:table_name);
	
	
	

END;
