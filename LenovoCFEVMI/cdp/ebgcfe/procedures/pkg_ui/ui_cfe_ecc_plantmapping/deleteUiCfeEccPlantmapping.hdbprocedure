PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cfe_ecc_plantmapping::deleteUiCfeEccPlantmapping" ( 
 IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_CFEECC_PLANTMAPPING_T"
        ,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY DEFINER 
    DEFAULT SCHEMA "EBGCFE"
    AS 
    /************************************************************************
    *name      :                     createuicfeeccplantmapping
    *function    :               
    *input     ï¼š               
    *output     :                
	*author     :                     fan fangxing
	*CreateDate    :                  2015.8.28
    *UpdateDate  :        
    *************************************************************************/  
		v_full_name NVARCHAR(100):= 'cdp.ebgcfe.procedures.pkg_ui.ui_cfe_ecc_plantmapping::deleteUiCfeEccPlantmapping';
		v_ui_name NVARCHAR(100):= 'ui_cfe_ecc_plantmapping';
		v_product_group NVARCHAR(100):= 'EBG';
		
        aI_DETAIL NVARCHAR(300) :='';   
        alogide INTEGER :=0; 
        v_resourceExists BIGINT; 
        privilegeExists  NVARCHAR(300)  ;  
BEGIN
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
        aI_DETAIL := :v_full_name ||' error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
        
        CALL "EX_LOG"."cdp.log.procedures::logProc"(
             I_TYPE=>'PROC_ERROR'   
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>:v_full_name
            ,I_MODULE=>'EBGCFE'
            ,I_MESSAGE=>'E'||::SQL_ERROR_CODE
            ,I_DETAIL=>:aI_DETAIL
        );  
 
        errorInfo = select 400 as http_status_code, 
            'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
            aI_DETAIL detail from dummy;
    END;  
 
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    :v_ui_name||'::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
      errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
   

    CALL "EX_LOG"."cdp.log.procedures::logProc"(
        I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>:v_full_name
       ,I_MODULE=>'EBGCFE'
    ); 


  insert into UI_CFE_ECC_PLANTMAPPING_LOG(CYCLE,PRODUCT_GROUP,CFE_PLANT,ECC_PLANT,ITEM_TYPE,SUBGEO,CURRENCY,STATUS,CHANGE_ID,CHANGE_ACTION,SYS_CREATED_DATE,SYS_CREATED_BY,SYS_LAST_MODIFIED_DATE,SYS_LAST_MODIFIED_BY,AT_MODIFIED_BY,AT_ACTION,AT_MODIFIED_ON,AT_MILLIS)
  select CYCLE,:v_product_group,CFE_PLANT,ECC_PLANT,ITEM_TYPE,SUBGEO,CURRENCY,STATUS,CHANGE_ID,CHANGE_ACTION,SYS_CREATED_DATE,SYS_CREATED_BY,SYS_LAST_MODIFIED_DATE,SYS_LAST_MODIFIED_BY,
     SESSION_USER,
     'delete',
     CURRENT_TIMESTAMP,
     TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')
     )    
    FROM  UI_CFE_ECC_PLANTMAPPING a
    WHERE EXISTS
    (SELECT 1 FROM :newInfo b
    where A.PRODUCT_GROUP='EBG' 
    AND A.CFE_PLANT=B.CFE_PLANT 
    AND A.ECC_PLANT=B.ECC_PLANT
    AND A.ITEM_TYPE=B.ITEM_TYPE
    AND A.SUBGEO=B.SUBGEO
    AND A.CURRENCY=B.CURRENCY
    );  


    delete from UI_CFE_ECC_PLANTMAPPING a
     WHERE EXISTS
    (SELECT 1 FROM :newInfo b
    where 
     A.PRODUCT_GROUP='EBG' 
     AND  A.CFE_PLANT=B.CFE_PLANT 
    AND A.ECC_PLANT=B.ECC_PLANT
    AND A.ITEM_TYPE=B.ITEM_TYPE
    AND A.SUBGEO=B.SUBGEO
    AND A.CURRENCY=B.CURRENCY
    );  

	if ::rowcount <=0
	then
	    errorInfo = select 400 as http_status_code, 
	                'the record do not exists' error_message, 
	                'the record do not exists' DETAIL from dummy;               
	            return;
	end if;     

    aI_DETAIL := :v_full_name || ' successfully deleted . ';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(
            I_TYPE=>'PROC_END'  
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>:v_full_name
            ,I_MODULE=>'EBGCFE'
            ,I_DETAIL=>:aI_DETAIL
        );  
END;
