PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh" (
	IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_FRT_PH_T" ,
    OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA
/************************************************************************
*name        :      deleteUiFrtPh
*function    :               
*input       ï¼š                    oldInfo
*output      :      errorInfo            
*author      :      bianzh1
*CreateDate  :      2017.2.8
*UpdateDate  :        
*************************************************************************/ 	 
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	privilegeExists  NVARCHAR(300)  ; 
	V_CYCLE NVARCHAR(40);
	V_PRODUCT_GROUP NVARCHAR(10);
	V_PH NVARCHAR(20);
	V_ITEM NVARCHAR(40);
	V_PLANT NVARCHAR(20);
	V_COUNTRY NVARCHAR(20);
	V_TBA_TYPE NVARCHAR(20);
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_frt_ph::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;

      
CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh'
       ,I_MODULE=>'EBGCFE'
   	); 
 
select  CYCLE,
		PRODUCT_GROUP,
		PH,
		ITEM,
		PLANT,
		COUNTRY,
		TBA_TYPE
 into   V_CYCLE,
		V_PRODUCT_GROUP,
		V_PH,
		V_ITEM,
		V_PLANT,
		V_COUNTRY,
		V_TBA_TYPE
 from :oldInfo; 
	 
-- delete record from table	  	
delete from "EBGCFE"."UI_FRT_PH" 
  where CYCLE = :V_CYCLE 
  and PRODUCT_GROUP = :V_PRODUCT_GROUP 
  AND PH = :V_PH 
  AND ITEM = :V_ITEM
  and PLANT = :V_PLANT
  and COUNTRY = :V_COUNTRY
  and TBA_TYPE = :V_TBA_TYPE; 
  
if ::rowcount < 0
then
	/*errorInfo = select 400 as http_status_code, 
	     		'the record do not exists' error_message, 
	     		'the record do not exists' DETAIL from dummy;	     		
	     	return;*/
	 SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record do not exists';
	 
end if;		
	
--insert log table
insert into "EBGCFE"."UI_FRT_PH_LOG"(
	CYCLE,
	PRODUCT_GROUP,
	PH,
	ITEM,
	PLANT,
	COUNTRY,
	TBA_TYPE,
	M1,
	M2,
	M3,
	M4,
	M5,
	M6,
	M7,
	M8,
	M9,
	M10,
	M11,
	M12,
	M13,
	M14,
	M15,
	M16,
	M17,
	M18,
	STATUS,
	SYS_CREATED_DATE,
	SYS_CREATED_BY,
	SYS_LAST_MODIFIED_DATE,
	SYS_LAST_MODIFIED_BY,
	CHANGE_ID,
	CHANGE_ACTION,
	AT_MODIFIED_BY,
	AT_ACTION,
	AT_MODIFIED_ON,
	AT_MILLIS
	 )SELECT 
	 		'CURRENT',
		    'EBG',
		    a.PH,
			a.ITEM,
			a.PLANT,
			a.COUNTRY,
			a.TBA_TYPE,
			a.M1,
			a.M2,
			a.M3,
			a.M4,
			a.M5,
			a.M6,
			a.M7,
			a.M8,
			a.M9,
			a.M10,
			a.M11,
			a.M12,
			a.M13,
			a.M14,
			a.M15,
			a.M16,
			a.M17,
			a.M18,
		    '',--STATUS
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
		    '',--CHANGE_ID
		    '',--CHANGE_ACTION
	 		SESSION_USER,
	 		'delete',
	 		CURRENT_TIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')) FROM :oldInfo a; 
   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_frt_ph::deleteUiFrtPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);    	
END;
