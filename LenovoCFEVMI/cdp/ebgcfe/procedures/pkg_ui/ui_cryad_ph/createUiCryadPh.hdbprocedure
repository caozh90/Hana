PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh" 
( 
	IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_CRYAD_PH_T"
    ,OUT  errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA
	AS  
	   aI_DETAIL 	     NVARCHAR(300) :='';
	   alogide 			 INTEGER :=0;
	   privilegeExists   NVARCHAR(300)  ; 
	   currentUser varchar(100);
	   create_time TIMESTAMP;
	   
	   v_PH           NVARCHAR(20);
	   v_ITEM         NVARCHAR(40);
	   v_PLANT	      NVARCHAR(20);
	   v_COUNTRY      NVARCHAR(20);
	   v_TBA_TYPE     NVARCHAR(20);	  
	
	   VALIDATE0		 BIGINT;
	   VALIDATE1		 BIGINT;
	   VALIDATE2		 BIGINT;
	   VALIDATE3		 BIGINT;
	   VALIDATE4		 BIGINT;
	   VALIDATE5		 BIGINT;
	    		
BEGIN
/***************************** 
*name       :    createUiCryadPh
*function   :               
*input      :    newInfo
*output     :    errorInfo            
*author     :    ZHAODAN1
*DeleteDate :                  
*UpdateDate :    
*CreateDate :    2017.02.06
 *****************************/
 DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION   
	BEGIN
		aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
		
		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
	END;

--check the privilege
	call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_cryad_ph::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' || :privilegeExists as  error_message, 
              privilegeExists as detail from dummy;
       RETURN ;
    END IF;
--start
 	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh'
       ,I_MODULE=>'EBGCFE'
   	);

 	--赋值时间戳和用户名
	SELECT SESSION_USER INTO currentUser FROM DUMMY;
	SELECT CURRENT_TIMESTAMP INTO create_time FROM DUMMY;
	
	SELECT PH, ITEM , PLANT, UPPER(COUNTRY), TBA_TYPE
 		INTO v_PH, v_ITEM , v_PLANT, v_COUNTRY, v_TBA_TYPE
 		FROM :newinfo;



--check PH &　ITEM   	
if v_PH = '' and v_ITEM = '' then
	errorinfo = select 400 as http_status_code, 
	            ' PH & ITEM should be filled at least one' error_message, 
	            '' detail from dummy;        
        RETURN;        
end if;   	
if v_ITEM  <> 'N/A' then

    select 'N/A' into v_PH from dummy;
    
    select count(*) into VALIDATE1
    from :newinfo as A
    WHERE NOT EXISTS ( select 1 
						from ebgcfe.ui_item 
						where
						 item_type in ('MTM','CTO','BUNDLE','OPTION') AND
						 ITEM = A.ITEM
				      ) AND
		 A.ITEM	<> 'N/A'			 ;	
		 
	IF VALIDATE1 > 0 THEN
	 	  errorinfo = select 400 as http_status_code, 
	            'ITEM:' || :v_ITEM ||' NOT  EXIST IN UI_ITEM' error_message, 
	            '' detail from dummy;        
        RETURN;
     END IF;	
      
end if;

if v_PH  <> '' and v_PH  <> 'N/A' then

    select 'N/A' into v_ITEM from dummy;
    
    select count(*) into VALIDATE2
    from :newinfo as A
    WHERE NOT EXISTS ( select 1 
						from ebgcfe.ui_item 
						where
						 LEFT(PROD_H,LENGTH(A.PH)) = a.PH ) AND
		   A.PH	<> 'N/A'			 ;
		   	
	IF VALIDATE2 > 0 THEN
	 	  errorinfo = select 400 as http_status_code, 
	            'PH:' || :v_PH ||' NOT  EXIST IN UI_ITEM' error_message, 
	            '' detail from dummy;        
        RETURN;
     END IF;	
      
end if;
--check PLANT
if v_PLANT <> 'ALL' then

	select count(*) into VALIDATE3
	    from :newinfo as A
	WHERE A.PLANT <> 'ALL' AND
		  A.PLANT NOT IN (select distinct plant from UI_PLANT WHERE PLANT<>'WW')	 ;
			  
	IF VALIDATE3 > 0 THEN
	 	  errorinfo = select 400 as http_status_code, 
	            'PLANT:' || :v_PLANT ||' NOT  EXIST IN UI_PLANT' error_message, 
	            '' detail from dummy;        
        RETURN;
     END IF;			  
end if;
--check COUNTRY   
	select count(*) into VALIDATE4
	    from :newinfo as A
	WHERE UPPER(A.COUNTRY) NOT IN (select distinct (COUNTRY) from UI_REGION )	;
			  
	IF VALIDATE4 > 0 THEN
	 	  errorinfo = select 400 as http_status_code, 
	            'COUNTRY:' || :v_COUNTRY ||' NOT  EXIST IN UI_REGION' error_message, 
	            '' detail from dummy;        
        RETURN;
     END IF;
--check TBA_TYPE       
     select count(*) into VALIDATE5
	    from :newinfo as A
	WHERE A.TBA_TYPE NOT IN (select distinct(pvalue) from conf_parameters where pdomain='UI_ADDER_CONF' and pname='TBA_TYPE' )	 ;	
			  
	IF VALIDATE5 > 0 THEN
	 	  errorinfo = select 400 as http_status_code, 
	            'TBA_TYPE:' || :v_TBA_TYPE ||' NOT  EXIST IN conf_parameters' error_message, 
	            '' detail from dummy;        
        RETURN;
     END IF;
     
--check the record EXIST  
	SELECT count(*) INTO VALIDATE0
 		from  "EBGCFE"."UI_CRYAD_PH"
 		WHERE CYCLE = 'CURRENT' AND PRODUCT_GROUP = 'EBG' AND
 		      PH = :v_PH AND ITEM = :v_ITEM AND 
 		      PLANT = :v_PLANT AND COUNTRY = :v_COUNTRY AND TBA_TYPE = :v_TBA_TYPE;
 	IF	VALIDATE0 > 0
 	THEN
   		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists';   	
   	END IF;


 ---INSERT INTO UI_CRYAD_PH  
INSERT INTO "EBGCFE"."UI_CRYAD_PH"(
				CYCLE,PRODUCT_GROUP,
				PH,ITEM,PLANT,COUNTRY,TBA_TYPE,
				M1,M2,M3,M4,M5,
				M6,M7,M8,M9,M10,
				M11,M12,M13,M14,M15,
				M16,M17,M18,			
				SYS_CREATED_BY,
				SYS_CREATED_DATE,
				SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE,
				ACTION
			)
			SELECT  CYCLE,PRODUCT_GROUP,
					:v_PH,:v_ITEM,PLANT,:v_COUNTRY,TBA_TYPE,
					M1,M2,M3,M4,M5,
					M6,M7,M8,M9,M10,
					M11,M12,M13,M14,M15,
					M16,M17,M18,
			       :currentUser,
				   :create_time,
				   :currentUser,
				   :create_time,
				   'create'
			FROM :newinfo as a ;
			

--insert into log
	 	insert into "EBGCFE"."UI_CRYAD_PH_LOG"(
				CYCLE,PRODUCT_GROUP,
				PH,ITEM,PLANT,COUNTRY,TBA_TYPE,
				M1,M2,M3,M4,M5,
				M6,M7,M8,M9,M10,
				M11,M12,M13,M14,M15,
				M16,M17,M18,
				SYS_CREATED_BY,
				SYS_CREATED_DATE,
				AT_MODIFIED_BY,
				AT_ACTION,
				AT_MODIFIED_ON,
				AT_MILLIS
		 )SELECT 
			    CYCLE,PRODUCT_GROUP,
				:v_PH,:v_ITEM,PLANT,:v_COUNTRY,TBA_TYPE,
				M1,M2,M3,M4,M5,
				M6,M7,M8,M9,M10,
				M11,M12,M13,M14,M15,
				M16,M17,M18,
			    :currentUser,
			    :create_time,
			    :currentUser,
			    'create',    
		 		CURRENT_TIMESTAMP,
		 		TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')) 
		 		FROM :newinfo as a;

	   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh successfully inserted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::createUiCryadPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);  
END;
