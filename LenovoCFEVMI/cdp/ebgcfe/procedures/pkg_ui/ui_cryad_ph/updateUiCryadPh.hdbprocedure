PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh"
(
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_CRYAD_PH_T",
		 IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_CRYAD_PH_T",
		 OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
/************************************************************************
*name        :      updateUiCryadPh
*function    :               
*input       ï¼š              newInfo&oldInfo
*output      :      errorInfo            
*author      :      zhaodan1
*CreateDate  :      2017.2.6
*UpdateDate  :        
*************************************************************************/ 
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	privilegeExists  NVARCHAR(300)  ;
    v_WEIGHT			 DECIMAL(15,4);
    v_resourceExists  BIGINT;
BEGIN

DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
	BEGIN
		aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
		
		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
	END;

--check the privilege
	call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_cryad_ph::editable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' || :privilegeExists as  error_message, 
              privilegeExists as detail from dummy;
       RETURN ;
    END IF;
--start
 	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh'
       ,I_MODULE=>'EBGCFE'
   	);

-- if no value changed   	
SELECT COUNT(1) into v_resourceExists 
FROM :oldInfo a,:newInfo b 
WHERE a.CYCLE = b.CYCLE AND a.PRODUCT_GROUP = b.PRODUCT_GROUP AND
      a.PH = b.PH AND a.ITEM = b.ITEM  AND 
      a.PLANT = b.PLANT AND a.COUNTRY = b.COUNTRY AND a.TBA_TYPE = b.TBA_TYPE AND
      a.M1	=	b.M1	AND a.M2	=	b.M2	AND
	  a.M3	=	b.M3	AND a.M4	=	b.M4	AND
	  a.M5	=	b.M5	AND a.M6	=	b.M6	AND
	  a.M7	=	b.M7	AND a.M8	=	b.M8	AND
	  a.M9	=	b.M9	AND a.M10	=	b.M10	AND
	  a.M11	=	b.M11	AND a.M12	=	b.M12	AND
	  a.M13	=	b.M13	AND a.M14	=	b.M14	AND
	  a.M15	=	b.M15	AND a.M16	=	b.M16	AND
	  a.M17	=	b.M17	AND a.M18	=	b.M18	;
if v_resourceExists > 0
then
	 --SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record do not exists'; 
	 return;
end if;		

--update into UI_CRYAD_PH table

UPDATE "EBGCFE"."UI_CRYAD_PH" a
   SET (  a.m1, a.m2, a.m3, a.m4,	      
	      a.m5, a.m6, a.m7, a.m8,
	      a.m9, a.m10, a.m11, a.m12,
	      a.m13, a.m14, a.m15, a.m16,
	      a.m17, a.m18,	     
	      a.SYS_LAST_MODIFIED_DATE, a.SYS_LAST_MODIFIED_BY,
	      a.action)
	 = 
		( b.m1, b.m2, b.m3, b.m4,	      
	      b.m5, b.m6, b.m7, b.m8,
	      b.m9, b.m10, b.m11, b.m12,
	      b.m13, b.m14, b.m15, b.m16,
	      b.m17, b.m18,	      
		  CURRENT_TIMESTAMP,SESSION_USER,
		  'update')
FROM "EBGCFE"."UI_CRYAD_PH" a, :newInfo b 
WHERE a.CYCLE = b.CYCLE and  a.PRODUCT_GROUP = b.PRODUCT_GROUP and
	  a.PH = b.PH       and  a.ITEM = b.ITEM and
	  a.PLANT = b.PLANT and  a.COUNTRY = b.COUNTRY and
	  a.TBA_TYPE = b.TBA_TYPE ;		


--insert log table
--INSERT INTO UI_CRYAD_PH_LOG TABLE
--insert into log
 	insert into "EBGCFE"."UI_CRYAD_PH_LOG"(
			CYCLE,PRODUCT_GROUP,
			PH,ITEM,PLANT,COUNTRY,TBA_TYPE,
			M1,M2,M3,M4,M5,
			M6,M7,M8,M9,M10,
			M11,M12,M13,M14,M15,
			M16,M17,M18,
			SYS_CREATED_BY,
			SYS_CREATED_DATE,
			AT_MODIFIED_BY,
			AT_ACTION,
			AT_MODIFIED_ON,
			AT_MILLIS
	 )SELECT 
		    CYCLE,PRODUCT_GROUP,
			PH,ITEM,PLANT,COUNTRY,TBA_TYPE,
			M1,M2,M3,M4,M5,
			M6,M7,M8,M9,M10,
			M11,M12,M13,M14,M15,
			M16,M17,M18,
		    SESSION_USER,
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
		    'update',    
	 		CURRENT_TIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')) 
	 		FROM :oldInfo as a;
	   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh successfully updated . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_cryad_ph::updateUiCryadPh'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);  
END;

