PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom" ( 
    IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_PM_BOM" ,
    OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
/************************************************************************
*name        :      deleteUiPmBom
*function    :               
*input       ï¼š              oldInfo
*output      :      errorInfo            
*author      :      leon Bian
*CreateDate  :      2015.10.10
*UpdateDate  :        
*************************************************************************/
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	privilegeExists  NVARCHAR(300)  ; 
	V_CYCLE VARCHAR(40);
	V_PRODUCT_GROUP VARCHAR(10);
	V_OEM_NAME VARCHAR(40);
	V_ITEM VARCHAR(20);
	V_ITEM_DESC VARCHAR(200);
	V_ITEM_TYPE VARCHAR(40);
	V_BS_PART VARCHAR(20);
	V_COMMODITY VARCHAR(40);
	V_PART_DESC VARCHAR(200);
	V_PART_QTY DECIMAL(15,4);
BEGIN

DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_pm_bom::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;

      
CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom'
       ,I_MODULE=>'EBGCFE'
   	); 
 
select  CYCLE,
		PRODUCT_GROUP,
		OEM_NAME,
		ITEM,
		ITEM_DESC,
		ITEM_TYPE,
		BS_PART,
		COMMODITY,
		PART_DESC,
		PART_QTY
into   V_CYCLE,
	   V_PRODUCT_GROUP,
	   V_OEM_NAME,
	   V_ITEM,
	   V_ITEM_DESC,
	   V_ITEM_TYPE,
	   V_BS_PART,
	   V_COMMODITY,
	   V_PART_DESC,
	   V_PART_QTY
 from :oldInfo; 
	 
-- delete record from table	  	
delete from "EBGCFE"."UI_PM_BOM" 
  where PRODUCT_GROUP = :V_PRODUCT_GROUP 
  AND OEM_NAME = :V_OEM_NAME 
  AND ITEM = :V_ITEM
  and BS_PART = :V_BS_PART; 
  
if ::rowcount < 0
then
	/*errorInfo = select 400 as http_status_code, 
	     		'the record do not exists' error_message, 
	     		'the record do not exists' DETAIL from dummy;	     		
	     	return;*/
	 SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record do not exists';
	 
end if;		
	
--insert log table
insert into "EBGCFE"."UI_PM_BOM_LOG"(
	CYCLE,
	PRODUCT_GROUP,
	OEM_NAME,
	ITEM,
	ITEM_DESC,
	ITEM_TYPE,
	BS_PART,
	COMMODITY,
	PART_DESC,
	PART_QTY,
	ACTION,
	STATUS,
	CHANGE_ID,
	CHANGE_ACTION,
	SYS_CREATED_DATE,
	SYS_CREATED_BY,
	SYS_LAST_MODIFIED_DATE,
	SYS_LAST_MODIFIED_BY,
	AT_MODIFIED_BY,
	AT_ACTION,
	AT_MODIFIED_ON,
	AT_MILLIS
	 )SELECT 
	 		'CURRENT',
		    'EBG',
		    a.OEM_NAME,
			a.ITEM,
			a.ITEM_DESC,
			a.ITEM_TYPE,
			a.BS_PART,
			a.COMMODITY,
			a.PART_DESC,
			a.PART_QTY,
			'',--ACTION
		    '',--STATUS
		    '',--CHANGE_ID
		    '',--CHANGE_ACTION
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
	 		SESSION_USER,
	 		'delete',
	 		CURRENT_TIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')) FROM :oldInfo a; 
   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_pm_bom::deleteUiPmBom'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);   
END;
