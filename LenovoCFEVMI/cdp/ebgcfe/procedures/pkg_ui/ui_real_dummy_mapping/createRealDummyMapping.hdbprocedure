PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_real_dummy_mapping::createRealDummyMapping" ( 
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_REAL_DUMMY_MAPPING_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
/************************************************************************
*name      :                     createRealDummyMapping
*function    :               
*input     ï¼š               
*output     :                
*author     :                     shangqian
*CreateDate    :                  2015.3.20
*UpdateDate  :        
*************************************************************************/
		aReal_part NVARCHAR(40); 
		aDummy_part NVARCHAR(18);
		aCommodity NVARCHAR(40);
		aOwner NVARCHAR(70);
		
		resourceExists BIGINT;
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		privilegeExists  NVARCHAR(300)  ;
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::createRealDummyMapping error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createRealDummyMapping'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  
    
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_real_dummy_mapping::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
  
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createRealDummyMapping'
       ,I_MODULE=>'EBGCFE'
   	); 

select 	
    REAL_PART,
    DUMMY_PART,
    COMMODITY,
    OWNER
  into 
 	aReal_part,
	aDummy_part,
	aCommodity,
	aOwner
  from :newInfo;
  
    SELECT top 1 count(1) into resourceExists FROM "EBGCFE"."UI_REAL_DUMMY_MAPPING" A    
     WHERE A.REAL_PART = :aReal_part
     -- and  A.DUMMY_PART = :aDummy_part  
      ;
   
    if  :resourceExists > 0 
    then
	    SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists';
    end if;
    
    insert into "EBGCFE"."UI_REAL_DUMMY_MAPPING"
  	(PRODUCT_GROUP, CYCLE, REAL_PART, DUMMY_PART, COMMODITY, OWNER, SYS_LAST_MODIFIED_BY, SYS_LAST_MODIFIED_DATE, SYS_CREATED_BY, SYS_CREATED_DATE)
  	values('EBG', 'CURRENT', :aReal_part, :aDummy_part, :aCommodity, UCASE(:aOwner), session_user, CURRENT_TIMESTAMP, session_user, CURRENT_TIMESTAMP);

/*put operation to log table*/
    insert into "EBGCFE"."UI_REAL_DUMMY_MAPPING_LOG"
    (
    	PRODUCT_GROUP,
    	REAL_PART,
    	DUMMY_PART,
    	COMMODITY,
    	OWNER,    	
    	SYS_LAST_MODIFIED_DATE,   	
    	ACTION,
    	SYS_LAST_MODIFIED_BY,
    	AT_MODIFIED_ON,
    	AT_MILLIS    	
    )
    values
    (
    	'EBG',
    	:aReal_part,
    	:aDummy_part,
    	:aCommodity,
    	:aOwner,
    	current_date,    	
    	'create',
    	session_user,
    	current_date,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
    );  	
  	    /*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::createRealDummyMapping ('||:aReal_part||' ,) successfully created . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createRealDummyMapping'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);	

   	 		
END;