PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cost_tape::deleteUiCostTape" 
(
	IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_COST_TAPE_T",
	OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER   
	--DEFAULT SCHEMA <default_schema_name>
	AS
		aProduct_group NVARCHAR(10);
        aPart_number NVARCHAR(40);
        aMfg_plant NVARCHAR(20); 
        aCost_elem NVARCHAR(20);
        
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';	
		privilegeExists  NVARCHAR(300)  ;
BEGIN
/***************************** 
*	Write your procedure logic 
*   Chris Gao
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTape error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTape'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_cost_tape::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
  
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTape'
       ,I_MODULE=>'EBGCFE'
   	);
   	
 select
    PRODUCT_GROUP,	
    PART_NUMBER,
    PLANT,
    COST_ELEM
  into  	
 	aProduct_group,
 	aPart_number,
 	aMfg_plant,
 	aCost_elem
  from :newInfo;
  
  
  delete from "EBGCFE"."UI_COST_TAPE"
  	where PART_NUMBER = :aPart_number
          AND PLANT = :aMfg_plant
          AND COST_ELEM = :aCost_elem
    	  AND PRODUCT_GROUP = :aProduct_group;
  --- AP Change Request -- should update other cost elements in this plant to inactive 	 
  --- Chris Gao 
  update "EBGCFE"."UI_COST_TAPE_ORI"  set
    	STATUS = 'INACTIVE',
    	SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP
    where
    		  PART_NUMBER = :aPart_number
          AND MFG_PLANT = :aMfg_plant
          AND COST_ELEM = :aCost_elem
    	  AND PRODUCT_GROUP = :aProduct_group;

/*put operation to log table*/
    insert into  "EBGCFE"."UI_COST_TAPE_LOG"(
            "CYCLE",
            "PRODUCT_GROUP",
            "PART_NUMBER",
            "PLANT",
            "COST_ELEM",
            "PG",
            "SPEC",
            "COMMODITY",
            "SOURCE",
            "USED",
            "DESCRIPTION",
            "CURRENCY_NAME",
            "M1",
            "M2",
            "M3",
            "M4",
            "M5",
            "M6",
            "M7",
            "M8",
            "M9",
            "M10",
            "M11",
            "M12",
            "M13",
			"M14",
			"M15",
			"M16",
			"M17",
			"M18",
            "NEW_PART_NUMBER",
            "OWNER_COSTTAPE",
            "LAST_MODIFIED_DATE_COSTTAPE",
            "CREATED_DATE_COSTTAPE",
            "COMPANY_CONFIDENTIAL",
            "LANDED",
            "COST_PERIODS",
            "ACTION",
            "STATUS",
            "SYS_CREATED_DATE",
            "SYS_CREATED_BY",
            "SYS_LAST_MODIFIED_DATE",
            "SYS_LAST_MODIFIED_BY",
            "CHANGE_ID",
            "CHANGE_ACTION",
            "AT_MODIFIED_BY",
            "AT_ACTION",
            "AT_MODIFIED_ON",
            "AT_MILLIS"             
    )   
    select "CYCLE",
			"PRODUCT_GROUP",
			"PART_NUMBER",
			"PLANT",
			"COST_ELEM",
			"PG",
			"SPEC",
			"COMMODITY",
			"SOURCE",
            "USED",
			"DESCRIPTION",
			"CURRENCY_NAME",
			"M1",
			"M2",
			"M3",
			"M4",
			"M5",
			"M6",
			"M7",
			"M8",
			"M9",
			"M10",
			"M11",
			"M12",
			"M13",
			"M14",
			"M15",
			"M16",
			"M17",
			"M18",
			"NEW_PART_NUMBER",
			"OWNER_COSTTAPE",
			"LAST_MODIFIED_DATE_COSTTAPE",
			"CREATED_DATE_COSTTAPE",
			"COMPANY_CONFIDENTIAL",
			"LANDED",
			"COST_PERIODS",
			"ACTION",
			"STATUS",
			"SYS_CREATED_DATE",
			"SYS_CREATED_BY",
			"SYS_LAST_MODIFIED_DATE",
			"SYS_LAST_MODIFIED_BY",
			"CHANGE_ID",
			"CHANGE_ACTION",
			SESSION_USER,
			'DELETE',
			CURRENT_DATE,
			TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))			
	from "EBGCFE"."UI_COST_TAPE" a
	where exists(select 1 from :newInfo b where a."PRODUCT_GROUP"=b."PRODUCT_GROUP" 
          and a."PART_NUMBER"=b."PART_NUMBER" and a."PLANT"=b."PLANT" and a."COST_ELEM"=b."COST_ELEM");	
              
 /*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTape ('||:aPart_number||' ,) successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTape'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);	  
END;
