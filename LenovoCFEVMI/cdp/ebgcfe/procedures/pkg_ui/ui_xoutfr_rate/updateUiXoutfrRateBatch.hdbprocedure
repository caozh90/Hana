PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch" ( 
         IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_XOUTFR_RATE_UPD",
		 OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
/************************************************************************
*name        :      updateUiXoutfrRateBatch
*function    :               
*input       ï¼š              newInfo
*output      :      errorInfo            
*author      :      zhaodan1
*CreateDate  :      2016.5.19
*UpdateDate  :        
*************************************************************************/ 
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	resourceExists BIGINT;
	ERROR NVARCHAR(300)  ;
BEGIN

DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
     		
    END;  


      
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
		    I_TYPE=>'PROC_START'
	       ,I_LOGSID=>:alogide
	       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch'
	       ,I_MODULE=>'EBGCFE'
	   	); 
   	
   	
   		
   	
   	oldInfo = 
   	SELECT   a.CYCLE,      a.BRAND,
		     a.GEO_TYPE, a.GEO,	      
		     a.FAMILY,       a.MACHINETYPE,
		     a.GL_PERCENTAGE,a.FREIGHT_TYPE,
		     a.m1
	FROM    UI_XOUTFR_RATE a
	WHERE   EXISTS( SELECT 1 FROM :newInfo b
                    WHERE B.CYCLE = A.CYCLE AND
					      B.PRODUCT_GROUP = A.PRODUCT_GROUP AND
					      B.BRAND = A.BRAND AND
					      B.PLANT = A.PLANT AND
					      B.GEO = A.GEO AND
					      B.FAMILY = A.FAMILY AND
					      B.MACHINETYPE = A.MACHINETYPE AND
					      B.FREIGHT_TYPE = A.FREIGHT_TYPE	        
	        );
   	
   	
	
	allData =	
		SELECT  CYCLE, PRODUCT_GROUP, BRAND, PLANT, GEO_TYPE,							
				GEO,   FAMILY,        MACHINETYPE,  FREIGHT_TYPE, GL_PERCENTAGE ,				
				UNIT_COST
		FROM    :newInfo
		UNION
		SELECT  CYCLE, PRODUCT_GROUP, BRAND, PLANT, GEO_TYPE,							
				GEO,   FAMILY,        MACHINETYPE,  FREIGHT_TYPE, GL_PERCENTAGE ,				
				M1 AS UNIT_COST
		FROM    UI_XOUTFR_RATE a
		WHERE   NOT EXISTS( SELECT 1 FROM :newInfo b
		                    WHERE B.CYCLE = A.CYCLE AND
							      B.PRODUCT_GROUP = A.PRODUCT_GROUP AND
							      B.BRAND = A.BRAND AND
							      B.PLANT = A.PLANT AND
							      B.GEO = A.GEO AND
							      B.FAMILY = A.FAMILY AND
							      B.MACHINETYPE = A.MACHINETYPE AND
							      B.FREIGHT_TYPE = A.FREIGHT_TYPE	        
		        );
		 
	percentCheck = 
		    SELECT CYCLE ,PRODUCT_GROUP,BRAND,PLANT,FAMILY,MACHINETYPE,GEO
		    FROM :allData
		    GROUP BY CYCLE ,PRODUCT_GROUP,BRAND,PLANT,FAMILY,MACHINETYPE,GEO
		    HAVING SUM(GL_PERCENTAGE) <> 100;	
		    
	preCheckOk = 	
		   SELECT  CYCLE, PRODUCT_GROUP, BRAND, PLANT, GEO_TYPE,							
				   GEO,   FAMILY,        MACHINETYPE,  FREIGHT_TYPE, GL_PERCENTAGE ,				
				   UNIT_COST M1
		    FROM    :newInfo A
			WHERE   EXISTS( SELECT 1 FROM :allData b
		                    WHERE B.CYCLE = A.CYCLE AND
							      B.PRODUCT_GROUP = A.PRODUCT_GROUP AND
							      B.BRAND = A.BRAND AND
							      B.PLANT = A.PLANT AND
							      B.GEO = A.GEO AND
							      B.FAMILY = A.FAMILY AND
							      B.MACHINETYPE = A.MACHINETYPE 
					       GROUP BY CYCLE ,PRODUCT_GROUP,BRAND,PLANT,FAMILY,MACHINETYPE,GEO
		                   HAVING SUM(GL_PERCENTAGE) = 100	        
			        );
			        
	
		    
    SELECT COUNT(1) INTO resourceExists FROM :percentCheck;
    
    IF resourceExists > 0 THEN
         errorInfo = select 400 as http_status_code, 
     		'Error: Total percentage is not 100' ERROR_MESSAGE, 
     		'' DETAIL from dummy;	 
    END IF; 
				      				      

--update into UI_XOUTFR_RATE table
			UPDATE "EBGCFE"."UI_XOUTFR_RATE" a 
			   SET (  a.CYCLE,      a.BRAND, a.PRODUCT_GROUP,
				      a.GEO_TYPE, a.GEO, a.PLANT,	      
				      a.FAMILY,       a.MACHINETYPE,
				      a.GL_PERCENTAGE,a.FREIGHT_TYPE,
				      a.m1, a.m2, a.m3, a.m4,
				      a.m5, a.m6, a.m7, a.m8,
				      a.m9, a.m10, a.m11, a.m12,
				      a.m13, a.m14, a.m15, a.m16,
				      a.m17, a.m18,	     
				      a.SYS_LAST_MODIFIED_DATE, a.SYS_LAST_MODIFIED_BY )
				 = 
					( b.CYCLE,      b.BRAND, b.PRODUCT_GROUP,
				      b.GEO_TYPE, b.GEO, b.PLANT,	      
				      b.FAMILY,       b.MACHINETYPE,
				      b.GL_PERCENTAGE,b.FREIGHT_TYPE,	  
				      b.M1,b.M1,b.M1,b.M1,  
					  b.M1,b.M1,b.M1,b.M1,
					  b.M1,b.M1,b.M1,b.M1,
					  b.M1,b.M1,b.M1,b.M1,
					  b.M1,b.M1,
					  CURRENT_TIMESTAMP,SESSION_USER)
			FROM "EBGCFE"."UI_XOUTFR_RATE" a,:preCheckOk b 
			WHERE a.CYCLE = b.CYCLE AND
			      a.PRODUCT_GROUP = b.PRODUCT_GROUP AND
			      a.BRAND = b.BRAND AND
			      a.PLANT = b.PLANT AND
			      --a.GEO_TYPE = b.GEO_TYPE AND     
			      a.GEO = b.GEO AND
			      a.FAMILY = b.FAMILY AND
			      a.MACHINETYPE = b.MACHINETYPE AND
			      a.FREIGHT_TYPE = b.FREIGHT_TYPE  ; 
	     

					  
				prepare_update = 	  
				    SELECT DISTINCT a.CYCLE,      a.BRAND, a.PRODUCT_GROUP,
					       a.GEO_TYPE, a.GEO, a.PLANT,	      
					       a.FAMILY,       a.MACHINETYPE,
					       a.GL_PERCENTAGE,a.FREIGHT_TYPE,
					       a.m1, a.m2, a.m3, a.m4,
					       a.m5, a.m6, a.m7, a.m8,
					       a.m9, a.m10, a.m11, a.m12,
					       a.m13, a.m14, a.m15, a.m16,
		                   a.m17, a.m18
					  FROM "EBGCFE"."UI_XOUTFR_RATE" a,:preCheckOk b 
					WHERE a.CYCLE = b.CYCLE AND
					      a.PRODUCT_GROUP = b.PRODUCT_GROUP AND
					      a.BRAND = b.BRAND AND
					      a.PLANT = b.PLANT AND
					      --a.GEO_TYPE = b.GEO_TYPE AND     
					      a.GEO = b.GEO AND
					      a.FAMILY = b.FAMILY AND
					      a.MACHINETYPE = b.MACHINETYPE AND
						  a.FREIGHT_TYPE <> 'GEO_MIX';      	  
				      
				geo_mix_new = 
				   SELECT a.CYCLE, a.PRODUCT_GROUP, a.BRAND,a.PLANT, a.GEO_TYPE,
			              a.GEO,   a.FAMILY,        a.MACHINETYPE,   'GEO_MIX' AS FREIGHT_TYPE,
			              NULL AS GL_PERCENTAGE,    SUM(a.M1*a.GL_PERCENTAGE/100) AS UNIT_COST
					 FROM :prepare_update a
					 GROUP BY
					      a.CYCLE, a.PRODUCT_GROUP, a.BRAND,a.PLANT, a.GEO_TYPE,
			              a.GEO,   a.FAMILY,        a.MACHINETYPE;    
			              
			    UPDATE "EBGCFE"."UI_XOUTFR_RATE" a 
				   SET (  a.CYCLE,      a.BRAND, a.PRODUCT_GROUP,
					      a.GEO_TYPE, a.GEO,	      
					      a.FAMILY,       a.MACHINETYPE,
					      a.GL_PERCENTAGE,a.FREIGHT_TYPE,
					      a.m1, a.m2, a.m3, a.m4,
					      a.m5, a.m6, a.m7, a.m8,
					      a.m9, a.m10, a.m11, a.m12,
					      a.m13, a.m14, a.m15, a.m16,
		                  a.m17, a.m18,	     
					      a.SYS_LAST_MODIFIED_DATE, a.SYS_LAST_MODIFIED_BY )
					 = 
						( b.CYCLE,      b.BRAND, b.PRODUCT_GROUP,
					      b.GEO_TYPE, b.GEO,	      
					      b.FAMILY,       b.MACHINETYPE,
					      b.GL_PERCENTAGE,b.FREIGHT_TYPE,	  
					      b.UNIT_COST, b.UNIT_COST, b.UNIT_COST, b.UNIT_COST,
					      b.UNIT_COST, b.UNIT_COST, b.UNIT_COST, b.UNIT_COST,
					      b.UNIT_COST, b.UNIT_COST, b.UNIT_COST, b.UNIT_COST,
					      b.UNIT_COST, b.UNIT_COST, b.UNIT_COST, b.UNIT_COST,
					      b.UNIT_COST, b.UNIT_COST,
						  CURRENT_TIMESTAMP,SESSION_USER)
				FROM "EBGCFE"."UI_XOUTFR_RATE" a,:geo_mix_new b 
				WHERE a.CYCLE = b.CYCLE AND
				      a.PRODUCT_GROUP = b.PRODUCT_GROUP AND
				      a.BRAND = b.BRAND AND
				      a.PLANT = b.PLANT AND
				      --a.GEO_TYPE = b.GEO_TYPE AND     
				      a.GEO = b.GEO AND
				      a.FAMILY = b.FAMILY AND
				      a.MACHINETYPE = b.MACHINETYPE AND
				      a.FREIGHT_TYPE = b.FREIGHT_TYPE  AND
					  a.FREIGHT_TYPE = 'GEO_MIX'; 

	--insert log table
	INSERT INTO "EBGCFE"."UI_XOUTFR_RATE_LOG"(
			  CYCLE,      BRAND,
		      GEO_TYPE, GEO,	      
		      FAMILY,       MACHINETYPE,
		      GL_PERCENTAGE,FREIGHT_TYPE,
		      m1, m2, m3, m4,
		      m5, m6, m7, m8,
		      m9, m10, m11, m12,
		      m13, m14, m15, m16,
			  m17, m18,	
			SYS_CREATED_BY,SYS_CREATED_DATE,
			SYS_LAST_MODIFIED_BY,SYS_LAST_MODIFIED_DATE,
			AT_ACTION,AT_MODIFIED_ON,AT_MILLIS
		 )SELECT 
			 a.CYCLE,      a.BRAND,
		      a.GEO_TYPE, a.GEO,	      
		      a.FAMILY,       a.MACHINETYPE,
		      a.GL_PERCENTAGE,a.FREIGHT_TYPE,
		      a.m1, a.m1, a.m1, a.m1,
		      a.m1, a.m1, a.m1, a.m1,
		      a.m1, a.m1, a.m1, a.m1,
		      a.m1, a.m1, a.m1, a.m1,
		      a.m1, a.m1,
			SESSION_USER,CURRENT_TIMESTAMP,
			SESSION_USER,CURRENT_TIMESTAMP,
			'update',	CURRENT_TIMESTAMP ,TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
		  FROM :oldInfo a; 	
	
	   	
	aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch successfully updated . ';
	 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
		 		I_TYPE=>'PROC_END'	
		     	,I_LOGSID=>:alogide
		     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xoutfr_rate::updateUiXoutfrRateBatch'
		     	,I_MODULE=>'EBGCFE'
		     	,I_DETAIL=>:aI_DETAIL
	     	);
	     	
	SELECT COUNT(1) INTO resourceExists FROM :errorInfo;
	IF resourceExists > 0 THEN     	
		SELECT ERROR_MESSAGE INTO ERROR FROM :errorInfo; 
	END IF;  	
	if ERROR <> ''   then  	
	     	errorInfo = select 400 as http_status_code, 
     		ERROR ERROR_MESSAGE, 
     		'' DETAIL from dummy;
     end if;
    IF ERROR is null THEN
          errorInfo = select 200 as http_status_code, 
     		'SUCCESS' ERROR_MESSAGE, 
     		'' DETAIL from dummy;
    END IF;	
     	
END;
