PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode" 
( 
	 IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_RATIO_CODE_T",
	 IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_RATIO_CODE_T",
	 OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
		aI_DETAIL 		 NVARCHAR(300) :='';
	    alogide 		 INTEGER :=0;
	    resourceExists   BIGINT;
	    privilegeExists  NVARCHAR(300)  ; 
	    validate1        BIGINT;
	    v_cycle 		 NVARCHAR(40);
		v_BRAND          NVARCHAR(40);
		v_FAMILY	     NVARCHAR(40);
		v_GEO	         NVARCHAR(40);
		v_MACHINETYPE    NVARCHAR(40);
		v_ITEM           NVARCHAR(40);
BEGIN
/***************************** 
	*name      :                     editUiRatioCode
*function    :               
*input     ï¼š               newinfo/oldInfo
*output     :    errorInfo            
*author     :                     chenwh3
*DeleteDate    :                  2015.08.06
*UpdateDate  :         
 *****************************/
 	DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN 
    		aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy; 
    END ; 
 --check the Privilege
 /*    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_ratio_code::editable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    	errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' || :privilegeExists as error_message, 
              privilegeExists as detail from dummy;
       RETURN ;
    END IF; */
---log start 	
    CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode'
       ,I_MODULE=>'EBGCFE'
   	); 
--check the record validation 
	SELECT cycle,BRAND,FAMILY,MACHINETYPE,ITEM,GEO
 		INTO v_cycle,v_BRAND,v_FAMILY,v_MACHINETYPE,v_ITEM,v_GEO
 		FROM :newinfo;  
 		
 		v_BRAND := "EBGCFE"."cdp.ebgcfe.functions::FUNC_CONVERT_SLASH"(:v_BRAND);
 		v_FAMILY := "EBGCFE"."cdp.ebgcfe.functions::FUNC_CONVERT_SLASH"(:v_FAMILY);
 		v_GEO := "EBGCFE"."cdp.ebgcfe.functions::FUNC_CONVERT_SLASH"(:v_GEO);
 		v_MACHINETYPE := "EBGCFE"."cdp.ebgcfe.functions::FUNC_CONVERT_SLASH"(:v_MACHINETYPE);
 		
 		
 IF	v_cycle = 'CURRENT' THEN	     
 	SELECT count(*) INTO validate1
 		from  "EBGCFE"."UI_RATIO_CODE"
 		WHERE CYCLE = :v_cycle AND BRAND = :v_BRAND and FAMILY = :v_FAMILY and GEO = :v_GEO AND MACHINETYPE = :v_MACHINETYPE AND ITEM = :v_ITEM;
 	IF	validate1 <= 0
 	then
 		  errorinfo = select 400 as http_status_code, 
            'VALIDATION FAILED, NOT EXIST IN UI_RATIO_CODE' error_message, 
            '' detail from dummy;        
        RETURN;
 	end if;
 ELSE
 	SELECT count(*) INTO validate1
 		from  "EBGCFE"."UI_RATIO_CODE_HIS"
 		WHERE CYCLE = :v_cycle AND BRAND = :v_BRAND and FAMILY = :v_FAMILY and GEO = :v_GEO AND MACHINETYPE = :v_MACHINETYPE AND ITEM = :v_ITEM;
 	IF	validate1 <= 0
 	then
 		  errorinfo = select 400 as http_status_code, 
            'VALIDATION FAILED, NOT EXIST IN UI_RATIO_CODE_HIS' error_message, 
            '' detail from dummy;        
        RETURN;
 	end if;
 END IF;	

   	SELECT COUNT(*) into resourceExists FROM :oldInfo a,:newInfo b 
   		where a.BRAND = b.BRAND   and a.FAMILY = b.FAMILY and a.GEO = b.GEO AND a.MACHINETYPE = b.MACHINETYPE AND a.CYCLE = b.CYCLE 
   		AND a.PRODUCT_GROUP = b.PRODUCT_GROUP AND a.RATIO_CODE = b.RATIO_CODE AND a.ITEM = b.ITEM;
   	if resourceExists > 0
   	then
   		return;
   	end if; 
   		
 	
---update  "EBGCFE"."UI_RATIO_CODE"
 IF	v_cycle = 'CURRENT' THEN
	update "EBGCFE"."UI_RATIO_CODE" a set  (a.RATIO_CODE,a.SYS_LAST_MODIFIED_DATE,a.SYS_LAST_MODIFIED_BY,a.ACTION)  =
		(UPPER(b.RATIO_CODE),CURRENT_TIMESTAMP,SESSION_USER,'update')
		from :newinfo b where  A.CYCLE = :v_cycle AND a.BRAND = b.BRAND and a.FAMILY = b.FAMILY  and a.GEO = b.GEO AND a.MACHINETYPE = b.MACHINETYPE  AND a.ITEM = b.ITEM;
ELSE
	update "EBGCFE"."UI_RATIO_CODE_HIS" a set  (a.RATIO_CODE,a.SYS_LAST_MODIFIED_DATE,a.SYS_LAST_MODIFIED_BY,a.ACTION)  =
		(UPPER(b.RATIO_CODE),CURRENT_TIMESTAMP,SESSION_USER,'update')
		from :newinfo b where A.CYCLE = :v_cycle AND  a.BRAND = b.BRAND and a.FAMILY = b.FAMILY  and a.GEO = b.GEO  AND a.MACHINETYPE = b.MACHINETYPE  AND a.ITEM = b.ITEM;
END IF;			
    if ::rowcount < 0 then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'fail updated';
	end if;
--insert into log
INSERT into  "EBGCFE"."UI_RATIO_CODE_LOG"
	("CYCLE",
	"PRODUCT_GROUP",
	"BRAND",
	"FAMILY",
	"GEO",
	"MACHINETYPE",
	"ITEM",
	"RATIO_CODE",
	"SYS_CREATED_DATE",
	"SYS_CREATED_BY",
	"SYS_LAST_MODIFIED_DATE",
	"SYS_LAST_MODIFIED_BY",
	"STATUS",
	"CHANGE_ID",
	"CHANGE_ACTION",
	"AT_MODIFIED_BY",
	"AT_ACTION",
	"AT_MODIFIED_ON",
	"AT_MILLIS"
	)
SELECT
	a.CYCLE,
	a.PRODUCT_GROUP,
	a.BRAND,
	a.FAMILY,
	a.GEO,
	a.MACHINETYPE,
	a.ITEM,
	a.RATIO_CODE,
	a.SYS_CREATED_DATE,
	a.SYS_CREATED_BY,
	CURRENT_TIMESTAMP,
	SESSION_USER,
	a.STATUS,
	a.CHANGE_ID,
	a.CHANGE_ACTION,
	SESSION_USER,
	'update',
	CURRENT_TIMESTAMP,
	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
from :oldinfo a;
	aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode successfully updated . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::editUiRatioCode'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);   
END;
