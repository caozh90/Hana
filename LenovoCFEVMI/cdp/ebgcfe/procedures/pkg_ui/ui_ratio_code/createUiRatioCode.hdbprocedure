PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode" 
( 
	IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_RATIO_CODE_T"
    ,OUT  errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA
	AS  
	   aI_DETAIL 	     NVARCHAR(300) :='';
	   alogide 			 INTEGER :=0;
	   privilegeExists   NVARCHAR(300)  ; 
	   v_BRAND           NVARCHAR(40);
	   v_FAMILY	         NVARCHAR(40);
	   v_MACHINETYPE     NVARCHAR(40);
	   v_GEO             NVARCHAR(40);
	   V_ITEM			 NVARCHAR(40);
	   V_RATIO_CODE      NVARCHAR(100);
	   v_resourceExists  BIGINT;
	   VALIDATE0		 BIGINT;
	   VALIDATE1		 BIGINT;
	    		
BEGIN
/***************************** 
*name       :    createUiRatioCode
*function   :               
*input      :    newInfo
*output     :    errorInfo            
*author     :    chenwh3
*DeleteDate :                  
*UpdateDate :    
*CreateDate :    2015.08.06
 *****************************/
 DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION   
	BEGIN
		aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
		
		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
	END;

--check the privilege
	call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_ratio_code::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' || :privilegeExists as  error_message, 
              privilegeExists as detail from dummy;
       RETURN ;
    END IF;
--start
 	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode'
       ,I_MODULE=>'EBGCFE'
   	);

 
	SELECT BRAND,FAMILY,GEO,MACHINETYPE,ITEM,RATIO_CODE
 		INTO v_BRAND,v_FAMILY,v_GEO,v_MACHINETYPE,V_ITEM,V_RATIO_CODE
 		
 		FROM :newinfo;
 		
 		v_BRAND := 'N/A';
 
 --CHECK can not all null
 if  (V_ITEM = '' or V_ITEM = 'ALL') and  (v_FAMILY = '' or v_FAMILY = 'N/A') and  (v_MACHINETYPE = '' or v_MACHINETYPE = 'N/A')
		then 
		 errorinfo = select 400 as http_status_code, 
            'Plz insert a valid item/or Machine type/or Family.' error_message, 
            '' detail from dummy;        
        RETURN;
  end if;
		
	
--CHECK THE ITEM VALIDATION
 if V_ITEM = '' or V_ITEM is null 
 then 
	V_ITEM := 'ALL';
 END IF ;
 
 if UPPER(V_ITEM) != 'ALL'
 then 
 SELECT COUNT(*) INTO VALIDATE0 
 	FROM   "EBGCFE"."UI_ITEM"
 	WHERE UPPER(ITEM) = UPPER(:V_ITEM);
 IF VALIDATE0 <= 0 THEN
 	  errorinfo = select 400 as http_status_code, 
            'ITEM:' || :V_ITEM ||' NOT  EXIST IN UI_ITEM' error_message, 
            '' detail from dummy;        
        RETURN;
 END IF;
end if;


--validate MACHINETYPE
	IF v_MACHINETYPE <> 'N/A' and v_MACHINETYPE <> '' and v_MACHINETYPE is not null THEN
		select  count(1) into VALIDATE0 from EBGCFE.UI_MACHINETYPE where MACHINETYPE =:v_MACHINETYPE;
		IF VALIDATE0 < 1  then
			errorinfo = select 400 as http_status_code, 
            'MACHINETYPE:' || :v_MACHINETYPE ||' NOT  EXIST IN UI_MACHINETYPE' error_message, 
            '' detail from dummy;        
        RETURN;
		END IF ;
	END IF ;

IF v_FAMILY <> 'N/A' AND v_MACHINETYPE = 'N/A' AND V_ITEM = 'ALL'
THEN
		select ( select  TOP 1 BRAND  from "EBGCFE".UI_PRODFAMILY where PROD_FAMILY= :v_FAMILY ) INTO v_BRAND from DUMMY;
END IF;


 
--check the record EXIST  
	SELECT count(*) INTO validate1
 		from  "EBGCFE"."UI_RATIO_CODE"
 		WHERE BRAND = :v_BRAND AND FAMILY = :v_FAMILY AND GEO = :v_GEO AND MACHINETYPE = :v_MACHINETYPE AND ITEM = :V_ITEM;
 	IF	validate1 > 0
 	THEN
   		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists';
   		--RETURN;
   		-- errorinfo = select 400 as http_status_code, 
          --  'the record exists' error_message, 
            --'' detail from dummy;        
        --RETURN;
   	END IF;

 ---INSERT INTO UI_RATIO_CODE  

	  insert into "EBGCFE"."UI_RATIO_CODE"
	            (CYCLE,PRODUCT_GROUP,BRAND,FAMILY,GEO,MACHINETYPE,ITEM,RATIO_CODE,SYS_CREATED_DATE,SYS_CREATED_BY,SYS_LAST_MODIFIED_DATE,SYS_LAST_MODIFIED_BY,ACTION)  
	  	values ('CURRENT','EBG',:V_BRAND,:v_FAMILY,v_GEO,:v_MACHINETYPE,UPPER (:V_ITEM),UPPER (:V_RATIO_CODE),CURRENT_TIMESTAMP,SESSION_USER,CURRENT_TIMESTAMP,SESSION_USER,'insert');
--insert into log
INSERT into  "EBGCFE"."UI_RATIO_CODE_LOG"
	("CYCLE",
	"PRODUCT_GROUP",
	"BRAND",
	"FAMILY",
	"GEO",
	"MACHINETYPE",
	"ITEM",
	"RATIO_CODE",
	"SYS_CREATED_DATE",
	"SYS_CREATED_BY",
	"SYS_LAST_MODIFIED_DATE",
	"SYS_LAST_MODIFIED_BY",
	"STATUS",
	"CHANGE_ID",
	"CHANGE_ACTION",
	"AT_MODIFIED_BY",
	"AT_ACTION",
	"AT_MODIFIED_ON",
	"AT_MILLIS"
	)
SELECT
	'CURRENT',
	'EBG',
	a.BRAND,
	a.FAMILY,
	a.GEO,
	a.MACHINETYPE,
	UPPER(:V_ITEM),
	UPPER(a.RATIO_CODE),
	CURRENT_TIMESTAMP,
	SESSION_USER,
	CURRENT_TIMESTAMP,
	SESSION_USER,
	a.STATUS,
	a.CHANGE_ID,
	a.CHANGE_ACTION,
	SESSION_USER,
	'insert',
	CURRENT_TIMESTAMP,
	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
from :newinfo a;	   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode successfully inserted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_ratio_code::createUiRatioCode'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);  
END;
