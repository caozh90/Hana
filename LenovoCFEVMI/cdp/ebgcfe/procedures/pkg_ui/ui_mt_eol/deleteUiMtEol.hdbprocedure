PROCEDURE"EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol" ( 
    IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_MT_EOL" ,
    OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name        :      deleteui_mt_eol
*function    :               
*input       ï¼š              newInfo
*output      :      errorInfo            
*author      :      zhaodan
*CreateDate  :      2016.1.15
*UpdateDate  :               
*************************************************************************/
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	privilegeExists  NVARCHAR(300)  ; 
	
	V_CYCLE NVARCHAR(40);
	V_PRODUCT_GROUP NVARCHAR(10);
	V_MT NVARCHAR(10);
	
	v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol';
    v_exitcode    DECIMAL;
BEGIN

DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_mt_eol::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;

      
CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol'
       ,I_MODULE=>'EBGCFE'
   	); 
 
select CYCLE,
	   PRODUCT_GROUP,
	   MT
into   V_CYCLE,
	   V_PRODUCT_GROUP,
	   V_MT 
 from :oldInfo; 
	 
-- delete record from table	  	
delete from "EBGCFE"."UI_MT_EOL" 
  where CYCLE = :V_CYCLE 
  and PRODUCT_GROUP = :V_PRODUCT_GROUP 
  AND MT = :V_MT; 
  
if ::rowcount < 0
then
	/*errorInfo = select 400 as http_status_code, 
	     		'the record do not exists' error_message, 
	     		'the record do not exists' DETAIL from dummy;	     		
	     	return;*/
	 SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record do not exists';
	 
end if;		
	
--insert log table
insert into "EBGCFE"."UI_MT_EOL_LOG"(
		 CYCLE,
		 PRODUCT_GROUP,
		 MT,
	     EOL_STATUS,
		 ACTION,
		 STATUS,
		 CHANGE_ID,
		 CHANGE_ACTION,
		 SYS_CREATED_DATE,
		 SYS_CREATED_BY,
		 SYS_LAST_MODIFIED_DATE,
		 SYS_LAST_MODIFIED_BY,
		 AT_MODIFIED_BY,
		 AT_ACTION,
		 AT_MODIFIED_ON,
		 AT_MILLIS
	 )SELECT 
	 		 'CURRENT',
		    'EBG',
		    a.MT,
		    a.EOL_STATUS,
		    'delete',
		    '',--STATUS
		    '',--CHANGE_ID
		    '',--CHANGE_ACTION
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
		    CURRENT_TIMESTAMP,
		    SESSION_USER,
	 		SESSION_USER,
	 		'delete',
	 		CURRENT_TIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))  FROM :oldInfo a; 
	 		
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('MT', :V_MT, :v_event_name, :v_exitcode);
   	
aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_mt_eol::deleteUiMtEol'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);    	
END;
