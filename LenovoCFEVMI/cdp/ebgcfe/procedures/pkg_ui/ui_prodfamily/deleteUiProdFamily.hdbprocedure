PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_prodfamily::deleteUiProdFamily" (
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_PRODFAMILY_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
/************************************************************************
*name      :                     deleteUiProdFamily
*function    :               
*input     ï¼š               
*output     :                
*author     :                     shangqian
*CreateDate    :                  2014.12.2
*UpdateDate  :        
*************************************************************************/	
		aProduct_group NVARCHAR(10);
		aBrand NVARCHAR(40);
		aProd_family NVARCHAR(100);
		
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		privilegeExists  NVARCHAR(300)  ;
		
	    v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.ui_prodfamily::deleteUiProdFamily';
        v_exitcode    DECIMAL;
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::deleteUiProdFamily error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiProdFamily'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_prodfamily::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
    
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiProdFamily'
       ,I_MODULE=>'EBGCFE'
   	);
   	
 select
    --PRODUCT_GROUP,	
    BRAND,
    PROD_FAMILY    
  into  	
 	--aProduct_group,
 	aBrand,
	aProd_family
  from :newInfo;
  
  
  delete from "EBGCFE"."UI_PRODFAMILY"
  	where /*PRODUCT_GROUP = :aProduct_group
  	      and*/ BRAND = :aBrand 
          and PROD_FAMILY = :aProd_family;
 
 /*put operation to log table*/
  	insert into "EBGCFE"."UI_PRODFAMILY_LOG"
  	(
  		PRODUCT_GROUP,
  		BRAND,
  		PROD_FAMILY,  		
  		ACTION,
    	SYS_LAST_MODIFIED_BY,
    	SYS_LAST_MODIFIED_DATE,
    	AT_MODIFIED_TIME
  	)
  	values
  	(
  		'EBG',
  		:aBrand,
  		:aProd_family,  		
  		'delete',
  		SESSION_USER,
    	--current_user,
    	CURRENT_TIMESTAMP,
    	--current_date,
    	CURRENT_TIMESTAMP
  	);     
  	
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('FAMILY', :aProd_family, :v_event_name, :v_exitcode);
  	   
 /*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::deleteUiProdFamily ('||:aBrand||' ,) successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiProdFamily'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);	          

END;