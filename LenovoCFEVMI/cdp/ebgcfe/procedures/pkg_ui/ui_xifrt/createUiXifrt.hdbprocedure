PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt" ( 
        IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_XIFRT_T"
        ,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY DEFINER 
    DEFAULT SCHEMA "EBGCFE"
    AS 
    /************************************************************************
    *name      :                     createXifrt
    *function    :               
    *input     ï¼š               
    *output     :                
    *author     :                     Fangyuan
    *CreateDate    :                  2014.12.17
    *UpdateDate  :        
    *************************************************************************/  

        aI_DETAIL NVARCHAR(300) :='';   
        alogide INTEGER :=0; 
        v_resourceExists BIGINT; 
        privilegeExists  NVARCHAR(300)  ;           
BEGIN
DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000; 
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
        aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
        
        CALL "EX_LOG"."cdp.log.procedures::logProc"(
             I_TYPE=>'PROC_ERROR'   
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt'
            ,I_MODULE=>'EBGCFE'
            ,I_MESSAGE=>'E'||::SQL_ERROR_CODE
            ,I_DETAIL=>:aI_DETAIL
        );  
 
        errorInfo = select 400 as http_status_code, 
            'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
            aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_xifrt::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
    
 --START
    CALL "EX_LOG"."cdp.log.procedures::logProc"(
        I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt'
       ,I_MODULE=>'EBGCFE'
    ); 

    select count(1) into v_resourceExists 
    from UI_XIFRT a,:newInfo b 
    where A.BRAND=B.BRAND AND A.FAMILY=B.FAMILY AND A.PLANT=B.PLANT 
    AND A.SUBGEO=B.SUBGEO AND A.TBA_TYPE=B.TBA_TYPE;

    if  :v_resourceExists > 0 
        then
            /*errorInfo = select 400 as http_status_code, 
	     		'the record exists' error_message, 
	     		'the record exists' DETAIL from dummy;
	     		
	     	return;*/
	    SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists'; 	
    end if; 

    INSERT INTO UI_XIFRT
    (
    "CYCLE",
    "PRODUCT_GROUP",
    "BRAND",
    "FAMILY",
    "PLANT",
    "SUBGEO",
    "TBA_TYPE",
    "M1",
    "M2",
    "M3",
    "M4",
    "M5",
    "M6",
    "M7",
    "M8",
    "M9",
    "M10",
    "M11",
    "M12",
    "M13",
    "M14",
    "M15",
    "M16",
    "M17",
    "M18",
    "SYS_CREATED_DATE",
    "SYS_CREATED_BY",
    "SYS_LAST_MODIFIED_DATE",
    "SYS_LAST_MODIFIED_BY"
    )
    SELECT
    'CURRENT',
    'EBG',
    "BRAND",
    "FAMILY",
    "PLANT",
    "SUBGEO",
    "TBA_TYPE",
    "M1",
    "M2",
    "M3",
    "M4",
    "M5",
    "M6",
    "M7",
    "M8",
    "M9",
    "M10",
    "M11",
    "M12",
    "M13",
    "M14",
    "M15",
    "M16",
    "M17",
    "M18", 
    CURRENT_TIMESTAMP,
    SESSION_USER,
    CURRENT_TIMESTAMP,
    SESSION_USER
    FROM  :newInfo; 
    
    INSERT INTO UI_XIFRT_LOG
    (
    "PRODUCT_GROUP",
    "BRAND",
    "FAMILY",
    "PLANT",
    "SUBGEO",
    "TBA_TYPE",
    "M1",
    "M2",
    "M3",
    "M4",
    "M5",
    "M6",
    "M7",
    "M8",
    "M9",
    "M10",
    "M11",
    "M12",
    "M13",
    "M14",
    "M15",
    "M16",
    "M17",
    "M18",
    SYS_CREATED_BY,
    SYS_CREATED_DATE,
    ACTION,
    AT_MODIFIED_ON,
    AT_MILLIS 
    )
    SELECT
    'EBG',
    "BRAND",
    "FAMILY",
    "PLANT",
    "SUBGEO",
    "TBA_TYPE",
    "M1",
    "M2",
    "M3",
    "M4",
    "M5",
    "M6",
    "M7",
    "M8",
    "M9",
    "M10",
    "M11",
    "M12",
    "M13",
    "M14",
    "M15",
    "M16",
    "M17",
    "M18",
    SESSION_USER,
    CURRENT_TIMESTAMP,
    'create',
    current_timestamp,
    TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
      
    FROM  :newInfo; 
    
        /*END*/
        aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt successfully created . ';
        CALL "EX_LOG"."cdp.log.procedures::logProc"(
            I_TYPE=>'PROC_END'  
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_xifrt::createUiXifrt'
            ,I_MODULE=>'EBGCFE'
            ,I_DETAIL=>:aI_DETAIL
        );     
END;
