PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_pcdw_to_cfe::PRC_PCDW_SEO_CTO_VK_MAPPING_INIT" ( 
  IN  P_PRODUCT_GROUP   VARCHAR(20),
  OUT P_EXIT_CODE       INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
	AS
/************************************************************************
*name       : PRC_PCDW_SEO_CTO_VK_MAPPING_INIT       
*function   : Load SEO_CTO_VK_FLAG data from PCDW
*input      ： p_product_group : product group
*output     : p_exit_code : error code  
*author     : ZHANGXJ
*CreateDate :  2016-02-25
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
BEGIN
  -- variable
  DECLARE v_g_pkg_name        VARCHAR(30) := 'PKG_PCDW_TO_CFE';
  DECLARE v_prc_name          VARCHAR(60) := 'PRC_PCDW_SEO_CTO_VK_MAPPING_INIT';
  DECLARE v_full_name         VARCHAR(100) := :v_g_pkg_name ||'.'|| :v_prc_name;
  DECLARE logidi              INTEGER := 0;
  DECLARE v_exitcode          INTEGER;
  DECLARE v_exit_message      VARCHAR(500);
  DECLARE v_cur_cycle         VARCHAR(40)  := 'CURRENT';  

  -- exception
  DECLARE exp_procedure CONDITION FOR SQL_ERROR_CODE 10001;   
  DECLARE EXIT HANDLER FOR exp_procedure   
  BEGIN
      P_EXIT_CODE := ::SQL_ERROR_CODE;
      CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR', 
                                                  I_LOGSID     => :logidi,
		                                          I_EVENT_NAME => :v_full_name,
		                                          I_MODULE     => 'EBGCFE',
		                                          I_MESSAGE    => 'ERROR', 
		                                          I_DETAIL     => :v_exit_message); 			           
  END;
      
      
  DECLARE EXIT HANDLER FOR SQLEXCEPTION   
  BEGIN     
      P_EXIT_CODE := ::SQL_ERROR_CODE;
             
	  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_ERROR',I_LOGSID=>:logidi,
		I_EVENT_NAME=>:v_full_name, I_MODULE=>'EBGCFE',
		I_MESSAGE=>'ERROR', I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' || substr(::SQL_ERROR_MESSAGE, 1, 500) );    
  END;   
    
  -- process logic
  P_EXIT_CODE := -1;
  V_EXIT_MESSAGE := 'FAILED';
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                              I_LOGSID     => :logidi,
		                                      I_EVENT_NAME => :v_full_name,
		                                      I_MODULE     => 'EBGCFE');  
  DELETE FROM ui_seo_cto_vk_mapping;	                                      
  INSERT INTO ui_seo_cto_vk_mapping(cycle,product_group,seo,cto,vk,qty,action,status,change_id,change_action,
                              sys_created_date,sys_created_by,sys_last_modified_date,sys_last_modified_by)
  SELECT v_cur_cycle,p_product_group,matnr,stdpd,atnam,atwrt,NULL,NULL,NULL,NULL,CURRENT_TIMESTAMP,
         v_full_name,CURRENT_TIMESTAMP,v_full_name
   FROM pcdw.pcdw_seo_cto_vk_mapping;
      
  p_exit_code := 0;
  CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                              I_LOGSID     => :logidi,
	                                          I_EVENT_NAME => :v_full_name,
	                                          I_MODULE     => 'EBGCFE');       
END;
