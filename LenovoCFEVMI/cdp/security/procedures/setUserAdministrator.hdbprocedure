PROCEDURE "SECURITY"."cdp.security.procedures::setUserAdministrator" ( 		
    IN aUSER_ID BIGINT
   -- ,IN aCHECKED NVARCHAR(10)
	,OUT errorInfo  NVARCHAR(256) --"SECURITY"."cdp.security.data::userManagement.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "SECURITY"
	AS
	alogidk INTEGER :=0;
	aI_DETAIL NVARCHAR(300) :='';
	
	userExists Integer := 0;
	roleExists Integer := 0;
	
	aModule_ID  BIGINT;
	aMODULE_NAME NVARCHAR(256);
	
	aUSER_NAME NVARCHAR(256);    
     aCHECKED NVARCHAR(300);
     privilegeExists  NVARCHAR(300)  ;
     
    -- errorInfo001 "SECURITY"."cdp.security.data::userManagement.HttpError";
     
BEGIN
/************************************************************************************************************ 
	Write your procedure logic 
CALL "SECURITY"."cdp.security.procedures::setUserAdministrator"
		(1,?);

 *************************************************************************************************************/   
    

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.security.procedures::createMapAll error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	--如果产生异常，返回，并且告知异常。
    	CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'ERR'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::createMapAll"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
     	,I_DETAIL=>:aI_DETAIL);    	
 
 		errorInfo := :aI_DETAIL;
 		--select 400 as http_status_code, 
     	--	'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     	--	aI_DETAIL detail from dummy;
    END;
     
     call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'securityUserAdmin'		,privilegeExists           );
    IF  privilegeExists != 'OK' THEN
    errorInfo := :privilegeExists;
    --select 400 as http_status_code, 
    -- 		'SQL ERROR CODE : 0' error_message, 
     --		privilegeExists detail from dummy;
    	RETURN ;
    END IF;
    
 CALL  "SECURITY"."cdp.security.procedures::getSessionModuleIDForProc" (aMODULE_ID ,aMODULE_NAME);   
    --START
CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG',I_STATUS=>'START'
	,I_LOGSID=>:alogidk
	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::setUserAdministrator"'
	,I_MODULE=>:aMODULE_NAME); 

SELECT top 1 count(1) into userExists 
FROM "SECURITY"."cdp.security.data::userManagement.INFO_USER" A
,"SECURITY"."cdp.security.data::userManagement.MAP_MODULE_USER" B
WHERE A."USER_ID" = :aUSER_ID
AND A."USER_ID" = B."USER_ID"
AND B."MODULE_ID" = :aMODULE_ID;
  IF userExists =0 THEN
  errorInfo := 'USER IS NOT EXISTS.';
   RETURN ;
   ELSE
   SELECT "USER_NAME" INTO aUSER_NAME FROM "SECURITY"."cdp.security.data::userManagement.INFO_USER" 
   WHERE "USER_ID" = :aUSER_ID;
   
  END IF;
  --SELECT "MODULE_ID" INTO aMODULE_ID FROM "SECURITY"."cdp.security.data::userManagement.INFO_MODULE"
  --WHERE "MODULE_NAME" = :aMODULE_NAME;
  

--call "SECURITY"."cdp.security.procedures::checkPrivilegeByUserName" (	      
 --   'securityUserAdmin'		,:aUSER_NAME,aCHECKED           );

select top 1 count(*) into roleExists from "SECURITY"."cdp.security.data::userManagement.MAP_ALL" A
  where A."USER_ID" = :aUSER_ID
  AND A."ROLE_ID" IN (
	  SELECT "ROLE_ID" FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLES" D
	  WHERE D."MODULE_ID" = :aMODULE_ID
	  AND D."ROLE_NAME" = 'cdp.security.roles::userAdmin'
  )
  AND A."MODULE_ID" = :aMODULE_ID;
  

 IF roleExists = 0 THEN
  call "_SYS_REPO"."GRANT_ACTIVATED_ROLE"('cdp.security.roles::userAdmin',:aUSER_NAME);
   CALL "SECURITY"."cdp.security.procedures::createMapAllByName" ( 
		:aMODULE_NAME ,  
    	'',
    	'cdp.security.roles::userAdmin',  	--//role id  
    	'',
    	:aUSER_NAME,	?);
  ELSE
  call "_SYS_REPO"."REVOKE_ACTIVATED_ROLE"('cdp.security.roles::userAdmin',:aUSER_NAME);
  delete from "SECURITY"."cdp.security.data::userManagement.MAP_ALL" A
  where A."USER_ID" = :aUSER_ID
  AND A."ROLE_ID" IN (
	  SELECT "ROLE_ID" FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLES" D
	  WHERE D."MODULE_ID" = :aMODULE_ID
	  AND D."ROLE_NAME" = 'cdp.security.roles::userAdmin'
  )
  AND A."MODULE_ID" = :aMODULE_ID;
  END IF;
   --exec 'GRANT '||aGRANT_FROM_NAME||' TO ' || :aGRANT_TO_NAME;
   errorInfo := 'OK';

  
  aI_DETAIL := 'cdp.security.procedures::setUserAdministrator ('||:aUSER_NAME||' ,) successfully executed . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(
 		I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'END'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::setUserAdministrator"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'S000000016'
     	,I_DETAIL=>:aI_DETAIL);	  	 
  
END;