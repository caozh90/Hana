PROCEDURE "SECURITY"."cdp.security.procedures::createMapAllByName" ( 
	IN	aMODULE_NAME NVARCHAR(256),  
    IN	aROLEGROUP_NAME NVARCHAR(256),	--//rolegroup id	
    IN	aROLE_NAME NVARCHAR(256),  	--//role id  
    IN	aUSERGROUP_NAME NVARCHAR(256),  
    IN	aUSER_NAME NVARCHAR(256),
	OUT errorInfo "SECURITY"."cdp.security.data::userManagement.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "SECURITY"
	AS
	aROLEGROUP_ID BIGINT:=0;	--//rolegroup id	
    aROLE_ID BIGINT :=0;  	--//role id
    aMODULE_ID  BIGINT;
    aUSER_ID BIGINT :=0;
    aUSERGROUP_ID BIGINT:=0;
     
     alogidk INTEGER :=0;
	aI_DETAIL NVARCHAR(300) :='';
	
	aGRANT_FROM_NAME NVARCHAR(256) :='';
    aGRANT_TO_NAME NVARCHAR(256) :='';
        
    mapExists BIGINT;
    aID 	NVARCHAR(10);
    privilegeExists  NVARCHAR(300)  ;
BEGIN
/************************************************************************************************************ 
	Write your procedure logic 
1.如果给user添加role,直接创建一个新的row. 
     
2.如果给user_group添加role，则需要找到这个user_group下所有的user，并为每一个user生成一个row.

3.如果成功
则grant <FROM NAME> TO < TO NAME>

 *************************************************************************************************************/   
 
  DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299; 
    DECLARE EXIT HANDLER FOR no_data_found   
     BEGIN     
     --如果没有找到aROLE_ID ,则返回，同时告知不存在这个权限明细
		aI_DETAIL :='cdp.security.procedures::createInfoUser can not find the module : '||aMODULE_NAME ||' .';
     
	CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'ERR'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::createMapAll"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
     	,I_DETAIL=>:aI_DETAIL);    
     	
     	errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
     	
     	--,I_DETAIL=>'cdp.security.procedures::createUser can not find the role : '||aMODULE_PATH||'.roles::PUBLIC');
     END;     

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.security.procedures::createMapAll error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	--如果产生异常，返回，并且告知异常。
    	CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'ERR'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::createMapAll"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
     	,I_DETAIL=>:aI_DETAIL);    	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;
    
    /*
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'securityRoleAdmin'		,privilegeExists           );
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : 0' error_message, 
     		privilegeExists detail from dummy;
    	RETURN ;
    END IF;
    */
    
 SELECT "MODULE_ID" INTO aMODULE_ID 
 FROM "SECURITY"."cdp.security.data::userManagement.INFO_MODULE"
  WHERE "MODULE_NAME" = :aMODULE_NAME;
  
     IF aUSERGROUP_NAME='' THEN 
  --确定用户ＩＤ　是否存在
  --id 不存在则返回。
  --存在 则 开始计算
  --如果 rolegroup = 0 则，判断role 是否存在，并且不在已经拥有的权限当中，则
	  SELECT "USER_ID" INTO aUSER_ID
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_USER"
	  WHERE "USER_NAME" = :aUSER_NAME;
	  
  ELSE
	  SELECT "GROUP_ID" INTO aUSERGROUP_ID
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_GROUP"
	  WHERE "GROUP_NAME" = :aUSERGROUP_NAME
	  AND "MODULE_ID" = :aMODULE_ID;
	  
  END IF;
  
  IF aROLEGROUP_NAME='' THEN 
  --确定用户ＩＤ　是否存在
  --id 不存在则返回。
  --存在 则 开始计算
  --如果 rolegroup = 0 则，判断role 是否存在，并且不在已经拥有的权限当中，则
	  SELECT "ROLE_ID" INTO aROLE_ID
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLES"	  
	  WHERE "ROLE_NAME" = :aROLE_NAME
	  AND "MODULE_ID" = :aMODULE_ID;
	  	  
  ELSE
	  SELECT "ROLEGROUP_ID" INTO aROLEGROUP_ID
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLEGROUP"
	  WHERE "ROLEGROUP_NAME" = :aROLEGROUP_NAME
	  AND "MODULE_ID" = :aMODULE_ID;
	  
  END IF;
  
  
  
    --START
CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG',I_STATUS=>'START'
	,I_LOGSID=>:alogidk
	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::createMapAll"'
	,I_MODULE=>:aMODULE_NAME); 

 
  
  SELECT "MODULE_ID" INTO aMODULE_ID FROM "SECURITY"."cdp.security.data::userManagement.INFO_MODULE"
  WHERE "MODULE_NAME" = :aMODULE_NAME;
  
  
    IF aUserGroup_ID=0 THEN 
  --确定用户ＩＤ　是否存在
  --id 不存在则返回。
  --存在 则 开始计算
  --如果 rolegroup = 0 则，判断role 是否存在，并且不在已经拥有的权限当中，则
	  SELECT "USER_NAME" INTO aGRANT_TO_NAME
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_USER"
	  WHERE "USER_ID" = :aUSER_ID;
	  
  ELSE
	  SELECT "REAL_ROLE_NAME" INTO aGRANT_TO_NAME
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_GROUP"
	  WHERE "GROUP_ID" = :aUserGroup_ID
	  AND "MODULE_ID" = :aMODULE_ID;
	  
  END IF;
  
  IF aROLEGROUP_ID=0 THEN 
  --确定用户ＩＤ　是否存在
  --id 不存在则返回。
  --存在 则 开始计算
  --如果 rolegroup = 0 则，判断role 是否存在，并且不在已经拥有的权限当中，则
	  SELECT "ROLE_NAME" INTO aGRANT_FROM_NAME
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLES"
	  WHERE "ROLE_ID" = :aROLE_ID
	  AND "MODULE_ID" = :aMODULE_ID;
	  
  ELSE
	  SELECT "REAL_ROLE_NAME" INTO aGRANT_FROM_NAME
	  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLEGROUP"
	  WHERE "ROLEGROUP_ID" = :aROLEGROUP_ID
	  AND "MODULE_ID" = :aMODULE_ID;
	  
  END IF;
  
 --**##   call _SYS_REPO.GRANT_ACTIVATED_ROLE (aGRANT_FROM_NAME,:aGRANT_TO_NAME); 
   --exec 'GRANT '||aGRANT_FROM_NAME||' TO ' || :aGRANT_TO_NAME;
   
  select "SECURITY"."cdp.security.data::mapAllSeqId".NEXTVAL INTO aID FROM DUMMY;
  
  insert into "SECURITY"."cdp.security.data::userManagement.MAP_ALL"
			    ("ID" ,"MODULE_ID","GROUP_ID","USER_ID","ROLEGROUP_ID","ROLE_ID")
				 values (:aID,
				 :aModule_ID,
				:aUSERGROUP_ID, 
				 :aUSER_ID,
				 :aRoleGROUP_ID, 
				 :aROLE_ID );
				 
 
  
  aI_DETAIL := 'cdp.security.procedures::createMapAll ('||:aID||' ,) successfully executed . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(
 		I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'END'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::createMapAll"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'S000000016'
     	,I_DETAIL=>:aI_DETAIL);	  	 
     	
  
END;