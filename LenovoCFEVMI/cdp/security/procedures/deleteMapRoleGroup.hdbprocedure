PROCEDURE "SECURITY"."cdp.security.procedures::deleteMapRoleGroup" ( 
	IN	aID NVARCHAR(10)
	,OUT errorInfo "SECURITY"."cdp.security.data::userManagement.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "SECURITY"
	--READS SQL DATA 
	AS
	
	alogidk INTEGER :=0;
	aI_DETAIL NVARCHAR(300) :='';
	aMODULE_ID NVARCHAR(10);
	
	aMODULE_NAME	NVARCHAR(256);	
    aREAL_ROLE_NAME NVARCHAR(256);
    aROLE_NAME NVARCHAR(256); 
    
    aROLEGROUP_ID BIGINT;
    aROLEGROUP_ID_OTHER BIGINT;
    aROLE_ID BIGINT;   
    roleExists INTEGER :=0;
    privilegeExists  NVARCHAR(300)  ;
BEGIN
/***************************** 
	Write your procedure logic 
	将 一些用户从到某个用户组中 剔除。
	
	如果成功，则：
	REVOKE <role name> FROM <user name>/<role name>;

	
 *****************************/
 
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299; 
    DECLARE EXIT HANDLER FOR no_data_found   
     BEGIN     
     --如果没有找到aROLE_ID ,则返回，同时告知不存在这个权限明细
			aI_DETAIL :='cdp.security.procedures::deleteMapRoleGroup can not find the module : '||aMODULE_NAME ||' .';
     CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG'	
	     	,I_STATUS=>'ERR'
	     	,I_LOGSID=>:alogidk
	     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::deleteMapRoleGroup"'
	     	,I_MODULE=>:aMODULE_NAME
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL);
	     	
     	errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
     	
     	--,I_DETAIL=>'cdp.security.procedures::createUser can not find the role : '||aMODULE_PATH||'.roles::PUBLIC');
     END;     

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.security.procedures::deleteMapRoleGroup error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	--如果产生异常，返回，并且告知异常。
    	CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG'	
	     	,I_STATUS=>'ERR'
	     	,I_LOGSID=>:alogidk
	     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::deleteMapRoleGroup"'
	     	,I_MODULE=>:aMODULE_NAME
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END; 
  --CALL  "SECURITY"."cdp.security.procedures::getSessionModuleIDForProc" (aMODULE_ID ,aMODULE_NAME);  
  call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'securityRoleSetup'		,privilegeExists           );
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : 0' error_message, 
     		privilegeExists detail from dummy;
    	RETURN ;
    END IF;
  
  SELECT TOP 1
 	LEFT("SESSION_VALUE" ,10)  "MODULE_ID"
 	into aMODULE_ID 	
 	FROM "SECURITY"."cdp.security.data::userManagement.DATA_SESSION_CONTEXT" A
 	,"SECURITY"."cdp.security.data::userManagement.INFO_USER" B 	
 	WHERE A."SESSION_TYPE" = 'MODULE_ID'
 	AND A."USER_ID" = B."USER_ID" 	
 	AND B."USER_NAME" = SESSION_USER; 
 		
 	SELECT MODULE_NAME into aMODULE_NAME
    FROM "SECURITY"."cdp.security.data::userManagement.INFO_MODULE" 
    WHERE "MODULE_ID" = :aMODULE_ID;
     
   --START
CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(I_EVENT_TYPE=>'SEC_LOG',I_STATUS=>'START'
	,I_LOGSID=>:alogidk
	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::deleteMapRoleGroup"'
	,I_MODULE=>:aMODULE_NAME); 
	

  
  
  
 
  SELECT B."REAL_ROLE_NAME" ,B."ROLEGROUP_ID"
  INTO aREAL_ROLE_NAME  ,aROLEGROUP_ID
  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLEGROUP" B
  --,"SECURITY"."cdp.security.data::userManagement.INFO_ROLES" A
  ,"SECURITY"."cdp.security.data::userManagement.MAP_ROLEGROUP_ROLE" C
  WHERE C."ROLEGROUP_ID" = B."ROLEGROUP_ID"
  --AND C."ROLE_ID" = A."ROLE_ID"
  AND C."ID" = :aID   
  --AND C."MODULE_ID" = :aMODULE_ID
  AND B."MODULE_ID" = C."MODULE_ID"
  ;
  
    
     SELECT A."ROLE_NAME" ,A."ROLE_ID"
  INTO aROLE_NAME  ,aROLE_ID
  FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLES" A
  ,"SECURITY"."cdp.security.data::userManagement.MAP_ROLEGROUP_ROLE" C
  WHERE C."ROLE_ID" = A."ROLE_ID"
  AND C."ID" = :aID   
  --AND C."MODULE_ID" = :aMODULE_ID
  AND A."MODULE_ID" = C."MODULE_ID"
  ;
  
  --WHERE ROLE_ID = :aROLE_ID AND ROLEGROUP_ID = :aROLEGROUP_ID AND MODULE_ID = :aMODULE_ID
  --;
  
  --**## CALL _SYS_REPO.REVOKE_ACTIVATED_ROLE(aROLE_NAME,aREAL_ROLE_NAME);
  --CALL _SYS_REPO.REVOKE_ACTIVATED_ROLE('cdp.security.roles::Base','cdp.security.cdr.rolegroup::1000000002');
  
     	
  
  --exec 'REVOKE "'||:aROLE_NAME ||'" FROM "'||:aREAL_ROLE_NAME||'"';
   
    SELECT ROLEGROUP_ID into aROLEGROUP_ID_OTHER
    FROM "SECURITY"."cdp.security.data::userManagement.INFO_ROLEGROUP" 
    WHERE "MODULE_ID" = :aMODULE_ID AND "ROLEGROUP_NAME" = 'Other Roles';
 
  	--要将在这个模块当中的 \并且不再 group 当中的用户，加入到缺省的 public group当中来。
 	
 	 
   
  	SELECT top 1 count(1) into roleExists FROM "SECURITY"."cdp.security.data::userManagement.MAP_ROLEGROUP_ROLE" A    	
     WHERE "MODULE_ID" = :aMODULE_ID      
     AND "ROLE_ID" = :aROLE_ID 
     AND "ID" <> :aID;
     if  :roleExists = 0 then
  	
  insert into "SECURITY"."cdp.security.data::userManagement.MAP_ROLEGROUP_ROLE"
	    ("ID" ,"ROLEGROUP_ID","ROLE_ID" ,"MODULE_ID")
	    VALUES( "SECURITY"."cdp.security.data::mapRoleGroupRoleSeqId".NEXTVAL
	    ,:aROLEGROUP_ID_OTHER,:aROLE_ID ,:aMODULE_ID );

	    END IF;


DELETE FROM "SECURITY"."cdp.security.data::userManagement.MAP_ROLEGROUP_ROLE"
   WHERE ID = :aID;
  
  
 	--如果成功添加,则log添加成功！
	    aI_DETAIL := 'cdp.security.procedures::deleteMapRoleGroup ('||:aROLEGROUP_ID||' ,) successfully executed . '
	    ||:aROLE_ID||:aMODULE_ID;
 		CALL "EX_LOG"."cdp.log.procedures::logProcBASE"(
 		I_EVENT_TYPE=>'SEC_LOG'	
     	,I_STATUS=>'END'
     	,I_LOGSID=>:alogidk
     	,I_EVENT_NAME=>'"SECURITY"."cdp.security.procedures::deleteMapRoleGroup"'
     	,I_MODULE=>:aMODULE_NAME
     	,I_MESSAGE=>'S000000024'
     	,I_DETAIL=>:aI_DETAIL);	
    
END;