PROCEDURE "MXEBGVMI"."cdp.mxebgvmi.procedures.pkg_ui.ui_create_cycle_time::updateUiCreateCycleTime" ( 
    IN "TPL_ID" VARCHAR(40),
    IN "PULL_TYPE" VARCHAR(20),
    IN "EVENT_TYPE" VARCHAR(64),
    IN "CYCLE_TIME" DECIMAL(10,2)
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "MXEBGVMI"
    --READS SQL DATA
    /************************************************************************
    *name      :                     updateUiOptionDestMapping
    *function    :               
    *input     ：               newInfo,oldInfo
    *output     :    errorInfo            
    *author     :                     FangYuan
    *CreateDate    :                  2014.12.30
    *UpdateDate  :        
    *************************************************************************/ 
    AS
        path varchar(100):='cdp.mxebgvmi.procedures.pkg_ui.';
        proc_name varchar(100) :='updateUiCreateCycleTime';
        delta int;
        sys_last_modified_date TIMESTAMP;
        log_detail NVARCHAR(300) :='';
        logid0 INTEGER :=0;
        
        sessionuser varchar(100);
        create_time TIMESTAMP;
       
    privilegeExists  NVARCHAR(300)  ;
BEGIN
    --exception     
     
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
        CALL "EX_LOG"."cdp.log.procedures::logProc"
            (I_TYPE=>'PROC_ERROR',I_LOGSID=>:logid0,
            I_EVENT_NAME=>:path||'::'||:proc_name, I_MODULE=>'MXEBGVMI',
            I_MESSAGE=>'ERROR', I_DETAIL=>'Failure!'||to_char(::SQL_ERROR_CODE) || ':' ||::SQL_ERROR_MESSAGE);
            
        errorInfo = select 400 as http_status_code, 
            'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
            ::SQL_ERROR_MESSAGE detail from dummy;               
    END; 

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'createcyceltime::editable'		,privilegeExists           );
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : 0' error_message, 
     		privilegeExists detail from dummy;
    	RETURN ;
    END IF;
    --procedure begin
    
    
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',I_LOGSID=>:logid0,
                                               I_EVENT_NAME=>:path||'::'||:proc_name,I_MODULE=>'MXEBGVMI',
                                               I_DETAIL=>:path||'::'||:proc_name||' Start!');
    
    select session_user into sessionuser from dummy;
    select CURRENT_TIMESTAMP into create_time from dummy;

            
         --update操作需要写入日志
        insert into "MXEBGVMI"."UI_CREATE_CYCLETIME_LOG"(
                AT_MODIFIED_BY,AT_ACTION,AT_MODIFIED_TIME,
                "TPL_ID",
                "PULL_TYPE",
                "EVENT_TYPE",
                "CYCLE_TIME",
                SYS_LAST_MODIFIED_BY,
                SYS_LAST_MODIFIED_DATE
            )
        SELECT
                :sessionuser,
                'update',
                :create_time,
                :TPL_ID,
                :PULL_TYPE,
                :EVENT_TYPE,
                :CYCLE_TIME, 
                :sessionuser,
                :create_time
         FROM dummy;              
        
        UPDATE UI_CREATE_CYCLETIME SET
        (
         "CYCLE_TIME",
         SYS_LAST_MODIFIED_BY,
         SYS_LAST_MODIFIED_DATE)
         =
         (
          :CYCLE_TIME,
          :sessionuser,
          :create_time)
          WHERE TPL_ID=:TPL_ID AND PULL_TYPE = :PULL_TYPE AND EVENT_TYPE =:EVENT_TYPE;
        
            
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logid0,
                                               I_EVENT_NAME=>:path||'::'||:proc_name,I_MODULE=>'MXEBGVMI',
                                               I_DETAIL=>:path||'::'||:proc_name||'  END!');
END;