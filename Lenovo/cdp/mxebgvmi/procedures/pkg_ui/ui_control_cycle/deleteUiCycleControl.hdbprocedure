PROCEDURE "MXEBGVMI"."cdp.mxebgvmi.procedures.pkg_ui.ui_control_cycle::deleteUiCycleControl" ( 
			IN newInfo "MXEBGVMI"."cdp.mxebgvmi.data::MXEBGVMI_T.UI_CONTROL_CYCLE_T",
			OUT errorInfo "MXEBGVMI"."cdp.mxebgvmi.data::MXEBGVMI_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
		aItem NVARCHAR(40);
		aLogicPlant NVARCHAR(40);
		aPhysicPlant NVARCHAR(40);
		
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		privilegeExists  NVARCHAR(300)  ;
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.mxebgvmi.procedures::deleteUiCycleControl error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.mxebgvmi.procedures::deleteUiCycleControl'
	     	,I_MODULE=>'MXEBGVMI'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  
  
  call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'controlcycle::deleteable'		,privilegeExists           );
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : 0' error_message, 
     		privilegeExists detail from dummy;
    	RETURN ;
    END IF;
    
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.mxebgvmi.procedures::deleteUiCycleControl'
       ,I_MODULE=>'MXEBGVMI'
   	);
   	
 select
    ITEM,
    LOGICAL_PLANT,
    PHYSICAL_PLANT
 into
 	aItem,  	
 	aLogicPlant,
	aPhysicPlant
 from :newInfo; 
 
   	--delete log
  	insert into "MXEBGVMI"."UI_CONTROL_CYCLE_LOG"
  	(ITEM, LOGICAL_PLANT, PHYSICAL_PLANT, WAREHOUSE_NUMBER, STORAGE_LOCATION, STORAGE_TYPE, STORAGE_BIN,SYS_SOURCE,
  	AT_MODIFIED_BY,
	AT_ACTION,
	AT_MODIFIED_TIME
  	)
  	select 
  	ITEM, LOGICAL_PLANT, PHYSICAL_PLANT, WAREHOUSE_NUMBER, STORAGE_LOCATION, STORAGE_TYPE, STORAGE_BIN,SYS_SOURCE,
  	 SESSION_USER,
     'delete',
     CURRENT_DATE
   from "MXEBGVMI"."UI_CONTROL_CYCLE"
  	where ITEM = :aItem
  	      and LOGICAL_PLANT = :aLogicPlant 
          and PHYSICAL_PLANT = :aPhysicPlant;

  --delete
  delete from "MXEBGVMI"."UI_CONTROL_CYCLE"
  	where ITEM = :aItem
  	      and LOGICAL_PLANT = :aLogicPlant 
          and PHYSICAL_PLANT = :aPhysicPlant;

  	          
          
 /*END*/
 	    aI_DETAIL := 'cdp.mxebgvmi.procedures::deleteUiCycleControl ('||:aItem||' ,) successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.mxebgvmi.procedures::deleteUiCycleControl'
	     	,I_MODULE=>'MXEBGVMI'
	     	,I_DETAIL=>:aI_DETAIL
     	);
     		          
END;