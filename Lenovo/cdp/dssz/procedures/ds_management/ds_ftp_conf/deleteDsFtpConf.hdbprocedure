PROCEDURE "DS_INFO_SZ"."cdp.dssz.procedures.ds_management.ds_ftp_conf::deleteDsFtpConf" ( 
IN newInfo "DS_INFO_SZ"."DS_FTP_CONF",
OUT errorInfo "DS_INFO_SZ"."cdp.dssz.data::DS_INFO_SZ_T.HttpError"
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
/************************************************************************
*name      : createDsFtpConf              --函数名
*function  : 在表DS_FTP_CONF中创建数据              --函数功能
*input     ：    			--输入参数
*output    :                --输出参数
*author     : Gavin               --作者
*CreateDate    : 2015-1-14       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/
	 PROCESS_NAME VARCHAR(100);
	 PROCESS_RID VARCHAR(50);


	 n int;
	 error_message nvarchar(1024);
	 	privilegeExists  NVARCHAR(30) ;
	 path varchar(100):='cdp.ds.procedures.ds_management.ds_ftp_conf';
	 proc_name varchar(100) :='deleteDsFtpConf';
	 logid0 INTEGER :=0;
BEGIN
	--验证权限
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (	      
    'configuration::access'		,privilegeExists           );
    IF  :privilegeExists != 'OK' THEN
   	 	errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : 0' error_message, 
     		:privilegeExists detail from dummy;
    	RETURN ;
    END IF;
    --start log
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',I_LOGSID=>:logid0,
                                               I_EVENT_NAME=>:path||'::'||:proc_name,I_MODULE=>'DS',
                                               I_DETAIL=>:path||'::'||:proc_name||' Start!');
    
	select 
	 PROCESS_NAME,
	 PROCESS_RID 
	into
	 PROCESS_NAME,
	 PROCESS_RID
	from :newInfo;
	
	select count(1) into n from "DS_INFO_SZ"."DS_FTP_CONF"
	where PROCESS_NAME = :PROCESS_NAME AND PROCESS_RID = :PROCESS_RID;
	
	if(n<=0) then
		error_message := '"PROCESS_NAME"('||:PROCESS_NAME||') and "PROCESS_RID"('||:PROCESS_RID
		||')::The record does not exist!';
		errorInfo = select 400 as http_status_code, 
	    	'ERROR' ERROR_MESSAGE, 
	    	:error_message DETAIL from dummy;
	    return;
	end if;
	
	delete from "DS_INFO_SZ"."DS_FTP_CONF"
	where PROCESS_NAME = :PROCESS_NAME AND PROCESS_RID = :PROCESS_RID;
	--end log
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logid0,
                                               I_EVENT_NAME=>:path||'::'||:proc_name,I_MODULE=>'DS',
                                               I_DETAIL=>:path||'::'||:proc_name||'  END!');
END;