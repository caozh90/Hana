PROCEDURE "EBGDF"."cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime" 
( 
         IN newInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_LEADTIME_T",
		 IN oldInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_LEADTIME_T",
		 OUT errorInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	
/************************************************************************
*name        :      updateUileadtime
*function    :               
*input       ï¼š                 newInfo&oldInfo
*output      :      errorInfo
*author      :      billy Qiao
*CreateDate  :      2015.8.21
*UpdateDate  :      2015.8.21  
*************************************************************************/
	
	AS
	
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	v_resourceExists BIGINT;
	privilegeExists  NVARCHAR(300)  ; 
	
	V_CYCLE_ID NVARCHAR(9);
	V_MFI_FFI_FC_IND NVARCHAR(3);
	V_MFI_FFI_FC NVARCHAR(20);
	V_PPN NVARCHAR(12);
	V_ABCD_T NVARCHAR(15);
	V_ABCD NVARCHAR(1);
	V_LEADTIME NVARCHAR(3);
	
	v_sameKey BIGINT;
	v_sameValues BIGINT;
	
BEGIN
--Exception Defination
	DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

--Exception Handler Defination
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			aI_DETAIL := 'cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
			
	    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
		    	 I_TYPE=>'PROC_ERROR'	
		     	,I_LOGSID=>:alogide
		     	,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime'
		     	,I_MODULE=>'EBGDF'
		     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
		     	,I_DETAIL=>:aI_DETAIL
	     	);	
	 
	 		errorInfo = select 400 as http_status_code, 
	     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
	     		aI_DETAIL detail from dummy;
			
		END;

--Check Privilege
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_lead_time::editable',privilegeExists);
    
    IF  privilegeExists != 'OK' THEN
    	errorInfo = select 400 as http_status_code, 
              'NO AUTHORITY' error_message, 
              privilegeExists detail from dummy;
       	RETURN ;
    END IF;

--Log Start
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
		    I_TYPE=>'PROC_START',
	        I_LOGSID=>:alogide,
	        I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime',
	        I_MODULE=>'EBGDF'
	   	); 

--Get data from records(newInfo) to be updated
	select
		CYCLE_ID,
		MFI_FFI_FC_IND,
		MFI_FFI_FC,
		PPN,
		ABCD_T,
		ABCD,
		LEADTIME
	into
		V_CYCLE_ID,
		V_MFI_FFI_FC_IND,
		V_MFI_FFI_FC,
		V_PPN,
		V_ABCD_T,
		V_ABCD,
		V_LEADTIME
	from
		:newInfo
	;--end select;		

--Data validation, newInfo and oldInfo have same key
	select
		count(*)
	into
		v_sameKey
	from
		:oldInfo
	where
		MFI_FFI_FC_IND = :V_MFI_FFI_FC_IND
		and MFI_FFI_FC = :V_MFI_FFI_FC
		and ppn = :V_PPN
	;--end select;
	
	if v_sameKey < 1 then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'different key between newInfo and oldInfo';
	end if;

--Data validation, newInfo and oldInfo are different
	select
		count(*)
	into
		v_sameValues
	from
		:oldInfo
	where
		CYCLE_ID = :V_CYCLE_ID
		and MFI_FFI_FC_IND = :V_MFI_FFI_FC_IND
		and MFI_FFI_FC = :V_MFI_FFI_FC
		and PPN = :V_PPN
		and ABCD_T = :V_ABCD_T
		and ABCD = :V_ABCD
		and LEADTIME = :V_LEADTIME
	;--end select;
	
	if v_sameValues > 0 then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'no different between newInfo and oldInfo';
	end if;

--Data validation, key must not be null
	if V_MFI_FFI_FC_IND = '' or V_MFI_FFI_FC_IND is null then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'MFI_FFI_FC_IND should not be null';
	end if;
	
	if V_MFI_FFI_FC = '' or V_MFI_FFI_FC is null then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'MFI_FFI_FC should not be null';
	end if;

--Data validation, record exists in DB
	select
		count(*)
	into
		v_resourceExists
	from
		"EBGDF"."RPT_LEADTIME"
	where
		MFI_FFI_FC_IND = :V_MFI_FFI_FC_IND
		and MFI_FFI_FC = :V_MFI_FFI_FC
		and PPN = :V_PPN
	;--end select;
	
	if v_resourceExists < 1 then
		SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record does not exist in DB';
	end if;

--Update DB
	update
		"EBGDF"."RPT_LEADTIME"
	set
		LEADTIME 			= ( SELECT LEADTIME FROM "EBGDF"."UI_LTVALUE" WHERE ABCD = :V_ABCD ),
		--CASE :V_ABCD WHEN 'A' THEN '7'
		--		             			 WHEN 'B' THEN '12'
		--		             			 WHEN 'C' THEN '15'
		--		             			 WHEN 'D' THEN 'D'
		--		              END
		--:LEADTIME,
		--CREATE_TS 			= CURRENT_UTCTIMESTAMP,
		--CREATE_USERID 		= SESSION_USER,
		LAST_UPDATE_TS 		= CURRENT_UTCTIMESTAMP,
		LAST_UPDATE_USERID	= SESSION_USER
	where
		MFI_FFI_FC_IND = :V_MFI_FFI_FC_IND
		and MFI_FFI_FC = :V_MFI_FFI_FC
		and PPN = :V_PPN
	;--end update;

--Insert log table
	insert into
		"EBGDF"."RPT_LEADTIME_LOG"(
			CYCLE_ID,
			MFI_FFI_FC_IND,
			MFI_FFI_FC,
			PPN,
			ABCD_T,
			ABCD,
			LEADTIME,
			CREATE_TS,
			CREATE_USERID,
			LAST_UPDATE_TS,
			LAST_UPDATE_USERID,
			AT_MODIFIED_BY,
			AT_ACTION,
			AT_MODIFIED_ON,
			AT_MILLIS
		)values(
			:V_CYCLE_ID,
			:V_MFI_FFI_FC_IND,
			:V_MFI_FFI_FC,
			:V_PPN,
			:V_ABCD_T,
			:V_ABCD,
			:V_LEADTIME,
			CURRENT_UTCTIMESTAMP,		--CREATE_TS
			SESSION_USER,			--CREATE_USERID
			CURRENT_UTCTIMESTAMP,		--LAST_UPDATE_TS
			SESSION_USER,			--LAST_UPDATE_USERI
			SESSION_USER,			--AT_MODIFIED_BY
			'update',				--AT_ACTION
			CURRENT_UTCTIMESTAMP,		--AT_MODIFIED_ON
			TO_DECIMAL( TO_VARCHAR( CURRENT_UTCTIMESTAMP, 'HH24MISSFF3' ) )	--AT_MILLIS
		)
	;--end insert

--Log End
	aI_DETAIL := 'cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime successfully updated . ';
	
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
		I_TYPE=>'PROC_END',
		I_LOGSID=>:alogide,
		I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_lead_time::updateUileadtime',
		I_MODULE=>'EBGDF',
		I_DETAIL=>:aI_DETAIL
	);

END;