PROCEDURE "EBGDF"."cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass" ( 
         IN newInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_MAX_CLASS_T",
		 IN oldInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_MAX_CLASS_T",
		 OUT errorInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
/************************************************************************
*name        :      updateUimaxclass
*function    :               
*input       ï¼š                 newinfo&oldInfo
*output      :      errorInfo
*author      :      leon bian
*CreateDate  :      2015.9.10
*UpdateDate  :      2015.9.10
*************************************************************************/
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	resourceExists BIGINT;
	privilegeExists  NVARCHAR(300)  ; 
BEGIN

DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass'
	     	,I_MODULE=>'EBGDF'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_max_class::editable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'NO AUTHORITY' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
      
CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass'
       ,I_MODULE=>'EBGDF'
   	); 
		   	
SELECT COUNT(*) into resourceExists 
	FROM :oldInfo a,:newInfo b 
where a.MAX_CLASS = b.MAX_CLASS;

if resourceExists > 0
then
	/*errorInfo = select 400 as http_status_code, 
	     		'the record is same as before' error_message, 
	     		'the record is same as before' DETAIL from dummy;	     		
	     	return;*/
	 --SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record do not exists'; 
	 return;
end if;			
--update into UI_MAX_CLASS table
update "EBGDF"."UI_MAX_CLASS" a set (a.MAX_CLASS,
										a.LAST_UPDATE_TS,
										a.LAST_UPDATE_USERID) = 
									 (b.MAX_CLASS,
									  CURRENT_UTCTIMESTAMP,
									  SESSION_USER)
		FROM :newInfo b 
		where a.MT = b.MT; 

--insert log table
--INSERT INTO UI_MAX_CLASS_LOG TABLE
insert into "EBGDF"."UI_MAX_CLASS_LOG"(
	MT,
	MAX_CLASS,
	CREATE_TS,
	CREATE_USERID,
	LAST_UPDATE_TS,
	LAST_UPDATE_USERID,
	AT_MODIFIED_BY,
	AT_ACTION,
	AT_MODIFIED_ON,
	AT_MILLIS
	 )SELECT 
	        a.MT,
			MAX_CLASS,
			CURRENT_UTCTIMESTAMP,
		    SESSION_USER,
		    CURRENT_UTCTIMESTAMP,
		    SESSION_USER,
	 		SESSION_USER,
	 		'update',
	 		CURRENT_UTCTIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_UTCTIMESTAMP,'HH24MISSFF3')) FROM :oldInfo a; 	

   	
aI_DETAIL := 'cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass successfully updated . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_max_class::updateUimaxclass'
	     	,I_MODULE=>'EBGDF'
	     	,I_DETAIL=>:aI_DETAIL
     	);
END;