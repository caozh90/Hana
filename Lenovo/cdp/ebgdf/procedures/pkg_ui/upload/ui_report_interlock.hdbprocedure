PROCEDURE "EBGDF"."cdp.ebgdf.procedures.pkg_ui.upload::ui_report_interlock" 
(
	IN newInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_REPORTINTERLOCK_S"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA  
/***************************** 
*name        :    ui_report_interlock
*function    :               
*input       :    
*output      :              
*author      :    bianzh1
*UpdateDate  :             
*DeleteDate  : 
*CreateDate:      2015.08.17
 *****************************/
	AS
	path varchar(100):='cdp.egbdf.procedures.pkg_ui.upload';
	proc_name varchar(100) :='ui_report_interlock';
 	sys_last_modified_date TIMESTAMP;
	log_detail NVARCHAR(300) :='';
	n int;
	ns int;
	currentUser varchar(100);
	create_time TIMESTAMP;
	business_code nvarchar(20);
	business_name nvarchar(100);
	table_name varchar(1000) := 'RPT_INTERLOCK';
	validate int;
BEGIN
	--exception     
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299; 
    DECLARE EXIT HANDLER FOR no_data_found   
     BEGIN      
     	--call "EBGDF"."cdp.ebgdf.procedures.pkg_ui.upload::ui_report_interlock_err"(::SQL_ERROR_MESSAGE,:business_name,:SEQ,:position,
		--	:ABCD_T,:SBB_OPT,:SBB_DES,:MFI_FFI_FC_IND,:GAD,:LOD,:PPN,:PP_DES,:SUPPLIER,:LENOVO_PPN_OHQ,:PPN_HIQ,
		--	:SBB_3M_FORECAST,:SBB_3M_SHIPMENT,:PPN_3M_SHIPMENT,:PRIOR_ABCD,:REC_ABCD);
     END;     

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	--call "EBGDF"."cdp.ebgdf.procedures.pkg_ui.upload::ui_report_interlock_err"(::SQL_ERROR_MESSAGE,:business_name,:SEQ,:position,
		--	:ABCD_T,:SBB_OPT,:SBB_DES,:MFI_FFI_FC_IND,:GAD,:LOD,:PPN,:PP_DES,:SUPPLIER,:LENOVO_PPN_OHQ,:PPN_HIQ,
		--	:SBB_3M_FORECAST,:SBB_3M_SHIPMENT,:PPN_3M_SHIPMENT,:PRIOR_ABCD,:REC_ABCD);
    END; 
       
	--procedure begin

	select top 1 SEQ,BUSINESS_NAME into business_code,business_name  from :newInfo;
	
	--赋值时间戳和用户名
	SELECT SESSION_USER INTO currentUser FROM DUMMY;
	SELECT CURRENT_UTCTIMESTAMP INTO create_time FROM DUMMY;
	
	update_info = SELECT *
				 	FROM :newInfo as a
				 	WHERE EXISTS ( select 1 from "EBGDF"."RPT_INTERLOCK" 
									where SBB_OPT = a.SBB_OPT
									AND PPN = a.PPN 
									AND SUPPLIER = a.SUPPLIER);
											
	--validate key
	SELECT count(1) into n
	 	FROM :update_info;

	if n>0 then
		update "EBGDF"."RPT_INTERLOCK" a
		set (SBB_DES,GAD,LOD,PP_DES,MFI_FFI_FC_IND,REC_ABCD,LAST_UPDATE_TS,LAST_UPDATE_USERID)=
		    (b.SBB_DES,b.GAD,b.LOD,b.PP_DES,b.MFI_FFI_FC_IND,b.REC_ABCD,:create_time,:currentUser)
	    FROM "EBGDF"."RPT_INTERLOCK" a,:update_info b
		where a.SBB_OPT = b.SBB_OPT 
		AND a.PPN = b.PPN 
		AND a.SUPPLIER = b.SUPPLIER  ;
	
		--update操作需要写入日志
		insert into "EBGDF"."RPT_INTERLOCK_LOG"(
									ABCD_T,
								    SBB_OPT,
								    SBB_DES,
								    MFI_FFI_FC_IND,
								    GAD,
								    LOD,
								    PPN,
								    PP_DES,
								    SUPPLIER,
								    LENOVO_PPN_OHQ,
								    PPN_HIQ,
								    SBB_3M_FORECAST,
								    SBB_3M_SHIPMENT,
								    PPN_3M_SHIPMENT,
								    PRIOR_ABCD,
								    REC_ABCD,
								    CREATE_TS,
								    CREATE_USERID,
								    LAST_UPDATE_TS,
								    LAST_UPDATE_USERID,
									AT_MODIFIED_BY,
									AT_ACTION,
									AT_MODIFIED_ON,
									AT_MILLIS
	 ) select ABCD_T,
			SBB_OPT,
			SBB_DES,
			MFI_FFI_FC_IND,
			GAD,
			LOD,
			PPN,
			PP_DES,
			SUPPLIER,
			LENOVO_PPN_OHQ,
			PPN_HIQ,
			SBB_3M_FORECAST,
			SBB_3M_SHIPMENT,
			PPN_3M_SHIPMENT,
			PRIOR_ABCD,
			REC_ABCD,
		    :create_time,
		    :currentUser,
		    :create_time,
		    :currentUser,
	 		:create_time,
	 		'update',
	 		:create_time,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_UTCTIMESTAMP,'HH24MISSFF3'))
		from :update_info;
	END IF; 
	
	INSERT_INFO = SELECT *
				 	FROM :newInfo as a
				 	WHERE NOT EXISTS ( select 1 from "EBGDF"."RPT_INTERLOCK" 
										where SBB_OPT = a.SBB_OPT
										AND PPN = a.PPN 
										AND SUPPLIER = a.SUPPLIER);
	SELECT count(1) into ns
	 	FROM :INSERT_INFO;
	if ns>0 then
		INSERT INTO "EBGDF"."RPT_INTERLOCK"( ABCD_T,
										     SBB_OPT,
										     SBB_DES,
										     MFI_FFI_FC_IND,
										     GAD,
										     LOD,
										     PPN,
										     PP_DES,
										     SUPPLIER,
										     LENOVO_PPN_OHQ,
										     PPN_HIQ,
										     SBB_3M_FORECAST,
										     SBB_3M_SHIPMENT,
										     PPN_3M_SHIPMENT,
										     PRIOR_ABCD,
										     REC_ABCD,
										     CREATE_TS,
										     CREATE_USERID,
										     LAST_UPDATE_TS,
										     LAST_UPDATE_USERID )
	 	select   ABCD_T,
			     SBB_OPT,
			     SBB_DES,
			     MFI_FFI_FC_IND,
			     GAD,
			     LOD,
			     PPN,
			     PP_DES,
			     SUPPLIER,
			     LENOVO_PPN_OHQ,
			     PPN_HIQ,
			     SBB_3M_FORECAST,
			     SBB_3M_SHIPMENT,
			     PPN_3M_SHIPMENT,
			     PRIOR_ABCD,
			     REC_ABCD,
			    :create_time,
			    :currentUser,
			    :create_time,
			    :currentUser
		from :INSERT_INFO;
	 	
	 	--insert操作需要写入日志
		insert into "EBGDF"."RPT_INTERLOCK_LOG"(
									ABCD_T,
								    SBB_OPT,
								    SBB_DES,
								    MFI_FFI_FC_IND,
								    GAD,
								    LOD,
								    PPN,
								    PP_DES,
								    SUPPLIER,
								    LENOVO_PPN_OHQ,
								    PPN_HIQ,
								    SBB_3M_FORECAST,
								    SBB_3M_SHIPMENT,
								    PPN_3M_SHIPMENT,
								    PRIOR_ABCD,
								    REC_ABCD,
								    CREATE_TS,
								    CREATE_USERID,
								    LAST_UPDATE_TS,
								    LAST_UPDATE_USERID,
									AT_MODIFIED_BY,
									AT_ACTION,
									AT_MODIFIED_ON,
									AT_MILLIS
	 ) select ABCD_T,
			SBB_OPT,
			SBB_DES,
			MFI_FFI_FC_IND,
			GAD,
			LOD,
			PPN,
			PP_DES,
			SUPPLIER,
			LENOVO_PPN_OHQ,
			PPN_HIQ,
			SBB_3M_FORECAST,
			SBB_3M_SHIPMENT,
			PPN_3M_SHIPMENT,
			PRIOR_ABCD,
			REC_ABCD,
		    :create_time,
		    :currentUser,
		    :create_time,
		    :currentUser,
	 		:create_time,
	 		'update',
	 		:create_time,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_UTCTIMESTAMP,'HH24MISSFF3'))
		from :INSERT_INFO; 		 	
	END IF;
		
		call "EBGDF"."cdp.ebgdf.procedures.pkg_ui.upload::business_info"(
			:table_name || :business_code,:business_name,:ns,0,:table_name);
END;
