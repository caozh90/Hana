PROCEDURE "EBGDF"."cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass" 
( 
	IN newinfo  "EBGDF"."cdp.ebgdf.data::EBGDF_T.UI_PNCLASS_T",
	OUT errorInfo "EBGDF"."cdp.ebgdf.data::EBGDF_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
/************************************************************************
*name        :      createUipnclass
*function    :               
*input       ï¼š                 newinfo
*output      :      errorInfo
*author      :      leon bian
*CreateDate  :      2015.8.20
*UpdateDate  :      2015.8.20
*************************************************************************/
	AS
	aI_DETAIL NVARCHAR(300) :='';
	alogide INTEGER :=0;
	privilegeExists  NVARCHAR(300); 
	v_resourceExists BIGINT;
	V_CYCLE_ID NVARCHAR(9);
	V_MFI_FFI_FC_IND NVARCHAR(3);
	V_MFI_FFI_FC NVARCHAR(20);
	V_PPN NVARCHAR(12);
	V_ABCD_T NVARCHAR(15);
	V_LOD LONGDATE;
	V_ABCD NVARCHAR(1);
	V_ABCD_1 NVARCHAR(1);
	V_ABCD_2 NVARCHAR(1);
	V_ABCD_3 NVARCHAR(1);
	V_ABCD_4 NVARCHAR(1);
	V_ABCD_5 NVARCHAR(1);
BEGIN
DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;

DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass'
	     	,I_MODULE=>'EBGDF'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_pn_class::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'NO AUTHORITY' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
      
CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass'
       ,I_MODULE=>'EBGDF'
   	); 
   	
select CYCLE_ID,
	   MFI_FFI_FC_IND,
	   MFI_FFI_FC,
	   PPN,
	   ABCD_T,
	   LOD,
	   ABCD,
	   ABCD_1,
	   ABCD_2,
	   ABCD_3,
	   ABCD_4,
	   ABCD_5
into   V_CYCLE_ID,
	   V_MFI_FFI_FC_IND,
	   V_MFI_FFI_FC,
	   V_PPN,
	   V_ABCD_T,
	   V_LOD,
	   V_ABCD,
	   V_ABCD_1,
	   V_ABCD_2,
	   V_ABCD_3,
	   V_ABCD_4,
	   V_ABCD_5
from :newInfo;  
	
select count(1) into v_resourceExists from "EBGDF"."RPT_PN_CLASS" 
where MFI_FFI_FC_IND = :V_MFI_FFI_FC_IND
  and MFI_FFI_FC = :V_MFI_FFI_FC
  AND PPN = :V_PPN; 

--if item exits in database
if  :v_resourceExists > 0 
    then
	    /*errorInfo = select 400 as http_status_code, 
	     		'the record exists' error_message, 
	     		'the record exists' DETAIL from dummy;
	     		
	     	return;*/
	    SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists';
	    
end if;	

--insert into RPT_PN_CLASS table

insert into "EBGDF"."RPT_PN_CLASS"( CYCLE_ID,
								   MFI_FFI_FC_IND,
								   MFI_FFI_FC,
								   PPN,
								   ABCD_T,
								   LOD,
								   ABCD,
								   ABCD_1,
								   ABCD_2,
								   ABCD_3,
								   ABCD_4,
								   ABCD_5,
								   CREATE_TS,
								   CREATE_USERID,
								   LAST_UPDATE_TS,
								   LAST_UPDATE_USERID
									) 
	values (V_CYCLE_ID,
	   V_MFI_FFI_FC_IND,
	   V_MFI_FFI_FC,
	   V_PPN,
	   V_ABCD_T,
	   V_LOD,
	   V_ABCD,
	   V_ABCD_1,
	   V_ABCD_2,
	   V_ABCD_3,
	   V_ABCD_4,
	   V_ABCD_5,
	   CURRENT_UTCTIMESTAMP,
	   SESSION_USER,
	   CURRENT_UTCTIMESTAMP,
	   SESSION_USER);
	
--INSERT INTO RPT_PN_CLASS_LOG TABLE
insert into "EBGDF"."RPT_PN_CLASS_LOG"(
									CYCLE_ID,
								    MFI_FFI_FC_IND,
								    MFI_FFI_FC,
								    PPN,
								    ABCD_T,
								    LOD,
								    ABCD,
								    ABCD_1,
								    ABCD_2,
								    ABCD_3,
								    ABCD_4,
								    ABCD_5,
								    CREATE_TS,
								    CREATE_USERID,
								    LAST_UPDATE_TS,
								    LAST_UPDATE_USERID,
									AT_MODIFIED_BY,
									AT_ACTION,
									AT_MODIFIED_ON,
									AT_MILLIS
	 )SELECT 
	        CYCLE_ID,
		    MFI_FFI_FC_IND,
		    MFI_FFI_FC,
		    PPN,
		    ABCD_T,
		    LOD,
		    ABCD,
		    ABCD_1,
		    ABCD_2,
		    ABCD_3,
		    ABCD_4,
		    ABCD_5,
		    CURRENT_UTCTIMESTAMP,
		    SESSION_USER,
		    CURRENT_UTCTIMESTAMP,
		    SESSION_USER,
	 		CURRENT_UTCTIMESTAMP,
	 		'create',
	 		CURRENT_UTCTIMESTAMP,
	 		TO_DECIMAL(TO_VARCHAR(CURRENT_UTCTIMESTAMP,'HH24MISSFF3')) FROM :newInfo a; 							
		
	  	
aI_DETAIL := 'cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass successfully created . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgdf.procedures.pkg_ui.ui_pn_class::createUipnclass'
	     	,I_MODULE=>'EBGDF'
	     	,I_DETAIL=>:aI_DETAIL
     	);   	
END;
