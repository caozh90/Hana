PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_GEN_PBOM_TO_CBOM" (
    IN p_change_id       VARCHAR(100),
    IN p_product_group   VARCHAR(20),
    IN p_user_id         VARCHAR(64),    
    OUT p_out_exitcode   DECIMAL,
    OUT p_out_exitmess   VARCHAR(500)
 ) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA
/************************************************************************
*name       : PRC_GEN_PBOM_TO_CBOM              
*function   : Product BOM to Cost BOM
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Fangyuan
*CreateDate : 2014-11-14
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
AS
    v_g_pkg_name          VARCHAR(20) := 'PRC_BOM_CALCULATION';
    v_time, v_taking_time DECIMAL(17,3);
    v_step_counter        integer;
    v_runlvl              VARCHAR(20);
    v_adder_category      VARCHAR2(10);	
    v_change_id           VARCHAR2(100) := p_change_id;
    v_product_group       VARCHAR2(20)  := p_product_group;
    v_user_id             VARCHAR2(64)  := p_user_id;
    v_prc_name            VARCHAR2(30)  := 'PRC_GEN_PBOM_TO_CBOM';
    v_full_name           VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;

    v_init_date           TIMESTAMP; 
    n_count,logidi,logida,logidb integer;
    v_debug char(1);                
BEGIN
    -- exception
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299;    --no data found
    DECLARE EXIT HANDLER FOR no_data_found             
    BEGIN
        -- select p_out_exitcode into v_out_exitcode from :p_out; 
        p_out_exitcode := ::SQL_ERROR_CODE;            
        logida:=0;      
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logida,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE , 1, 500) || ')');
    END;           
     
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   --others
    BEGIN 
        p_out_exitcode := ::SQL_ERROR_CODE;
        logidb:=0;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidb,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE , 1, 500) || ')');                
    END; 

    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';
    
    logidi:=0;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START',I_LOGSID=>:logidi,I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE');
        
    DELETE FROM MID_costbom_sbb WHERE product_group = :v_product_group;
    DELETE FROM MID_costbom_comp WHERE product_group = :v_product_group;

    select "cdp.ebgcfe.functions::FUNC_PKG_CONS"().C_F_DEBUG into v_debug from dummy;
    IF :v_debug= 'T'
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF; 
        
    INSERT INTO MID_costbom_sbb
        (product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
         oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
         costflag, item_type_m, item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, 
         subgeo, type, swrc, curr)
    SELECT product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
           oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
           costflag,item_type_m, item_type_f, item_type_c, bom_lvl, ifnull(cost_plant, plant), 
           is_basesbb, subgeo, TYPE,swrc, curr
      FROM BIZ_pbom t1
     WHERE product_group = :v_product_group
       AND bom_lvl       = 'MTM' 
       AND EXISTS (SELECT 1 FROM MID_biz_toplayer_ch t2
                    WHERE t2.item          = t1.model
                      AND t2.plant         = t1.plant
                      AND t2.product_group = :v_product_group);

    INSERT INTO MID_costbom_comp
        (product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
         oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
         costflag, item_type_m, item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, 
         subgeo, type, swrc, curr)
    SELECT product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
           oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
           costflag, item_type_m, item_type_f, item_type_c, bom_lvl, ifnull(cost_plant, plant), 
           is_basesbb, subgeo, type, swrc, curr
      FROM BIZ_pbom t1
     WHERE product_group = :v_product_group
       AND bom_lvl       = 'SBB'
       AND EXISTS (SELECT 1 FROM MID_costbom_sbb t2
                    WHERE t2.children      = t1.model
                      AND t2.sbom_plant    = t1.sbom_plant
                      AND t2.product_group = :v_product_group);

    INSERT INTO MID_costbom_comp
        (product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
         oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
         costflag, item_type_m, item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, 
         subgeo, type, swrc, curr)
    SELECT product_group, model, father, children, item_desc, plant,bom_plant, sbom_plant, 
           oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
           costflag, item_type_m, item_type_f, item_type_c, bom_lvl, ifnull(cost_plant, plant), 
           is_basesbb, subgeo, type ,swrc, curr
      FROM MID_costbom_sbb t1
     WHERE t1.product_group = :v_product_group
       AND NOT EXISTS(SELECT 1 FROM MID_costbom_comp t2
                       WHERE t2.product_group = t1.product_group
                         AND t2.model         = t1.children
                         AND t2.sbom_plant    = t1.sbom_plant);

    DELETE FROM MID_costbom_sbb t1
     WHERE t1.product_group = :v_product_group
       AND NOT EXISTS(SELECT 1 FROM MID_costbom_comp t2
                       WHERE t2.product_group = t1.product_group
                         AND t2.model         = t1.children
                         AND t2.sbom_plant    = t1.sbom_plant);

    INSERT INTO MID_costbom_comp
	    (product_group, model, father, children, item_desc, plant, bom_plant,sbom_plant, 
	     oem, brand, asp_prd_family, country, qtyper, altgrup, altpri, altpercent, 
	     costflag,item_type_m, item_type_f, item_type_c, bom_lvl, cost_plant, is_basesbb, 
	     subgeo, type, swrc, curr)
    SELECT DISTINCT t2.product_group, t2.model, t2.father, t2.children, t2.item_desc, 
           t1.plant, t1.plant AS bom_plant, t1.plant AS sbom_plant, t2.oem, t2.brand, 
           t2.asp_prd_family, t2.country, t2.qtyper, t2.altgrup, t2.altpri, t2.altpercent, 
           t2.costflag, t2.item_type_m, t2.item_type_f, t2.item_type_c, t2.bom_lvl, 
           MAP(t2.cost_plant, t2.plant, t1.plant, t2.cost_plant), t2.is_basesbb, t2.subgeo, 
           t2.TYPE, t2.swrc, t2.curr
	  FROM MID_costbom_sbb t1, MID_costbom_comp t2
     WHERE t1.sbom_plant  = t2.sbom_plant
	   AND t1.children    = t2.model
	   AND t2.item_type_m IN('SBB', 'OPTION', 'VISUAL')
	   AND t1.plant <> t1.sbom_plant
	   AND t1.product_group = :v_product_group
	   AND t2.product_group = :v_product_group
	   AND NOT EXISTS (SELECT 1 FROM MID_costbom_comp t3
		                WHERE t3.product_group = t1.product_group
		                  AND t3.plant = t1.plant
		                  AND t3.model = t2.model
		                  AND t3.father = t2.father
		                  AND t3.children = t2.children);
		       -- COMMIT;

    --Delete SBB bom is not used
    DELETE FROM MID_costbom_comp t1
     WHERE --Modified by Zhoubinbin 20151103
           --item_type_m   IN('SBB', 'OPTION', 'VISUAL')
           item_type_m   IN('SBB')
       AND product_group = :v_product_group
       AND NOT EXISTS(SELECT 1 FROM MID_costbom_sbb t2
                       WHERE t2.plant    = t1.plant
                         AND t2.children = t1.model
                         AND t2.product_group = :v_product_group);
         
    update CAL_RUNTIME x 
       set end_t=current_timestamp
    where x.pkg_name   = v_g_pkg_name 
      and x.proc_name  = v_prc_name 
      and end_t is null 
      and prd_group    = :v_product_group;
        
    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_END',I_LOGSID=>:logidi,I_EVENT_NAME=>:v_full_name,I_MODULE=>'EBGCFE'); --imodule need to be determined       

END;