PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_CBOM_GEN_MTMSBB" ( 
      IN  p_change_id      VARCHAR(100),
      IN  p_product_group  VARCHAR(20),
      IN  p_user_id        VARCHAR(64),
      OUT p_out_exitcode   INTEGER,
      OUT p_out_exitmess   VARCHAR(500)                    
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER  
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_CBOM_GEN_MTMSBB             
*function   : Cost BOM - Generate MTM SBB
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Leonard Ling
*CreateDate : 2014-11-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
	AS
BEGIN

    -- data
  DECLARE   v_change_id         VARCHAR(100) := p_change_id;
  DECLARE   v_product_group     VARCHAR(20)  := p_product_group;
  DECLARE   v_user_id           VARCHAR(64)  := p_user_id;
  DECLARE   v_prc_name          VARCHAR(30)  := 'PRC_CBOM_GEN_MTMSBB';
  DECLARE   v_g_pkg_name        VARCHAR(30) := 'PKG_BOM_CALCULATION';
  DECLARE   v_full_name         VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;

  DECLARE   v_debug             VARCHAR(1); 
  DECLARE   v_time              DECIMAL(17,3);
  DECLARE   v_step_counter      INTEGER;
  DECLARE   v_taking_time       DECIMAL(17,3);
  DECLARE   logidi              integer := 0;
  DECLARE   logidj              integer := 0;
  DECLARE   logidk              integer := 0;
  DECLARE   v_message           VARCHAR(500);
  DECLARE   v_default_cost      INTEGER;
  DECLARE   v_runlvl            VARCHAR(20);
  
 	-- exception
  DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found  
  BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
      CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                  I_LOGSID     => :logidi,
			                                      I_EVENT_NAME => :v_full_name, 
			                                      I_MODULE     => 'EBGCFE',
			                                      I_MESSAGE    => 'ERROR', 
			                                      I_DETAIL     =>  to_char(::SQL_ERROR_CODE) || ':' ||
                                                                   substr(::SQL_ERROR_MESSAGE, 1, 1000) );
   END;    

   DECLARE EXIT HANDLER FOR SQLEXCEPTION   
   BEGIN              
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
       CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                   I_LOGSID     => :logidi,
			                                       I_EVENT_NAME => :v_full_name, 
			                                       I_MODULE     => 'EBGCFE',
			                                       I_MESSAGE    => 'ERROR', 
			                                       I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
			                                                       substr(::SQL_ERROR_MESSAGE, 1, 1000) );     
   END;      	
	
	-- process logic
    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';
    --get global variables from session
    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') INTO v_step_counter FROM DUMMY;
    
	logidi:=0;
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START', 
	                                            I_LOGSID     => :logidi, 
	                                            I_EVENT_NAME => :v_full_name, 
	                                            I_MODULE     => 'EBGCFE'); 
	  
    INSERT INTO CAL_RUNTIME
        (PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    VALUES(:v_g_pkg_name, :v_prc_name, CURRENT_TIMESTAMP, :v_product_group);    
      
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM DUMMY;
    IF :v_debug IS NOT NULL     
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;     
    
    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().DEFAULT_COST into v_default_cost
      FROM dummy;     
     
    SELECT run_level INTO v_runlvl FROM biz_toplayer_ch
     WHERE change_id = :v_change_id
    LIMIT 1;
    
    IF v_runlvl = 'FULL'
    THEN
        DELETE FROM BIZ_cbom_mtmsbb
         WHERE product_group = :v_product_group;
    ELSE     
        DELETE FROM BIZ_CBOM_MTMSBB t1
         WHERE product_group = :v_product_group
           AND EXISTS(SELECT 1 FROM MID_biz_toplayer_ch t2
                       WHERE t2.plant         = t1.plant
                         AND t2.item          = t1.model
                         AND t2.output_type  <> 'CTO'
                         AND t2.product_group = :v_product_group);
    END IF;
        
        --MTM-SBB
    INSERT INTO BIZ_CBOM_MTMSBB
        (cycle, product_group, model, father, children, item_desc, plant, oem, 
         brand, asp_prd_family, geo, subgeo, country, qtyper, altgrup, altpri, 
         altpercent, costflag, item_type_m, item_type_f, item_type_c, cost_plant, 
         cost_type, cost_name, is_basesbb, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, 
         m11, m12, m13, m14, m15, m16, m17, m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7, 
         lm8, lm9, lm10, lm11, lm12, lm13, lm14, lm15, lm16, lm17, lm18, 
         weighted_average, lattest_procur, action, status, sys_created_date,
         sys_created_by, sys_last_modified_date, sys_last_modified_by)
    SELECT 'CURRENT' AS cycle, t1.product_group, t1.model, t1.father, t1.children, 
           t1.item_desc, t1.plant, t1.oem, t1.brand, t1.asp_prd_family, NULL AS geo, 
           t1.subgeo, t1.country, t1.qtyper, t1.altgrup, t1.altpri, t1.altpercent,
           t1.costflag, t1.item_type_m, t1.item_type_f, t1.item_type_c, t1.cost_plant,
           'SBB-COST' AS cost_type, 'SBB-COST' AS cost_name, t1.is_basesbb,
           map(t2.m1, :v_default_cost, :v_default_cost, t2.m1*t1.qtyper*t1.altpercent/100),
           map(t2.m2, :v_default_cost, :v_default_cost, t2.m2*t1.qtyper*t1.altpercent/100),
           map(t2.m3, :v_default_cost, :v_default_cost, t2.m3*t1.qtyper*t1.altpercent/100),
           map(t2.m4, :v_default_cost, :v_default_cost, t2.m4*t1.qtyper*t1.altpercent/100),
           map(t2.m5, :v_default_cost, :v_default_cost, t2.m5*t1.qtyper*t1.altpercent/100),
           map(t2.m6, :v_default_cost, :v_default_cost, t2.m6*t1.qtyper*t1.altpercent/100),
           map(t2.m7, :v_default_cost, :v_default_cost, t2.m7*t1.qtyper*t1.altpercent/100),
           map(t2.m8, :v_default_cost, :v_default_cost, t2.m8*t1.qtyper*t1.altpercent/100),
           map(t2.m9, :v_default_cost, :v_default_cost, t2.m9*t1.qtyper*t1.altpercent/100),
           map(t2.m10, :v_default_cost, :v_default_cost, t2.m10*t1.qtyper*t1.altpercent/100),
           map(t2.m11, :v_default_cost, :v_default_cost, t2.m11*t1.qtyper*t1.altpercent/100),
           map(t2.m12, :v_default_cost, :v_default_cost, t2.m12*t1.qtyper*t1.altpercent/100),
           map(t2.m13, :v_default_cost, :v_default_cost, t2.m13*t1.qtyper*t1.altpercent/100),
           map(t2.m14, :v_default_cost, :v_default_cost, t2.m14*t1.qtyper*t1.altpercent/100),
           map(t2.m15, :v_default_cost, :v_default_cost, t2.m15*t1.qtyper*t1.altpercent/100),
           map(t2.m16, :v_default_cost, :v_default_cost, t2.m16*t1.qtyper*t1.altpercent/100),
           map(t2.m17, :v_default_cost, :v_default_cost, t2.m17*t1.qtyper*t1.altpercent/100),
           map(t2.m18, :v_default_cost, :v_default_cost, t2.m18*t1.qtyper*t1.altpercent/100),           
           map(t2.lm1, :v_default_cost, :v_default_cost, t2.lm1*t1.qtyper*t1.altpercent/100),
           map(t2.lm2, :v_default_cost, :v_default_cost, t2.lm2*t1.qtyper*t1.altpercent/100),
           map(t2.lm3, :v_default_cost, :v_default_cost, t2.lm3*t1.qtyper*t1.altpercent/100),
           map(t2.lm4, :v_default_cost, :v_default_cost, t2.lm4*t1.qtyper*t1.altpercent/100),
           map(t2.lm5, :v_default_cost, :v_default_cost, t2.lm5*t1.qtyper*t1.altpercent/100),
           map(t2.lm6, :v_default_cost, :v_default_cost, t2.lm6*t1.qtyper*t1.altpercent/100),
           map(t2.lm7, :v_default_cost, :v_default_cost, t2.lm7*t1.qtyper*t1.altpercent/100),
           map(t2.lm8, :v_default_cost, :v_default_cost, t2.lm8*t1.qtyper*t1.altpercent/100),
           map(t2.lm9, :v_default_cost, :v_default_cost, t2.lm9*t1.qtyper*t1.altpercent/100),
           map(t2.lm10, :v_default_cost, :v_default_cost, t2.lm10*t1.qtyper*t1.altpercent/100),
           map(t2.lm11, :v_default_cost, :v_default_cost, t2.lm11*t1.qtyper*t1.altpercent/100),
           map(t2.lm12, :v_default_cost, :v_default_cost, t2.lm12*t1.qtyper*t1.altpercent/100),
           map(t2.lm13, :v_default_cost, :v_default_cost, t2.lm13*t1.qtyper*t1.altpercent/100),
           map(t2.lm14, :v_default_cost, :v_default_cost, t2.lm14*t1.qtyper*t1.altpercent/100),
           map(t2.lm15, :v_default_cost, :v_default_cost, t2.lm15*t1.qtyper*t1.altpercent/100),
           map(t2.lm16, :v_default_cost, :v_default_cost, t2.lm16*t1.qtyper*t1.altpercent/100),
           map(t2.lm17, :v_default_cost, :v_default_cost, t2.lm17*t1.qtyper*t1.altpercent/100),
           map(t2.lm18, :v_default_cost, :v_default_cost, t2.lm18*t1.qtyper*t1.altpercent/100),        
           map(t2.weighted_average, :v_default_cost, :v_default_cost, t2.weighted_average*t1.qtyper*t1.altpercent/100),
           map(t2.lattest_procur, :v_default_cost, :v_default_cost, t2.lattest_procur*t1.qtyper*t1.altpercent/100),
           'INSERT', 'ACTIVE', current_timestamp, v_full_name, current_timestamp, v_full_name
      FROM MID_costbom_sbb t1, MID_cbom_sbb_sum t2
     WHERE t1.plant = t2.plant
       AND t1.children = t2.model
       AND t1.product_group = t2.product_group
       AND t1.product_group = :v_product_group
       AND t1.item_type_m NOT IN('CTO');

    -- MTM-COMPONEN COST
    INSERT INTO BIZ_CBOM_MTMSBB
        (cycle, product_group, model, father, children, item_desc, plant, oem, brand,
         asp_prd_family, geo, subgeo, country, qtyper, altgrup, altpri, altpercent, 
         costflag, item_type_m, item_type_f, item_type_c, cost_plant, cost_type,
         cost_name, is_basesbb, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, 
         m13, m14, m15, m16, m17, m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, 
         lm10, lm11, lm12, lm13, lm14, lm15, lm16, lm17, lm18, weighted_average, 
         lattest_procur, action, status, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by)
    SELECT 'CURRENT' AS cycle, product_group, model, father, children, item_desc, plant, 
           oem, brand, asp_prd_family, geo, subgeo, country, qtyper, altgrup, altpri, 
           altpercent, costflag, item_type_m, item_type_f, item_type_c, cost_plant,
           'COMP-COST' AS cost_type, 'COMP-COST' AS cost_name, is_basesbb,
            m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, 
            m17, m18, lm1, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lm10, lm11, lm12, 
            lm13, lm14, lm15, lm16, lm17, lm18, weighted_average, lattest_procur, 
            'INSERT','ACTIVE', CURRENT_TIMESTAMP, :v_full_name, CURRENT_TIMESTAMP,
            :v_full_name
       FROM MID_biz_cbom_sbb2
      WHERE bom_lvl       = 'MTM'
        AND product_group = v_product_group
        AND item_type_m NOT IN('CTO');
        
    EXEC 'COMMIT';         
   
     IF :v_debug IS NOT NULL   --pkg_cons.c_f_debug  
     THEN
         v_step_counter := :v_step_counter + 1;
         
         v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - :v_time;
         IF :v_taking_time < 0 THEN v_taking_time := :v_taking_time + 86400.000;   END IF;

		 SELECT 'step '||to_char(:v_step_counter)||': ' || to_char(:v_taking_time) || ' sec' INTO v_message FROM dummy;
		 
		 CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE      => 'INFO', 
		                                            I_LOGSID     => :logidj, 
				                                    I_EVENT_NAME => :v_full_name, 
				                                    I_MODULE     => 'EBGCFE',
				                                    I_MESSAGE    => :v_message);     
				
         v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
     END IF;
     
     UPDATE CAL_RUNTIME x 
        SET end_t = CURRENT_TIMESTAMP
      WHERE x.pkg_name  = :v_g_pkg_name 
        AND x.proc_name = :v_prc_name 
        AND end_t is null 
        AND prd_group= :v_product_group;

     p_out_exitcode := 0;
     p_out_exitmess := 'SUCCESSFUL';
     
     CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                 I_LOGSID     => :logidi,
		                                         I_EVENT_NAME => :v_full_name,
		                                         I_MODULE     => 'EBGCFE');       
		
     EXEC 'SET ''v_step_counter_bom_calculation'' = '''|| :v_step_counter ||'''';        
END;