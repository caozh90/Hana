PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GEN_F_OPTION" ( 
	IN p_change_id      VARCHAR(100),
    IN p_product_group  VARCHAR(20),
    OUT p_out_exitcode  NUMBER
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_PBOM_GEN_F_OPTION             
*function   : Product BOM - Generate F OPTION BOM
*input      ：p_change_id : change id / p_product_group : product group
*output     : p_out_exitcode : error code
*author     : Eric Zhou
*CreateDate : 2014-11-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS
	    v_change_id         VARCHAR2(100) := p_change_id;
        v_product_group     VARCHAR2(20)  := p_product_group;
        v_prc_name          VARCHAR2(30)  := 'PRC_PBOM_GEN_F_OPTION';
        v_g_pkg_name        VARCHAR2(30)  := 'PKG_BOM_CALCULATION';        
        v_full_name         VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;

        v_nobom_ksbb_pg     VARCHAR2(10);
        v_debug 	        VARCHAR(20);
        v_init_date         TIMESTAMP; 
        v_logidi            INTEGER := 0;
		v_logidj            INTEGER := 0;
		v_logidk            INTEGER := 0;
		v_logidl            INTEGER := 0;
		v_count             INTEGER;		
		
		v_time              DECIMAL(17,3);
		v_step_counter      INTEGER       := 0;
    	v_taking_time       DECIMAL(17,3);
		v_exists			INTEGER;	
BEGIN

    -- Exception 
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
              
    END;

    p_out_exitcode := -1;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

/****************Translation of Merge into********************/   

    insert into CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    select v_g_pkg_name,v_prc_name,CURRENT_DATE,v_product_group from dummy;

    v_debug :='T';
    IF :v_debug = 'T'
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
     
    --Generate option-option bom when it eixsts cost tape
    INSERT INTO MID_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant,
         sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
         altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
         bom_lvl, cost_plant, action, status, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by, is_basesbb, subgeo)
    SELECT DISTINCT v_product_group, t1.item AS model, t1.item AS father, 
           t1.item AS children, NULL AS item_desc, t1.plant, t1.plant AS bom_plant, 
           t1.plant AS sbom_plant, NULL AS oem, t1.brand, t1.asp_prd_family, 
           NULL AS country, 1 AS altqty, NULL AS altgrup, NULL AS altpri,
           100 AS altpercent, 'X' AS costflag, t1.output_type AS item_type_m,
           t1.output_type AS item_type_f, t1.output_type AS item_type_c, 'MTM' AS bom_lvl,
           NULL AS cost_plant, 'INSERT', 'ACTIVE', current_timestamp, v_full_name, 
           current_timestamp, v_full_name, 0 AS is_basesbb, NULL AS subgeo
      FROM BIZ_toplayer_ch t1
     WHERE t1.output_type IN ('OPTION', 'VISUAL')
       AND t1.change_id     = :v_change_id
       AND t1.product_group = :v_product_group
       AND EXISTS(SELECT 1 FROM UI_cost_tape t2
                   WHERE t2.part_number = t1.item
                     AND t2.plant       = t1.plant)
       AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t3
                       WHERE t3.product_group = t1.product_group
                         AND t3.model         = t1.item
                         AND t3.plant         = t1.plant
                         AND t3.item_type_c  <> 'SWR');    
    
    /*--GMODEL AND FOREIGN PURCHASE OPTION
    --ODM PLANT
    INSERT INTO MID_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant,
         sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
         altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
         bom_lvl, cost_plant, action, status, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by, is_basesbb, subgeo)
    SELECT DISTINCT v_product_group, t1.item AS model, t1.item AS father, 
           t1.item AS children, NULL AS item_desc, t1.plant, t1.plant AS bom_plant, 
           t1.plant AS sbom_plant, NULL AS oem, t1.brand, t1.asp_prd_family, 
           NULL AS country, 1 AS altqty, NULL AS altgrup, NULL AS altpri,
           100 AS altpercent, 'X' AS costflag, t1.output_type AS item_type_m,
           t1.output_type AS item_type_f, t1.output_type AS item_type_c, 'MTM' AS bom_lvl,
           NULL AS cost_plant, 'INSERT', 'ACTIVE', current_timestamp, v_full_name, 
           current_timestamp, v_full_name, 0 AS is_basesbb, NULL AS subgeo
      FROM BIZ_toplayer_ch t1
     WHERE t1.output_type IN ('OPTION', 'VISUAL')
       AND t1.change_id     = v_change_id
       AND t1.product_group = v_product_group
       AND EXISTS (SELECT 1 FROM UI_plant t5
                    WHERE t5.plant      = t1.plant
                      AND t5.plant_type = 'OEM'
                      AND t5.product_group = :v_product_group)
       AND EXISTS (SELECT 1 FROM z_pcdw_item t3
                    WHERE t3.beskz = 'F'
                      AND t3.item  = t1.item
                      AND EXISTS (SELECT 1 FROM conf_plant_bugrp_mapping t4
                                   WHERE t4.plant = t3.siteid
                                     AND t4.oem   = 'Y'
                                     AND t4.product_group = :v_product_group))
       AND NOT EXISTS (SELECT 1 FROM MID_biz_pbom t2
                        WHERE t2.product_group = t1.product_group
                          AND t2.model = t1.item
                          AND t2.plant = t1.plant);*/

    --IN HOUSE PLANT
    INSERT INTO MID_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant,
         sbom_plant, oem, brand, asp_prd_family, country, qtyper, altgrup, 
         altpri, altpercent, costflag, item_type_m, item_type_f, item_type_c, 
         bom_lvl, cost_plant, action, status, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by, is_basesbb, subgeo)
    SELECT DISTINCT v_product_group, t1.item AS model, t1.item AS father, 
           t1.item AS children, NULL AS item_desc, t1.plant, t1.plant AS bom_plant, 
           t1.plant AS sbom_plant, NULL AS oem, t1.brand, t1.asp_prd_family, 
           NULL AS country, 1 AS altqty, NULL AS altgrup, NULL AS altpri,
           100 AS altpercent, 'X' AS costflag, t1.output_type AS item_type_m, 
           t1.output_type AS item_type_f, t1.output_type AS item_type_c, 'MTM' AS bom_lvl, 
           NULL AS cost_plant, 'INSERT', 'ACTIVE',current_timestamp,
           v_full_name, current_timestamp, v_full_name, 0 AS is_basesbb, NULL AS subgeo--,t2.netpr
      FROM BIZ_toplayer_ch t1
     WHERE t1.output_type IN ('OPTION', 'VISUAL')
       AND t1.change_id     = v_change_id
       AND t1.product_group = v_product_group
       /*AND EXISTS (SELECT 1 FROM UI_plant t5
                    WHERE t5.plant = t1.plant
                      AND t5.plant_type IN ('IN_HOUSE', 'DC')
                      AND t5.product_group = v_product_group)*/
       AND EXISTS (SELECT 1 FROM z_pcdw_item t3
                    WHERE t3.beskz  = 'F'
                      AND t3.item   = t1.item
                      AND t3.siteid = t1.bom_plant)
       AND NOT EXISTS (SELECT 1 FROM MID_biz_pbom t2
                        WHERE t2.product_group = t1.product_group
                          AND t2.model         = t1.item
                          AND t2.plant         = t1.plant);

    update CAL_RUNTIME x 
       set end_t=CURRENT_DATE
     where x.pkg_name=v_g_pkg_name 
       and x.proc_name=v_prc_name 
       and end_t is null 
       and prd_group=v_product_group;
       
    p_out_exitcode := 0;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 
                                                
    exec 'SET ''v_step_counter_bom_calculation'' = '''||v_step_counter||'''';          
 
END;