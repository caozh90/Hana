PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_SWRBOM" ( 
    IN  p_change_id      VARCHAR(100),
    IN  p_product_group  VARCHAR(20),
    OUT p_out_exitcode  NUMBER
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_PBOM_GET_SWRBOM             
*function   : Product BOM - Get SWR BOM
*input      ：p_change_id : change id / p_product_group : product group
*output     : p_out_exitcode : error code
*author     : ZHOUBINBIN
*CreateDate : 2015-9-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS
	    v_change_id         VARCHAR2(100) := p_change_id;
        v_product_group     VARCHAR2(20)  := p_product_group;
        v_prc_name          VARCHAR2(30)  := 'PRC_PBOM_GET_SWRBOM';
        v_g_pkg_name        VARCHAR2(30)  := 'PKG_BOM_CALCULATION';        
        v_full_name         VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;
        v_nobom_ksbb_pg     VARCHAR2(10);

        v_logidi            INTEGER := 0;
		v_logidj            INTEGER := 0;
		v_logidk            INTEGER := 0;
		v_logidl            INTEGER := 0;
		v_count             INTEGER;		
------------package parameter----------------------------			
		v_time              DECIMAL(17,3);
		v_step_counter      INTEGER       := 0;
    	v_taking_time       DECIMAL(17,3);
		v_runlvl            VARCHAR(20);
		v_exists			INTEGER;
		v_debug             VARCHAR(10);	
BEGIN
    -- Exception 
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    
    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;
    
    p_out_exitcode := -1;
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

    SELECT SESSION_CONTEXT('v_step_counter_bom_calculation') into v_step_counter FROM DUMMY;

/****************Translation of Merge into********************/   

    INSERT INTO CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    SELECT v_g_pkg_name, v_prc_name, CURRENT_TIMESTAMP, v_product_group FROM dummy;
        --COMMIT;

    SELECT "cdp.ebgcfe.functions::FUNC_PKG_CONS"().c_f_debug INTO v_debug FROM DUMMY;
    
    IF v_debug = 'T'
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;
    
    table1 = SELECT product_group, model, father, plant, bom_plant, sbom_plant, 
                    oem, brand, asp_prd_family, item_type_m, item_type_f, bom_lvl 
               FROM (SELECT product_group, model, father, plant, bom_plant, sbom_plant, 
                            oem, brand, asp_prd_family, item_type_m, item_type_f, bom_lvl,
                            ROW_NUMBER() OVER(PARTITION BY product_group, model, father, plant
                                              ORDER BY sbom_plant) AS pri
                       FROM mid_biz_pbom t1
                      WHERE t1.product_group = :p_product_group
                        AND t1.bom_lvl       = 'MTM'
                        AND EXISTS(SELECT 1 FROM biz_swr t2
                                    WHERE t2.matnr = t1.model))
              WHERE pri = 1;
              
    table2 = SELECT DISTINCT 
                    product_group, item AS model, item AS father, plant, 
                    plant AS bom_plant, plant AS sbom_plant, NULL AS oem, 
                    brand, asp_prd_family, output_type AS item_type_m, 
                    output_type AS item_type_f, 'MTM' AS bom_lvl
               FROM biz_toplayer_ch t1
              WHERE t1.change_id = :p_change_id
                AND NOT EXISTS(SELECT 1 FROM mid_biz_pbom t2
                                WHERE t2.product_group = t1.product_group
                                  AND t2.model         = t1.item
                                  AND t2.plant         = t1.plant
                                  AND t2.bom_lvl       = 'MTM');
    
    --Added by Zhoubinbin 20160806, BUNDLE-SEO/OPTION-IP Case missing ip
    table3 = SELECT DISTINCT 
                    t1.product_group, t2.idnrk AS model, t2.idnrk AS father,
                    t1.plant, t1.bom_plant, t1.bom_plant AS sbom_plant, 
                    NULL AS oem, t3.brand, t3.asp_prd_family, 
                    t3.item_type AS item_type_m, t3.item_type AS item_type_f,
                    'MTM' AS bom_lvl
               FROM biz_toplayer_ch t1, z_pcdw_bom t2, ui_item t3
              WHERE t1.change_id     = :p_change_id
                AND t1.product_group = t2.product_group
                AND t1.item          = t2.name
                AND t1.bom_plant     = t2.werks
                AND t2.product_group = t3.product_group
                AND t2.idnrk         = t3.item
                AND t1.output_type   = 'BUNDLE';
    
    table1 = SELECT * FROM :table1 
             UNION
             SELECT * FROM :table2
             UNION
             SELECT * FROM :table3;
    
    INSERT INTO mid_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, oem, brand, asp_prd_family, qtyper, altpercent, item_type_m, 
         item_type_f, item_type_c, bom_lvl, is_basesbb, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by)
    SELECT t1.product_group, t1.model, t1.father, t2.sbbfc AS children, t3.item_desc, 
           t1.plant, t1.bom_plant,t1.sbom_plant, t1.oem, t1.brand, t1.asp_prd_family, 
           t2.menge AS qtyper, 100 AS altpercent, t1.item_type_m, t1.item_type_f, 
           t3.item_type AS item_type_c, t1.bom_lvl, 0 AS is_basesbb, 
           current_timestamp, v_full_name, current_timestamp, v_full_name
      FROM :table1 t1,
           biz_swr t2,
           ui_item t3
     WHERE t1.model = t2.matnr
       AND t2.sbbfc = t3.item
       AND IFNULL(t2.matnr, '') <> ''
       AND t3.product_group = p_product_group
       AND NOT EXISTS(SELECT 1 FROM mid_biz_pbom t4
                       WHERE t4.product_group = t1.product_group
                         AND t4.model         = t1.model
                         AND t4.father        = t1.father
                         AND t4.children      = t2.sbbfc
                         AND t4.plant         = t1.plant);
                         
    UPDATE mid_biz_pbom t1
       SET t1.qtyper = (SELECT t2.menge FROM biz_swr t2
                          WHERE t2.sbbfc             = t1.model
                            AND t2.ranum             = t1.children
                            AND IFNULL(t2.matnr, '') = '') 
     WHERE t1.product_group = p_product_group
       AND t1.bom_lvl       = 'SBB'
       AND EXISTS(SELECT t2.menge FROM biz_swr t2
                   WHERE t2.sbbfc             = t1.model
                     AND t2.ranum             = t1.children
                     AND IFNULL(t2.matnr, '') = '');  
                     
    --Added by Zhoubinbin 20160728, Get swr sbb list from manual bom
    tab_sbb_manualbom =  SELECT DISTINCT t1.product_group, t1.children, 
                                t3.item_type AS item_type_c, t2.bom_plant AS sbom_plant
                           FROM ui_manual_bom t1, biz_toplayer_ch t2, ui_item t3
                          WHERE t1.product_group = t2.product_group
                            AND t1.father        = t2.item
                            AND t1.plant         = t2.plant
                            AND t1.product_group = t3.product_group
                            AND t1.children      = t3.item
                            AND t1.bom_level     = 'L1'
                            AND t2.change_id     = :v_change_id;     
                         
    INSERT INTO mid_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, qtyper, altpercent, item_type_m, item_type_f, item_type_c, 
         bom_lvl, is_basesbb, sys_created_date, sys_created_by, sys_last_modified_date, 
         sys_last_modified_by) 
    SELECT t1.product_group, t1.children AS model, t1.children AS father, 
           t2.ranum AS children, t3.item_desc, t1.sbom_plant AS plant, 
           t1.sbom_plant AS bom_plant, t1.sbom_plant AS sbom_plant, 
           t2.menge AS qtyper, 100 AS altpercent, t1.item_type_c AS item_type_m,
           t1.item_type_c AS item_type_f, t3.item_type AS item_typec, 'SBB' AS bom_lvl,
           0 AS is_basesbb, current_timestamp, v_full_name, current_timestamp, v_full_name
      FROM (SELECT DISTINCT product_group, children, item_type_c, sbom_plant 
              FROM mid_biz_pbom
             WHERE product_group = p_product_group
               AND bom_lvl        = 'MTM'
            UNION
            SELECT product_group, children, item_type_c, sbom_plant
              FROM :tab_sbb_manualbom) t1,
           biz_swr      t2,
           ui_item      t3
     WHERE t1.children       = t2.sbbfc
       AND t2.ranum          = t3.item
       AND IFNULL(t2.matnr, '') = ''
       AND t3.product_group  = p_product_group
       AND NOT EXISTS(SELECT 1 FROM mid_biz_pbom t4
                       WHERE t4.product_group = t1.product_group
                         AND t4.model         = t1.children
                         AND t4.father        = t1.children
                         AND t4.children      = t2.ranum
                         AND t4.plant         = t1.sbom_plant);
    
    --fg-sw                     
    UPDATE mid_biz_pbom t1
       SET t1.qtyper = (SELECT t2.menge FROM biz_swr t2
                          WHERE t2.matnr = t1.model
                            AND t2.ranum = t1.children
                            AND IFNULL(t2.sbbfc, '') = '')
     WHERE t1.product_group = p_product_group
       AND t1.bom_lvl       = 'MTM'
       AND EXISTS(SELECT t2.menge FROM biz_swr t2
                   WHERE t2.matnr = t1.model
                    AND t2.ranum = t1.children
                    AND IFNULL(t2.sbbfc, '') = '');
                    
    INSERT INTO mid_biz_pbom
        (product_group, model, father, children, item_desc, plant, bom_plant, 
         sbom_plant, oem, brand, asp_prd_family, qtyper, altpercent, item_type_m, 
         item_type_f, item_type_c, bom_lvl, is_basesbb, sys_created_date, sys_created_by, 
         sys_last_modified_date, sys_last_modified_by)
    SELECT t1.product_group, t1.model, t1.father, t2.ranum AS children, t3.item_desc,
           t1.plant, t1.bom_plant, t1.sbom_plant, t1.oem, t1.brand, t1.asp_prd_family,
           t2.menge AS qtyper, 100 AS altpercent, t1.item_type_m, t1.item_type_f,
           t3.item_type AS item_type_c, t1.bom_lvl, 0 AS is_basesbb, current_timestamp, 
           v_full_name, current_timestamp, v_full_name
      FROM :table1             t1,
           biz_swr             t2,
           ui_item             t3
     WHERE t1.model         = t2.matnr
       AND t2.ranum         = t3.item
       AND t3.product_group = p_product_group
       AND IFNULL(t2.sbbfc, '') = '' 
       AND NOT EXISTS(SELECT 1 FROM mid_biz_pbom t4
                       WHERE t4.product_group = t1.product_group
                         AND t4.model         = t1.model
                         AND t4.father        = t1.father
                         AND t4.children      = t2.ranum
                         AND t4.plant         = t1.plant);
                         
    DELETE FROM mid_biz_pbom
    WHERE product_group = p_product_group
      AND item_type_m   = 'CTO'
      AND item_type_c   = 'SWR';
    
    --Same IP is under OPTON and SBB which this SBB is under OPTION, should delete the one which is under OPTION   
    DELETE FROM mid_biz_pbom t1
     WHERE product_group  = :p_product_group
       AND t1.item_type_m = 'OPTION'
       AND t1.item_type_c = 'SWR'
       AND EXISTS(SELECT 1 FROM mid_biz_pbom t2, mid_biz_pbom t3
                   WHERE t2.product_group = t1.product_group
                     AND t2.model         = t1.model
                     AND t2.plant         = t1.plant
                     AND t2.product_group = t3.product_group
                     AND t2.children      = t3.model
                     AND t2.plant         = t3.plant
                     AND t3.children      = t1.children);    
                         
    IF v_debug = 'T'
    THEN
        v_step_counter := v_step_counter + 1;
        v_taking_time  := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - v_time;
            
        IF :v_taking_time < 0 THEN v_taking_time := :v_taking_time + 86400.000;  END IF;            
            
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                        I_LOGSID     => :v_logidl,
                                                        I_EVENT_NAME => :v_full_name,
                                                        I_MODULE     => 'EBGCFE',
									                    I_MESSAGE    =>'step '||to_char(:v_step_counter)||': ' ||
									                                   to_char(:v_taking_time) || ' sec'); 
            
            v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;

    UPDATE CAL_RUNTIME x 
       SET end_t = CURRENT_TIMESTAMP
     WHERE x.pkg_name  =v_g_pkg_name 
       AND x.proc_name =v_prc_name 
       AND end_t is null 
       AND prd_group   =v_product_group;
           
    p_out_exitcode := 0;
        
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

    exec 'SET ''v_step_counter_bom_calculation'' = '''||v_step_counter||'''';                 
END;