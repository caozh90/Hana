PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_GEN_MODEL_LIST_PROPERTY" (
      IN  p_change_id      VARCHAR(100),
      IN  p_product_group  VARCHAR(20),
      IN  p_user_id        VARCHAR(64),
      OUT p_out_exitcode   INTEGER,
      OUT p_out_exitmess   VARCHAR(500)  
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_GEN_MODEL_LIST_PROPERTY             
*function   : Generate Model List Property
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Leonard Ling
*CreateDate : 2014-11-14
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
	AS
BEGIN

    -- data
    DECLARE   v_change_id           VARCHAR(100) := p_change_id;
    DECLARE   v_product_group       VARCHAR(20)  := p_product_group;
    DECLARE   v_user_id             VARCHAR(64)  := p_user_id;
    DECLARE   v_prc_name            VARCHAR(30)  := 'PRC_GEN_MODEL_LIST_PROPERTY';
    DECLARE   v_g_pkg_name          VARCHAR(30)  := 'PKG_BOM_CALCULATION';
    DECLARE   v_g_curr_date         TIMESTAMP    := CURRENT_TIMESTAMP;    
    DECLARE   v_full_name           VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;
                                    
    DECLARE   v_init_date           TIMESTAMP;    
    DECLARE   logidi                integer;
    DECLARE   v_message             VARCHAR(500);  
    DECLARE   v_debug               VARCHAR(1);   
    DECLARE   v_found               INTEGER      := 1;      
    DECLARE   v_time                DECIMAL(17,3);    
    
    -- exception
    DECLARE exp_procedure CONDITION FOR SQL_ERROR_CODE 10001;   
    DECLARE exp_wrong_pg CONDITION FOR SQL_ERROR_CODE 10002;    

    DECLARE EXIT HANDLER FOR exp_procedure   
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );      
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi, 
                                                    I_EVENT_NAME => :v_full_name, 
                                                    I_MODULE     => 'EBGCFE',
			                                        I_MESSAGE    => 'ERROR', 
			                                        I_DETAIL     => :p_out_exitmess);           
    END;     
    
    DECLARE EXIT HANDLER FOR exp_wrong_pg   
    BEGIN  
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );      
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
			                                        I_EVENT_NAME => :v_full_name, 
			                                        I_MODULE     => 'EBGCFE',
			                                        I_MESSAGE    => 'ERROR', 
			                                        I_DETAIL     => :p_out_exitmess);           
    END;     
      
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found 
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );      
        SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;
			
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
			                                        I_EVENT_NAME => :v_full_name, 
			                                        I_MODULE     => 'EBGCFE',
			                                        I_MESSAGE    => 'ERROR', 
			                                        I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) );
    
    END;    

    DECLARE EXIT HANDLER FOR SQLEXCEPTION  
    BEGIN  
        p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;
			
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :logidi,
			                                        I_EVENT_NAME => :v_full_name, 
			                                        I_MODULE     => 'EBGCFE',
			                                        I_MESSAGE    => 'ERROR', 
			                                        I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) );
    END;        

    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED';           
        
    logidi:=0;
	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE=>'PROC_START', 
                                                I_LOGSID=>:logidi, 
	                                            I_EVENT_NAME=>:v_full_name, 
	                                            I_MODULE=>'EBGCFE'); 
    

    DELETE FROM MID_biz_toplayer_ch WHERE product_group = :v_product_group;

    INSERT INTO MID_biz_toplayer_ch
        (product_group, plant, item, children, country, change_id, run_grp_id,
         change_type, run_level, run_level_ori, event_name, user_id, output_type, 
         bom_plant, asp_prd_family, brand, subgeo, level1_tbas, level2_tbas, 
         level3_tbas, level4_tbas, level5_tbas, level6_tbas, rid)
    SELECT product_group, plant, item, children, country, change_id, run_grp_id, 
           change_type, run_level, run_level_ori, event_name, user_id, output_type, 
           bom_plant, asp_prd_family, brand, subgeo, level1_tbas, level2_tbas, 
           level3_tbas, level4_tbas, level5_tbas, level6_tbas, "$rowid$" --ROWID
      FROM BIZ_toplayer_ch
     WHERE change_id     = :v_change_id
       AND product_group = :v_product_group;

    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');     
END;