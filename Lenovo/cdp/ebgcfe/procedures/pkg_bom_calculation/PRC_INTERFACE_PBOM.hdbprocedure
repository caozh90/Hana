PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_INTERFACE_PBOM" (
	IN  p_change_id     VARCHAR(100),
    IN  p_product_group VARCHAR(20),
    IN  p_user_id       VARCHAR(64),
    OUT p_out_exitcode  INTEGER,
    OUT p_out_exitmess  VARCHAR(500)  
)  
	LANGUAGE SQLSCRIPT 
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
--	READS SQL DATA 
/************************************************************************
*name       : PRC_INTERFACE_PBOM              
*function   : Plant BOM
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id 
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : Eric Zhou
*CreateDate : 2014-11-14
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
AS
    v_change_id                   VARCHAR(100) := p_change_id;
    v_product_group               VARCHAR(20)  := p_product_group;
    v_user_id                     VARCHAR(64)  := p_user_id;
    v_subprc_exitcode             INTEGER;
    v_prc_name                    VARCHAR(30)  := 'PRC_INTERFACE_PBOM';
    v_g_pkg_name                  VARCHAR(30)  := 'PKG_BOM_CALCULATION';
    v_full_name                   VARCHAR(60)  := v_g_pkg_name ||'.'|| v_prc_name;
	v_logidi                      INTEGER := 0;
	v_debug  	                  VARCHAR(20);
	v_count                       INTEGER;
    v_init_date TIMESTAMP;     		
------------package parameter----------------------------			
	v_time              DECIMAL(17,3);
	v_runlvl            VARCHAR(20);
BEGIN
    --	Exception 
    DECLARE exp_wrong_pg CONDITION for SQL_ERROR_CODE 10001;
    DECLARE exp_procedure CONDITION for SQL_ERROR_CODE 10002;
    DECLARE EXIT HANDLER FOR exp_wrong_pg
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
											        I_EVENT_NAME => :v_full_name,
											        I_MODULE     => 'EBGCFE',
											        I_MESSAGE    => 'ERROR',
											        I_DETAIL     => :p_out_exitmess ); 
    END;
    
    DECLARE EXIT HANDLER FOR exp_procedure
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
											        I_EVENT_NAME => :v_full_name,
											        I_MODULE     => 'EBGCFE',
											        I_MESSAGE    => 'ERROR',
											        I_DETAIL     => :p_out_exitmess );                                                  
    END;
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
				                                    I_EVENT_NAME => :v_full_name,
				                                    I_MODULE     => 'EBGCFE',
				                                    I_MESSAGE    => 'ERROR',
				                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
				                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')');                                                  

    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := substr(::SQL_ERROR_MESSAGE, 1, 500 );  
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
				                                    I_EVENT_NAME => :v_full_name,
				                                    I_MODULE     => 'EBGCFE',
				                                    I_MESSAGE    => 'ERROR',
				                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || ' (' ||
				                                                    substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;

    p_out_exitcode := -1;
    p_out_exitmess := 'FAILED'; 
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :v_logidi,
				                                I_EVENT_NAME => :v_full_name,
				                                I_MODULE     => 'EBGCFE'); 

    insert into CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    select v_g_pkg_name,v_prc_name,CURRENT_DATE,v_product_group from dummy;

    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_PCDWBOM"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GET_PCDWBOM';
        SIGNAL exp_procedure;
    END IF;
     
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_PROPERTIES"(v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GET_PROPERTIES';
        SIGNAL exp_procedure;
    END IF;

    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_REMOVE_PHANTOM"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_REMOVE_PHANTOM';
        SIGNAL exp_procedure;
    END IF;

    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_CPS_BOM"(v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_CPS_BOM';
        SIGNAL exp_procedure;
    END IF;

    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_DEL_LOWCOST_PARTS"(v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_DEL_LOWCOST_PARTS';
        SIGNAL exp_procedure;
    END IF;
    
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_SWRBOM"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GET_SWRBOM';
        SIGNAL exp_procedure; 
    END IF;        
             
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GEN_F_OPTION"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GEN_F_OPTION';
        SIGNAL exp_procedure; 
    END IF;
      
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_KEEP_NOBOMSBB"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GET_NOBOMSBB';
        SIGNAL exp_procedure; 
    END IF;  
      
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_GET_UIBOM"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_PBOM_GET_UIBOM';
        SIGNAL exp_procedure; 
    END IF;      
      
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_POST_TO_PBOM"(v_change_id, v_product_group, v_subprc_exitcode);
    IF v_subprc_exitcode <> 0 THEN
        p_out_exitmess := 'ERROR OCCUR IN PRC_POST_TO_PBOM';
        SIGNAL exp_procedure; 
    END IF;  

    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
     
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :v_logidi,
	   			                                I_EVENT_NAME => :v_full_name,
					                            I_MODULE     => 'EBGCFE');     

END;