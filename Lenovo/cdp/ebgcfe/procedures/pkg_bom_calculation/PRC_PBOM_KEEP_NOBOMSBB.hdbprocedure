PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_bom_calculation::PRC_PBOM_KEEP_NOBOMSBB" ( 
	IN p_change_id      VARCHAR(100),
    IN p_product_group  VARCHAR(20),
    OUT p_out_exitcode  NUMBER
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA 
/************************************************************************
*name       : PRC_PBOM_KEEP_NOBOMSBB             
*function   : Product BOM - Keep no bom SBBs
*input      ：p_change_id : change id / p_product_group : product group
*output     : p_out_exitcode : error code
*author     : Eric Zhou
*CreateDate : 2014-11-12
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/		
	AS
	    v_change_id         VARCHAR2(100) := p_change_id;
        v_product_group     VARCHAR2(20)  := p_product_group;
        v_prc_name          VARCHAR2(30)  := 'PRC_PBOM_KEEP_NOBOMSBB';
        v_g_pkg_name        VARCHAR2(30) := 'PKG_BOM_CALCULATION';        
        v_full_name         VARCHAR2(60)  := v_g_pkg_name ||'.'|| v_prc_name;

        v_nobom_ksbb_pg     VARCHAR2(10);
        v_debug 	        VARCHAR(20);
        v_init_date         TIMESTAMP; 
        v_logidi            INTEGER := 0;
		v_logidj            INTEGER := 0;
		v_logidk            INTEGER := 0;
		v_logidl            INTEGER := 0;
		v_count             INTEGER;		
------------package parameter----------------------------			
		v_time              DECIMAL(17,3);
		v_step_counter      INTEGER       := 0;
    	v_taking_time       DECIMAL(17,3);
		v_runlvl            VARCHAR(20);
		v_g_curr_date       DATE         := CURRENT_DATE;	
		v_exists			INTEGER;	
BEGIN

    -- Exception 
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299    --HANA SQL Error Code 1299--No data found
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
    END;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        p_out_exitcode := ::SQL_ERROR_CODE;
        CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
                                                    I_LOGSID     => :v_logidi,
                                                    I_EVENT_NAME => :v_full_name,
                                                    I_MODULE     => 'EBGCFE',
                                                    I_MESSAGE    => 'ERROR',
                                                    I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' ||
                                                                    substr(::SQL_ERROR_MESSAGE, 1, 1000) || ' (' ||substr(::SQL_ERROR_MESSAGE, 1, 500) || ')'); 
              
    END;

    p_out_exitcode := -1;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 
/****************Translation of Merge into********************/   

    insert into CAL_RUNTIME(PKG_NAME,PROC_NAME,START_T,PRD_GROUP)
    select v_g_pkg_name,v_prc_name,CURRENT_DATE,v_product_group from dummy;

    select "cdp.ebgcfe.functions::FUNC_PKG_CONS"().C_F_DEBUG into v_debug from dummy;
    IF :v_debug = 'T'
    THEN
        v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;

    DELETE FROM MID_nobom_keysbb WHERE PRODUCT_GROUP=:v_product_group;        

    SELECT COUNT(1) INTO v_exists
      FROM conf_parameters
     WHERE pdomain = 'BOM_CALCULATION'
       AND pname   = 'KEEP_NOBOM_KEYSBB'
       AND product_group = v_product_group;
        
    IF :v_exists>0 
    THEN 
        SELECT pvalue INTO v_nobom_ksbb_pg
          FROM conf_parameters
         WHERE pdomain = 'BOM_CALCULATION'
           AND pname = 'KEEP_NOBOM_KEYSBB'
           AND product_group = v_product_group;
 	    END IF;
 	    
        IF v_nobom_ksbb_pg = 'Y'
        THEN
            INSERT INTO MID_nobom_keysbb
                (product_group, model, father, children, item_desc, plant,
                 bom_plant, sbom_plant, oem, brand, asp_prd_family, country,
                 qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
                 item_type_f, item_type_c, bom_lvl, cost_plant, action, status,
                 sys_created_date, sys_created_by, sys_last_modified_date,
                 sys_last_modified_by, is_basesbb, subgeo, TYPE, swrc, curr)
            SELECT t1.product_group, t1.model, t1.father, t1.children, t2.item_desc,
                   t1.plant, t1.bom_plant, t1.sbom_plant, t1.oem, t1.brand,
                   t1.asp_prd_family, t1.country,
                   CASE WHEN item_type_m = 'CTO' THEN 1
                     ELSE qtyper END AS qtyper,
                    t1.altgrup, t1.altpri,
                   CASE WHEN item_type_m = 'CTO' THEN 100
                     ELSE altpercent END AS altpercent,
                   t1.costflag, t1.item_type_m, t1.item_type_f,
                   t1.item_type_c, t1.bom_lvl, t1.cost_plant, t1.action, t1.status,
                   t1.sys_created_date, t1.sys_created_by, t1.sys_last_modified_date,
                   t1.sys_last_modified_by, 0 AS is_basesbb, t1.subgeo, t1.TYPE, t1.swrc,
                   t1.curr
              FROM MID_biz_pbom t1, UI_item t2
             WHERE t1.item_type_c   = 'SBB'
               AND t1.bom_lvl       = 'MTM'
               AND t1.product_group = :v_product_group
               AND t1.product_group = t2.product_group
               AND t1.children      = t2.item
               AND EXISTS(SELECT 1 FROM UI_key_sbb t3
                           WHERE --Modified by Zhoubinbin 20140728
                                 t3.product_group = t1.product_group
                             AND t3.brand         = t1.brand
                             AND t3.basic_name    = TRIM(substr(t2.item_desc, 1,instr(t2.item_desc, ' ', 1, 2))))
               AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t4
                               WHERE t4.sbom_plant    = t1.sbom_plant
                                 AND t4.father        = t1.children
                                 AND t4.bom_lvl       = 'SBB'
                                 AND t4.product_group = t1.product_group);

            --Add for VAO 2013-4-22
            INSERT INTO MID_nobom_keysbb
                (product_group, model, father, children, item_desc, plant,
                 bom_plant, sbom_plant, oem, brand, asp_prd_family, country,
                 qtyper, altgrup, altpri, altpercent, costflag, item_type_m,
                 item_type_f, item_type_c, bom_lvl, cost_plant, action, status,
                 sys_created_date, sys_created_by, sys_last_modified_date,
                 sys_last_modified_by, is_basesbb, subgeo, TYPE, swrc, curr)
            SELECT t1.product_group, t1.model, t1.father, t1.children, t2.item_desc,
                   t1.plant, t1.bom_plant, t1.sbom_plant, t1.oem, t1.brand,
                   t1.asp_prd_family, t1.country,
                   CASE WHEN item_type_m = 'CTO' THEN 1
                     ELSE qtyper END AS qtyper,
                    t1.altgrup, t1.altpri,
                   CASE WHEN item_type_m = 'CTO' THEN 100
                     ELSE altpercent END AS altpercent,
                   t1.costflag, t1.item_type_m, t1.item_type_f,
                   t1.item_type_c, t1.bom_lvl, t1.cost_plant, t1.action, t1.status,
                   t1.sys_created_date, t1.sys_created_by, t1.sys_last_modified_date,
                   t1.sys_last_modified_by, 0 AS is_basesbb, t1.subgeo, t1.type, t1.swrc,
                   t1.curr
              FROM MID_biz_pbom t1, UI_item t2
             WHERE t1.item_type_c   = 'SBB'
               AND t1.bom_lvl       = 'MTM'
               AND t1.product_group = :v_product_group
               AND t1.product_group = t2.product_group
               AND t1.children      = t2.item
               AND EXISTS(SELECT 1 FROM UI_part_selected t3
                           WHERE t3.product_group = t1.product_group
                             AND t3.part_number   = t1.children)
               AND NOT EXISTS(SELECT 1 FROM MID_biz_pbom t4
                               WHERE t4.sbom_plant    = t1.sbom_plant
                                 AND t4.father        = t1.children
                                 AND t4.bom_lvl       = 'SBB'
                                 AND t4.product_group = t1.product_group);

             UPDATE MID_nobom_keysbb t1
                SET is_basesbb = 1
              WHERE EXISTS(SELECT 1 FROM UI_sbbcategory t2
                            WHERE t2.bbid          = t1.children
                              AND t2.cost_category = 'BASE'
                              AND t2.product_group = t1.product_group)
                AND item_type_m   = 'CTO'
                AND product_group = :v_product_group;

     END IF;

     IF :v_debug = 'T'
     THEN
         v_step_counter := v_step_counter + 1;
         v_taking_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3')) - v_time;
         
         IF :v_taking_time < 0 THEN    v_taking_time := :v_taking_time + 86400.000;   END IF;            
         
         CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'INFO',
                                                     I_LOGSID     => :v_logidl,
                                                     I_EVENT_NAME => :v_full_name,
                                                     I_MODULE     => 'EBGCFE',
									                 I_MESSAGE    => 'step '||to_char(:v_step_counter)||': ' ||
									                                 to_char(:v_taking_time) || ' sec'); 
            
         v_time := to_decimal(to_char(CURRENT_TIMESTAMP, 'sssss.ff3'));
    END IF;

    update CAL_RUNTIME x 
       set end_t=CURRENT_DATE
     where x.pkg_name  = v_g_pkg_name 
       and x.proc_name = v_prc_name 
       and end_t is null 
       and prd_group   = v_product_group;
        
    p_out_exitcode := 0;
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :v_logidi,
                                                I_EVENT_NAME => :v_full_name,
                                                I_MODULE     => 'EBGCFE'); 

    exec 'SET ''v_step_counter_bom_calculation'' = '''||v_step_counter||'''';       
        
END;