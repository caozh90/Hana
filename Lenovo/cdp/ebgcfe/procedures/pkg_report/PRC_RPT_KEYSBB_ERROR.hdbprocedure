PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_report::PRC_RPT_KEYSBB_ERROR" (
    IN  p_in_product_group      VARCHAR(40),
	OUT p_out_exitcode          INTEGER,
    OUT p_out_exitmess          VARCHAR(500) 
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
AS
    v_g_pkg_name        VARCHAR(30)  := 'PKG_REPORT'; 
    v_prc_name          VARCHAR(30)  := 'PRC_RPT_KEYSBB_ERROR';
    v_full_name         VARCHAR(60)  := :v_g_pkg_name ||'.'|| :v_prc_name;
    logidi              INTEGER      := 0;
BEGIN
/***************************** 
-- Author:      zhoubinbin
-- Create date: 2016-02-25
-- Description: missing key basic name in FG BOM
 *****************************/
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := SUBSTR(::SQL_ERROR_MESSAGE, 1, 500 );  
 	 	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE        => 'PROC_ERROR',
 	 	                                            I_LOGSID      => :logidi,
 	 	                                            I_EVENT_NAME  => :v_full_name,
 	 	                                            I_MODULE      => 'EBGCFE',
		                                            I_MESSAGE     => 'ERROR',
		                                            I_DETAIL      => TO_CHAR(::SQL_ERROR_CODE) || ':' ||
                                                                     SUBSTR(::SQL_ERROR_MESSAGE, 1, 500) );                                   
    END;
    
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                 I_LOGSID     => :logidi,
		                                         I_EVENT_NAME => :v_full_name,
		                                         I_MODULE     => 'EBGCFE'); 
		                                         

    DELETE FROM RPT_KEYSBB_ERROR;
		  
	TEMP_TABLE1 = SELECT * FROM (
	                  SELECT CYCLE, PRODUCT_GROUP, MODEL, BRAND, ASP_PRD_FAMILY AS FAMILY, PLANT
	                    FROM BIZ_CBOM_MTMSBB
	                   WHERE PRODUCT_GROUP = :P_IN_PRODUCT_GROUP
	                  UNION
	                  SELECT CYCLE, PRODUCT_GROUP, MODEL, BRAND, ASP_PRD_FAMILY AS FAMILY, PLANT
	                    FROM BIZ_CBOM_SWRCOST
	                   WHERE PRODUCT_GROUP = :P_IN_PRODUCT_GROUP
	                     AND BOM_LVL       = 'MTM') T1
	              WHERE NOT EXISTS(SELECT 1 FROM UI_KEY_SBB T2
	                                WHERE T2.PRODUCT_GROUP = T1.PRODUCT_GROUP
	                                  AND T2.BRAND         = T1.BRAND
	                                  AND T2.FAMILY        = T1.FAMILY
	                                  AND T2.BASIC_NAME IS NULL);
	                  
	TEMP_TABLE2 = SELECT * FROM ( 
	                  SELECT CYCLE, PRODUCT_GROUP, MODEL, BRAND, ASP_PRD_FAMILY AS FAMILY, PLANT,
	                         LEFT(ITEM_DESC, LOCATE(ITEM_DESC, ' ', 1, 2)-1) AS BASIC_NAME
	                    FROM BIZ_CBOM_MTMSBB
	                   WHERE PRODUCT_GROUP = :P_IN_PRODUCT_GROUP
	                  UNION
	                  SELECT CYCLE, PRODUCT_GROUP, MODEL, BRAND, ASP_PRD_FAMILY AS FAMILY, PLANT,
	                         LEFT(ITEM_DESC, LOCATE(ITEM_DESC, ' ', 1, 2)-1) AS BASIC_NAME
	                    FROM BIZ_CBOM_SWRCOST
	                   WHERE PRODUCT_GROUP = :P_IN_PRODUCT_GROUP
	                     AND BOM_LVL       = 'MTM') T1
	               WHERE NOT EXISTS(SELECT 1 FROM UI_KEY_SBB T2
	                                WHERE T2.PRODUCT_GROUP = T1.PRODUCT_GROUP
	                                  AND T2.BRAND         = T1.BRAND
	                                  AND T2.FAMILY        = T1.FAMILY
	                                  AND T2.BASIC_NAME IS NULL);
	                  
    INSERT INTO RPT_KEYSBB_ERROR
        (CYCLE, PRODUCT_GROUP, BRAND, FAMILY, PLANT, PART_NUMBER, DESCRIPTION, 
         BASIC_NAME, COMMODITY, COST, REASON_ID, REASON, ACTION, STATUS, 
         SYS_CREATED_DATE, SYS_CREATED_BY, SYS_LAST_MODIFIED_DATE, 
         SYS_LAST_MODIFIED_BY)
    SELECT T1.CYCLE, T1.PRODUCT_GROUP, T1.BRAND, T1.FAMILY, T1.PLANT, T1.MODEL, NULL,
           T2.BASIC_NAME, NULL, NULL, 1, 'L1 SBB missed in cost BOM', 'INSERT', 
           'ACTIVE', CURRENT_TIMESTAMP, :v_full_name, CURRENT_TIMESTAMP,
           :v_full_name
      FROM :TEMP_TABLE1 T1, UI_KEY_SBB T2
     WHERE T1.PRODUCT_GROUP = T2.PRODUCT_GROUP
       AND T1.BRAND         = T2.BRAND
       AND T1.FAMILY        = T2.FAMILY
       AND NOT EXISTS(SELECT 1 FROM :TEMP_TABLE2 T3
                       WHERE T3.PRODUCT_GROUP = T1.PRODUCT_GROUP
                         AND T3.MODEL         = T1.MODEL
                         AND T3.PLANT         = T1.PLANT
                         AND T3.BASIC_NAME    = T2.BASIC_NAME);
                         
    INSERT INTO RPT_KEYSBB_ERROR
        (CYCLE, PRODUCT_GROUP, BRAND, FAMILY, PLANT, PART_NUMBER, DESCRIPTION, 
         BASIC_NAME, COMMODITY, COST, REASON_ID, REASON, ACTION, STATUS, 
         SYS_CREATED_DATE, SYS_CREATED_BY, SYS_LAST_MODIFIED_DATE, 
         SYS_LAST_MODIFIED_BY)
    SELECT T1.CYCLE, T1.PRODUCT_GROUP, T1.BRAND, T1.FAMILY, T1.PLANT, T1.MODEL, NULL,
           T2.BASIC_NAME, NULL, NULL, 1, 'L1 SBB missed in cost BOM', 'INSERT', 
           'ACTIVE', CURRENT_TIMESTAMP, :v_full_name, CURRENT_TIMESTAMP,
           :v_full_name
      FROM :TEMP_TABLE1 T1, UI_KEY_SBB T2
     WHERE T1.PRODUCT_GROUP = T2.PRODUCT_GROUP
       AND T1.BRAND         = T2.BRAND
       AND T2.FAMILY        = 'ALL'
       AND NOT EXISTS(SELECT 1 FROM :TEMP_TABLE2 T3
                       WHERE T3.PRODUCT_GROUP = T1.PRODUCT_GROUP
                         AND T3.MODEL         = T1.MODEL
                         AND T3.PLANT         = T1.PLANT
                         AND T3.BASIC_NAME    = T2.BASIC_NAME)
       AND NOT EXISTS(SELECT 1 FROM RPT_KEYSBB_ERROR T4
                       WHERE T4.PRODUCT_GROUP = T1.PRODUCT_GROUP
                         AND T4.PART_NUMBER   = T1.MODEL
                         AND T4.BASIC_NAME    = T2.BASIC_NAME
                         AND T4.REASON_ID     = 1);
	       
    p_out_exitcode := 0;
    p_out_exitmess := 'SUCCESSFUL';
     
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');  		                                         
END;
		               