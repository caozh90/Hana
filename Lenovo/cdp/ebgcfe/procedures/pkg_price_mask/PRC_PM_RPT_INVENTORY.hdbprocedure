PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_price_mask::PRC_PM_RPT_INVENTORY"(
  IN  P_IN_PRODUCT_GROUP   VARCHAR(20),
  IN  P_IN_TIME_FENCE      VARCHAR(40),
  IN  P_IN_PROFIT_CENTER   VARCHAR(40),
  IN  P_IN_OEM_NAME        VARCHAR(40),
  OUT P_OUT_EXITCODE       INTEGER,
  OUT P_OUT_EXITMESSAGE    VARCHAR(500)
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA "EBGCFE"
	--READS SQL DATA  
/************************************************************************
*name       : PRC_GET_PM_BOM      
*function   : Get price mask's BOM from Z_PCDW_BOM table
*input      ：   p_product_group : product group
*output     : p_exit_code : error code / p_exit_message : error message
*author     : Binbin Zhou
*CreateDate : 2015-10-28
*UpdateDate :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/	
	AS
BEGIN
    -- data
    DECLARE v_pkg_name          VARCHAR(30) := 'PKG_PRICE_MASK';
    DECLARE v_prc_name          VARCHAR(30) := 'PRC_PM_RPT_INVENTORY';
    DECLARE v_full_name         VARCHAR(60) := :v_pkg_name ||'.'|| :v_prc_name;
    DECLARE logidi              INTEGER     := 0;
    DECLARE v_row_count         INTEGER     := 0;
    DECLARE v_node_lvl          INTEGER     := 0;

    -- exception 
    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN
        p_out_exitcode    := ::SQL_ERROR_CODE;
        p_out_exitmessage := LEFT(::SQL_ERROR_MESSAGE, 500);
                          
	    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_ERROR',
	                                                I_LOGSID     => :logidi,
		                                            I_EVENT_NAME => :v_full_name, 
		                                            I_MODULE     => 'EBGCFE',
		                                            I_MESSAGE    => 'ERROR', 
		                                            I_DETAIL     => to_char(::SQL_ERROR_CODE) || ':' || 
		                                                            substr(::SQL_ERROR_MESSAGE, 1, 500) ); 
		
		RESIGNAL;                                                               
    END;   
    
    -- process logic
    p_out_exitcode    := -1;
    p_out_exitmessage := 'FAILED';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');
		                                        
    DELETE FROM pm_rpt_openinv
    WHERE product_group    = :p_in_product_group
      AND time_fence       = :p_in_time_fence
      AND profit_center    = :p_in_profit_center
      AND oem_name         = :p_in_oem_name;
      
    DELETE FROM pm_rpt_inventory
    WHERE product_group    = :p_in_product_group
      AND time_fence       = :p_in_time_fence
      AND profit_center    = :p_in_profit_center
      AND oem_name         = :p_in_oem_name;      
                            
    INSERT INTO pm_rpt_openinv
        (product_group, time_fence, profit_center, oem_name, parts, open_inv_qty, 
         open_inv_total_income, open_inv_total_cost, user_action)
    SELECT product_group, :p_in_time_fence, profit_center, oem_name, parts, open_inv_qty, 
           open_inv_total_income, open_inv_total_cost, 'OPEN_INV' AS user_action
      FROM pm_rpt_openinv
     WHERE product_group           = :p_in_product_group
       AND RIGHT(time_fence, 8)    = LEFT(:p_in_time_fence, 8)
       AND profit_center           = :p_in_profit_center
       AND oem_name                = :p_in_oem_name
       AND user_action             = 'LEFT_INV';
    
    tab_new_sales = SELECT product_group, time_fence, profit_center, oem_name, part_no, 
                           SUM(sales_qty) AS sales_qty, SUM(sales_total_incoming) AS sales_total_incoming,
                           SUM(sales_total_cost) AS sales_total_cost, 'NEW_SALES' AS source
                      FROM pm_ui_sales_part
                     WHERE product_group = :p_in_product_group
                       AND time_fence    = :p_in_time_fence
                       AND profit_center = :p_in_profit_center
                       AND oem_name      = :p_in_oem_name
                    GROUP BY product_group, time_fence, profit_center, oem_name, part_no;
                       
    tab_open_inv = SELECT product_group, time_fence, profit_center, oem_name, parts,
                          SUM(open_inv_qty) AS open_inv_qty, SUM(open_inv_total_income) AS open_inv_total_income,
                          SUM(open_inv_total_cost) AS open_inv_total_cost, 'OPEN_INV' AS source
                     FROM pm_rpt_openinv
                    WHERE product_group = :p_in_product_group
                      AND time_fence    = :p_in_time_fence
                      AND profit_center = :p_in_profit_center
                      AND oem_name      = :p_in_oem_name
                      AND user_action   = 'OPEN_INV'
                   GROUP BY product_group, time_fence, profit_center, oem_name, parts;
                   
    tab_consum   = SELECT t1.product_group, t1.time_fence, t1.profit_center, t1.oem_name,
                          t2.bs_part, SUM(t1.gr_qty*t2.part_qty) AS qty
                     FROM pm_ui_gr_mtm t1, pm_ui_bs_bom t2
                    WHERE t1.product_group = t2.product_group
                      AND t1.mtm_no        = t2.item
                      AND t1.product_group = :p_in_product_group
                      AND t1.time_fence    = :p_in_time_fence
                      AND t1.profit_center = :p_in_profit_center
                      AND t1.oem_name      = :p_in_oem_name
                   GROUP BY t1.product_group, t1.time_fence, t1.profit_center, t1.oem_name,
                            t2.bs_part;
    
    INSERT INTO pm_rpt_inventory
        (product_group, time_fence, profit_center, oem_name, parts, new_sales_qty, 
         new_sales_total_income, new_sales_total_cost, open_inv_qty, open_inv_total_income, 
         open_inv_total_cost, available_qty, available_total_income, available_total_cost)
    SELECT product_group, time_fence, profit_center, oem_name, part_no, 
           SUM(MAP(source, 'NEW_SALES', sales_qty, 0))            AS new_sales_qty,
           SUM(MAP(source, 'NEW_SALES', sales_total_incoming, 0)) AS new_sales_total_income,
           SUM(MAP(source, 'NEW_SALES', sales_total_cost, 0))     AS new_sales_total_cost,
           SUM(MAP(source, 'OPEN_INV', sales_qty, 0))             AS open_inv_qty,
           SUM(MAP(source, 'OPEN_INV', sales_total_incoming, 0))  AS open_inv_total_income,
           SUM(MAP(source, 'OPEN_INV', sales_total_cost, 0))      AS open_inv_total_cost,     
           SUM(sales_qty)                                         AS available_qty,
           SUM(sales_total_incoming)                              AS available_total_income,
           SUM(sales_total_cost)                                  AS available_total_cost
      FROM (SELECT product_group, time_fence, profit_center, oem_name, part_no, sales_qty, 
                   sales_total_incoming, sales_total_cost, source
              FROM :tab_new_sales
            UNION ALL
            SELECT product_group, time_fence, profit_center, oem_name, parts, open_inv_qty, 
                   open_inv_total_income, open_inv_total_cost, source
             FROM :tab_open_inv)
    GROUP BY product_group, time_fence, profit_center, oem_name, part_no;
    
    UPDATE pm_rpt_inventory
       SET new_sales_total_mask = new_sales_total_income - new_sales_total_cost,
           new_sales_unit_mask  = MAP(new_sales_qty, 0, 0, (new_sales_total_income - new_sales_total_cost)/new_sales_qty),
           open_inv_total_mask  = open_inv_total_income - open_inv_total_cost,
           open_inv_unit_mask   = MAP(open_inv_qty, 0, 0, (open_inv_total_income - open_inv_total_cost)/open_inv_qty),
           available_total_mask = available_total_income - available_total_cost,
           available_unit_mask  = MAP(available_qty, 0, 0, (available_total_income - available_total_cost)/available_qty),
           consumed_unit_mask   = MAP(available_qty, 0, 0, (available_total_income - available_total_cost)/available_qty)
     WHERE product_group = :p_in_product_group
       AND time_fence    = :p_in_time_fence
       AND profit_center = :p_in_profit_center
       AND oem_name      = :p_in_oem_name;
       
    UPDATE pm_rpt_inventory t1
       SET t1.consumed_qty = t2.qty
      FROM :tab_consum t2
     WHERE t1.product_group = t2.product_group
       AND t1.time_fence    = t2.time_fence
       AND t1.profit_center = t2.profit_center
       AND t1.oem_name      = t2.oem_name
       AND t1.parts         = t2.bs_part;
       
    UPDATE pm_rpt_inventory
       SET consumed_total_income = MAP(available_qty, 0, 0, (available_total_income/available_qty)*consumed_qty),
           consumed_total_cost   = MAP(available_qty, 0, 0, (available_total_cost/available_qty)*consumed_qty)
     WHERE product_group = :p_in_product_group
       AND time_fence    = :p_in_time_fence
       AND profit_center = :p_in_profit_center
       AND oem_name      = :p_in_oem_name;
       
    UPDATE pm_rpt_inventory
       SET consumed_total_mask  = consumed_total_income - consumed_total_cost,
           end_inv_qty          = CASE WHEN available_qty - consumed_qty < 0 THEN 0 ELSE available_qty - consumed_qty END,
           end_inv_total_income = CASE WHEN available_total_income - consumed_total_income < 0 THEN 0 
                                       ELSE available_total_income - consumed_total_income END,
           end_inv_total_cost   = CASE WHEN available_total_cost - consumed_total_cost < 0 THEN 0 
                                       ELSE available_total_cost - consumed_total_cost END
     WHERE product_group = :p_in_product_group
       AND time_fence    = :p_in_time_fence
       AND profit_center = :p_in_profit_center
       AND oem_name      = :p_in_oem_name;  
       
    UPDATE pm_rpt_inventory
       SET end_inv_total_mask = end_inv_total_income - end_inv_total_cost,
           end_inv_unit_mask  = MAP(end_inv_qty, 0, 0, (end_inv_total_income - end_inv_total_cost)/end_inv_qty)                                    
     WHERE product_group = :p_in_product_group
       AND time_fence    = :p_in_time_fence
       AND profit_center = :p_in_profit_center
       AND oem_name      = :p_in_oem_name;  
              
    UPDATE pm_rpt_inventory
       SET total_minus_inventory = CASE WHEN available_qty - consumed_qty > 0 THEN 0
                                        ELSE available_qty - consumed_qty END
     WHERE product_group = :p_in_product_group
       AND time_fence    = :p_in_time_fence
       AND profit_center = :p_in_profit_center
       AND oem_name      = :p_in_oem_name;
       
    INSERT INTO pm_rpt_openinv
        (product_group, time_fence, profit_center, oem_name, parts, open_inv_qty, 
         open_inv_total_income, open_inv_total_cost, user_action)
    SELECT product_group, time_fence, profit_center, oem_name, parts, end_inv_qty, 
           end_inv_total_income, end_inv_total_cost, 'LEFT_INV' AS user_action
      FROM pm_rpt_inventory
     WHERE product_group  = :p_in_product_group
       AND time_fence     = :p_in_time_fence
       AND profit_center  = :p_in_profit_center
       AND oem_name       = :p_in_oem_name;   
       
    UPDATE pm_rpt_inventory t1
       SET t1.function_type = t2.function_type
      FROM pm_ui_time_fence t2
     WHERE t1.product_group = t2.product_group
       AND t1.time_fence    = t2.time_fence
       AND t1.profit_center = t2.profit_center
       AND t1.oem_name      = t2.oem_name
       AND t1.product_group = :p_in_product_group
       AND t1.time_fence    = :p_in_time_fence
       AND t1.profit_center = :p_in_profit_center
       AND t1.oem_name      = :p_in_oem_name;
       
    UPDATE pm_rpt_inventory t1
       SET t1.parts_desc = t2.item_desc
      FROM ui_item t2
     WHERE t1.product_group = t2.product_group
       AND t1.parts         = t2.item        
       AND t1.product_group = :p_in_product_group
       AND t1.time_fence    = :p_in_time_fence
       AND t1.profit_center = :p_in_profit_center
       AND t1.oem_name      = :p_in_oem_name;    
      
    p_out_exitcode    := 0;
    p_out_exitmessage := 'SUCCESSFUL';
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
	                                            I_EVENT_NAME => :v_full_name,
	                                            I_MODULE     => 'EBGCFE');  	
END;
