PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cost_tape::updateUiCostTape" ( 
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_COST_TAPE_T"
		,IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_COST_TAPE_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS 
/************************************************************************
*name      :                     updateUiCostTape
*function    :               
*input     ï¼š               
*output     :                
*author     :                     Fangyuan
*CreateDate    :                  2014.12.11
*UpdateDate  :        
*************************************************************************/	

		aI_DETAIL NVARCHAR(300) :='';	
        alogide INTEGER :=0;	
        privilegeExists  NVARCHAR(300)  ;		
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
  DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
        aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.UI_COST_TAPE::updateUiCostTape error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
        
        CALL "EX_LOG"."cdp.log.procedures::logProc"(
             I_TYPE=>'PROC_ERROR'   
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.UI_COST_TAPE::updateUiCostTape'
            ,I_MODULE=>'EBGCFE'
            ,I_MESSAGE=>'E'||::SQL_ERROR_CODE
            ,I_DETAIL=>:aI_DETAIL
        );  
 
        errorInfo = select 400 as http_status_code, 
            'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
            aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_cost_tape::editable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;

 --START
    CALL "EX_LOG"."cdp.log.procedures::logProc"(
        I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.UI_COST_TAPE::updateUiCostTape'
       ,I_MODULE=>'EBGCFE'
    ); 
    
   UPDATE "EBGCFE"."UI_COST_TAPE" a SET(a.M1,a.M2,a.M3,a.M4,a.M5,a.M6,a.M7,a.M8,a.M9,a.M10,a.M11,a.M12,a.M13,a.M14,a.M15,a.M16,a.M17,a.M18,a.SYS_LAST_MODIFIED_DATE,a.SYS_LAST_MODIFIED_BY)=
    (b.M1,b.M2,b.M3,b.M4,b.M5,b.M6,b.M7,b.M8,b.M9,b.M10,b.M11,b.M12,b.M13,b.M14,b.M15,b.M16,b.M17,b.M18,CURRENT_TIMESTAMP,session_user)
    from :newInfo b 
    where a."PRODUCT_GROUP"=b."PRODUCT_GROUP"
          and a."PART_NUMBER" = b."PART_NUMBER" 
          and a."PLANT"=b."PLANT"
          and a."COST_ELEM"=b."COST_ELEM";
          
 insert into  "EBGCFE"."UI_COST_TAPE_LOG"(
            "CYCLE",
            "PRODUCT_GROUP",
            "PART_NUMBER",
            "PLANT",
            "COST_ELEM",
            "M1",
            "M2",
            "M3",
            "M4",
            "M5",
            "M6",
            "M7",
            "M8",
            "M9",
            "M10",
            "M11",
            "M12", 
            "M13",
            "M14",
            "M15",
            "M16",
            "M17",
            "M18",           
            "ACTION",
            "STATUS",
            "SYS_CREATED_DATE",
            "SYS_CREATED_BY",
            "SYS_LAST_MODIFIED_DATE",
            "SYS_LAST_MODIFIED_BY",
            "CHANGE_ID",
            "CHANGE_ACTION",
            "AT_MODIFIED_BY",
            "AT_ACTION",
            "AT_MODIFIED_ON",
            "AT_MILLIS"             
    )   
    select "CYCLE",
            "PRODUCT_GROUP",
            "PART_NUMBER",
            "PLANT",
            "COST_ELEM",
            "M1",
            "M2",
            "M3",
            "M4",
            "M5",
            "M6",
            "M7",
            "M8",
            "M9",
            "M10",
            "M11",
            "M12", 
            "M13",
            "M14",
            "M15",
            "M16",
            "M17",
            "M18",        
            "ACTION",
            "STATUS",
            "SYS_CREATED_DATE",
            "SYS_CREATED_BY",
            "SYS_LAST_MODIFIED_DATE",
            "SYS_LAST_MODIFIED_BY",
            "CHANGE_ID",
            "CHANGE_ACTION",
            SESSION_USER,
            'UPDATE',
            CURRENT_DATE,
            TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))         
    from "EBGCFE"."UI_COST_TAPE" a
    where exists(select 1 from :newInfo b where a."PRODUCT_GROUP"=b."PRODUCT_GROUP" 
          and a."PART_NUMBER"=b."PART_NUMBER" and a."PLANT"=b."PLANT" and a."COST_ELEM"=b."COST_ELEM");         
    
    
--END    
        aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.UI_COST_TAPE::updateUiCostTape ('||''||' ,) successfully updated . ';
        CALL "EX_LOG"."cdp.log.procedures::logProc"(
            I_TYPE=>'PROC_END'  
            ,I_LOGSID=>:alogide
            ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.UI_COST_TAPE::updateUiCostTape'
            ,I_MODULE=>'EBGCFE'
            ,I_DETAIL=>:aI_DETAIL
        );    

END;