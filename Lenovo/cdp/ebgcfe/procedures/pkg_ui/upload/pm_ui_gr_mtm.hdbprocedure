PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::pm_ui_gr_mtm" 
(
	IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.PM_UI_GR_MTM_S"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	
/************************************************************************
*name        :      pm_ui_gr_mtm
*function    :      upload data pm_ui_gr_mtm          
*input       ：              business_name etc
*output      :                
*author      :      zhaodan1
*CreateDate  :      2016.3.8
*UpdateDate  :        
*************************************************************************/ 

	AS
	path varchar(100):='cdp.ebgcfe.procedures.pkg_ui.upload';
	proc_name varchar(100) :='pm_ui_gr_mtm';
 	sys_last_modified_date TIMESTAMP;
	log_detail NVARCHAR(300) :='';
	error_count int;
	currentUser varchar(100);
	create_time TIMESTAMP;
	business_code nvarchar(20);
	business_name nvarchar(100);
	table_name varchar(1000) := 'PM_UI_GR_MTM';
	dummy_pk varchar(40);
	success_count int := 0;
BEGIN
	--exception     
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299; 
    DECLARE EXIT HANDLER FOR no_data_found   
     BEGIN      
     	--call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::pm_ui_gr_mtm_err"(:newInfo);
     END;     

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	--call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::pm_ui_gr_mtm_err"(:newInfo);
    END; 
       
	--procedure begin
--
DELETE FROM "EBGCFE"."PM_UI_GR_MTM" t1
 WHERE EXISTS(SELECT 1 FROM :newInfo t2
               WHERE t2.product_group = t1.product_group
                 AND t2.time_fence    = t1.time_fence
                 AND t2.oem_name      = t1.oem_name
                 AND t2.profit_center = t1.profit_center); 
--	
	select top 1 SEQ,BUSINESS_NAME into business_code,business_name  from :newInfo;
	
	--赋值时间戳和用户名
	SELECT SESSION_USER INTO currentUser FROM DUMMY;
	SELECT CURRENT_UTCTIMESTAMP INTO create_time FROM DUMMY;
	

 							
--Deaal with SUCCESS data    

       newInfo_success = 
          SELECT "EBGCFE"."cdp.ebgcfe.sequences::upload_pm_ui_gr_mtm_dumyPK".NEXTVAL DUMMY_PK,
	 	       a.PRODUCT_GROUP as PRODUCT_GROUP,
	 	       OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,a.MTM_NO as MTM_NO,b.ITEM_DESC as MTM_DESC,
		       GR_DATE,GR_QTY,/*USER_ACTION,STATUS,*/'CURRENT' TIME_FENCE_TYPE ,
	 	       :create_time SYS_CREATED_DATE,:currentUser SYS_CREATED_BY,
	 	       :create_time SYS_LAST_MODIFIED_DATE,:currentUser SYS_LAST_MODIFIED_BY
	 	FROM :newInfo as a,"EBGCFE"."UI_ITEM" as b
	 	WHERE (B.EOL_STATUS = 'OL' AND 
	 	         ( (LENGTH(a.MTM_NO)<16 AND a.MTM_NO = b.ITEM ) OR
	 	           (LENGTH(a.MTM_NO)>=16 AND LEFT(a.MTM_NO,LENGTH(a.MTM_NO)-16) = b.ITEM ) 
	 	         ) 
	 	       )AND
	 		  a.OEM_NAME IN(  	
 	                           SELECT ITEM_VALUE
								 FROM "_SYS_BIC"."cdp.ebgcfe.models.ui_pm_gr_mtm/CV_PAR_OEM_FUNC_PRO" 
								     ('PLACEHOLDER' = ('$$INPUT_TYPE$$', 'OEM_NAME'))
					 	    ) AND
			   a.FUNCTION_TYPE  IN(  	
 	                           SELECT ITEM_VALUE
								 FROM "_SYS_BIC"."cdp.ebgcfe.models.ui_pm_gr_mtm/CV_PAR_OEM_FUNC_PRO" 
								     ('PLACEHOLDER' = ('$$INPUT_TYPE$$', 'FUNCTION_TYPE'))
							 	    ) AND
			   a.TIME_FENCE IN(  	
 	                           SELECT TIME_FENCE
								 FROM "EBGCFE"."PM_UI_TIME_FENCE"
								WHERE A.PRODUCT_GROUP = PRODUCT_GROUP
				                  AND A.TIME_FENCE    = TIME_FENCE
				                  AND A.OEM_NAME      = OEM_NAME
				                  AND A.PROFIT_CENTER = PROFIT_CENTER
				                  AND TIME_FENCE_TYPE = 'CURRENT'								
							 	    )	AND
				a.PROFIT_CENTER IN (  	
		 	                             SELECT ITEM_VALUE
										   FROM "_SYS_BIC"."cdp.ebgcfe.models.ui_pm_gr_mtm/CV_PAR_OEM_FUNC_PRO" 
										        ('PLACEHOLDER' = ('$$INPUT_TYPE$$', 'PROFIT_CENTER'))
							 			 );	 
        
      
        
		INSERT INTO "EBGCFE"."PM_UI_GR_MTM"
		      ( DUMMY_PK,
		        PRODUCT_GROUP,
		        OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,MTM_DESC,
		        GR_DATE,GR_QTY,/*USER_ACTION,STATUS,*/TIME_FENCE_TYPE,
		        SYS_CREATED_DATE,SYS_CREATED_BY,SYS_LAST_MODIFIED_DATE,SYS_LAST_MODIFIED_BY )
	 	SELECT  DUMMY_PK,
		        PRODUCT_GROUP,
		        OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,MTM_DESC,
		        GR_DATE,GR_QTY,/*USER_ACTION,STATUS,*/TIME_FENCE_TYPE,
		        SYS_CREATED_DATE,SYS_CREATED_BY,SYS_LAST_MODIFIED_DATE,SYS_LAST_MODIFIED_BY 
	 	FROM :newInfo_success 	;	
	 	
	 	select count(1) into success_count   from :newInfo_success;
	 	
	 	
	 	newInfo_error = 	 	  
	        SELECT PRODUCT_GROUP,
	 	       OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,/*MTM_DESC,*/
		       GR_DATE,GR_QTY,'CURRENT' TIME_FENCE_TYPE FROM :newInfo
	        EXCEPT
	        SELECT PRODUCT_GROUP,
	 	       OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,/*MTM_DESC,*/
		       GR_DATE,GR_QTY,'CURRENT' TIME_FENCE_TYPE  FROM :newInfo_success;
	        
	    SELECT COUNT(1) INTO error_count
        FROM :newInfo_error as a   ;  	

							 			
		IF error_count > 0 THEN
		    
	    newInfo_e = 
		    select 
		       
			    PRODUCT_GROUP ,		    OEM_NAME,
			    TIME_FENCE,			    FUNCTION_TYPE,
			    PROFIT_CENTER,		    MTM_NO ,
			    /*MTM_DESC ,*/			    GR_DATE,
			    GR_QTY,		
				'procedure'  SOURCE,
				'' ERROR_MESSAGE,          BUSINESS_NAME,
				SEQ ,    				POSITION
            from :newInfo;
		    
			CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::pm_ui_gr_mtm_err"(:newInfo_e);
		END IF;   
							 			 
	 	
	 	--insert操作需要写入日志
		INSERT INTO "EBGCFE"."PM_UI_GR_MTM_LOG"(
		                    DUMMY_PK,
							PRODUCT_GROUP,
		                    OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,MTM_DESC,
		                    GR_DATE,GR_QTY,/*USER_ACTION,STATUS,*/TIME_FENCE_TYPE,
							SYS_CREATED_DATE,
							SYS_CREATED_BY,							
							SYS_LAST_MODIFIED_DATE,
							SYS_LAST_MODIFIED_BY,
							AT_ACTION,	LOG_DATE)
		SELECT  DUMMY_PK,
		        PRODUCT_GROUP,
		        OEM_NAME,TIME_FENCE,FUNCTION_TYPE,PROFIT_CENTER,MTM_NO,MTM_DESC,
		        GR_DATE,GR_QTY,/*USER_ACTION,STATUS,*/TIME_FENCE_TYPE,
		        SYS_CREATED_DATE,
		        SYS_CREATED_BY,
		        SYS_LAST_MODIFIED_DATE,
		        SYS_LAST_MODIFIED_BY,
		        'create',  CURRENT_TIMESTAMP
	 	FROM :newInfo_success 	;	
	
		-- passing successful total numbers
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::business_info"(
			:table_name || :business_code,:business_name,:success_count,0,:table_name);

END;

