PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily" (
IN      CYCLE NVARCHAR(40),
IN	 	BRAND NVARCHAR(40) ,
IN		PROD_FAMILY NVARCHAR(100),
IN	    EOL_STATUS NVARCHAR(10),
IN	 	EOL_STARTDATE NVARCHAR(100),
IN	 	EOL_ENDDATE	NVARCHAR(100),
	 
IN	 	business_name varchar(200),
IN		SEQ   nvarchar(20),
IN 	 	position int
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	AS
/************************************************************************
*name      : ui_prodfamily              --函数名
*function  : upload数据至表ui_prodfamily并记录信息              --函数功能
*input     ：    item, vendorid, box_size, table_name, business_name, SEQ_in, position  --输入参数
*output    :                --输出参数
*author     : Gavin               --作者
*CreateDate    : 2014/12/10       --创建时间
*UpdateDate  :        --函数更改信息（包括作者、时间、更改内容等）
*************************************************************************/

		path varchar(100):='cdp.ebgcfe.procedures.pkg_ui.upload';
		proc_name varchar(100) :='ui_prodfamily';
	 	sys_last_modified_date TIMESTAMP;
		log_detail NVARCHAR(300) :='';
		logid0 INTEGER :=0;
		n int;
		validate1 int;
		validate2 int;
		table_name varchar(100) :='UI_PRODFAMILY';
		currentUser varchar(100);
		create_time TIMESTAMP;
		business_code nvarchar(20);
		CYCLE nvarchar(40) := 'CURRENT'; --该字段的默认值
		PRODUCT_GROUP NVARCHAR(10) :='EBG';
		privilegeExists  NVARCHAR(30)  ;
		
	    v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily';
        v_exitcode    DECIMAL;
BEGIN
	--exception     
    DECLARE no_data_found CONDITION FOR SQL_ERROR_CODE 1299; 
    DECLARE EXIT HANDLER FOR no_data_found   
     BEGIN 
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily_err"(::SQL_ERROR_MESSAGE,
     	:business_name,:CYCLE,:PRODUCT_GROUP,:BRAND,:PROD_FAMILY,:EOL_STATUS,:EOL_STARTDATE,:EOL_ENDDATE,:SEQ,:position);
     	
     END;     

    DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN  
     	
     	call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily_err"(::SQL_ERROR_MESSAGE,
     	 :business_name,:CYCLE,:PRODUCT_GROUP,:BRAND,:PROD_FAMILY,:EOL_STATUS,:EOL_STARTDATE,:EOL_ENDDATE,:SEQ,:position);
     	
    END; 
    --exception 
	

	--procedure begin
	
	
	business_code := :SEQ;
	--赋值时间戳和用户名
	SELECT SESSION_USER INTO currentUser FROM DUMMY;
	SELECT CURRENT_TIMESTAMP INTO create_time FROM DUMMY;
	
	select count(1) into validate1 from "EBGCFE"."CONF_PARAMETERS" where pdomain='BrandSetting' and BRAND=:BRAND;
	select count(1) into validate2 from "EBGCFE"."CONF_PARAMETERS" 
		where pdomain='UI_PRODFAMILY'  and Pname='EOL_STATUS' AND PVALUE=:EOL_STATUS;
	
	if(validate1 >0 and validate2>0) then
		select count(1) into n from "EBGCFE"."UI_PRODFAMILY" where BRAND = :BRAND and PRODUCT_GROUP = :PRODUCT_GROUP
		 AND PROD_FAMILY = :PROD_FAMILY;
	
		if n>0 then
			update "EBGCFE"."UI_PRODFAMILY" set
				EOL_STATUS = :EOL_STATUS,
				EOL_STARTDATE = :EOL_STARTDATE,
				EOL_ENDDATE = :EOL_ENDDATE,
				SYS_LAST_MODIFIED_BY = :currentUser,
				SYS_LAST_MODIFIED_DATE = :create_time,
				CYCLE = :CYCLE
			where BRAND = :BRAND and PRODUCT_GROUP = :PRODUCT_GROUP
		 		AND PROD_FAMILY = :PROD_FAMILY;
		--update操作需要写入日志
		insert into "EBGCFE"."UI_PRODFAMILY_LOG"(AT_MODIFIED_BY,AT_ACTION,AT_MODIFIED_TIME,
			CYCLE,
			PRODUCT_GROUP,
			BRAND,
			PROD_FAMILY,
     		EOL_STATUS,
     		EOL_STARTDATE,
     		EOL_ENDDATE,
		 	SYS_LAST_MODIFIED_BY,
		 	SYS_LAST_MODIFIED_DATE
		)
		VALUES
		 	(:currentUser,
		 	'update',
		 	:create_time,
		 	:CYCLE,
		 	:PRODUCT_GROUP,
		 	:BRAND,
		 	:PROD_FAMILY,
     		:EOL_STATUS,
     		:EOL_STARTDATE,
     		:EOL_ENDDATE,
		 	:currentUser,
		 	:create_time);
			
		ELSEIF n=0 THEN
			INSERT INTO "EBGCFE"."UI_PRODFAMILY"(
				CYCLE,
				PRODUCT_GROUP,
				BRAND,
				PROD_FAMILY,
	     		EOL_STATUS,
	     		EOL_STARTDATE,
	     		EOL_ENDDATE,
				SYS_CREATED_BY,
		 		SYS_CREATED_DATE,
		 		SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE
		 	)
		 	VALUES(
		 		 :CYCLE,
			 	 :PRODUCT_GROUP,
				 :BRAND,
				 :PROD_FAMILY,
		     	 :EOL_STATUS,
		     	 :EOL_STARTDATE,
		     	 :EOL_ENDDATE,
				 :currentUser,
			 	 :create_time,
			 	 :currentUser,
			 	 :create_time);
		 	
		 	--insert操作需要写入日志
			insert into "EBGCFE"."UI_PRODFAMILY_LOG"(AT_MODIFIED_BY,AT_ACTION,AT_MODIFIED_TIME,
				CYCLE,
				PRODUCT_GROUP,
				BRAND,
				PROD_FAMILY,
	     		EOL_STATUS,
	     		EOL_STARTDATE,
	     		EOL_ENDDATE,
				SYS_CREATED_BY,
		 		SYS_CREATED_DATE,
		 		SYS_LAST_MODIFIED_BY,
				SYS_LAST_MODIFIED_DATE
			)
			VALUES
			 	(:currentUser,
			 	'create',
			 	:create_time,
			 	:CYCLE,
			 	:PRODUCT_GROUP,
			 	:BRAND,
			 	:PROD_FAMILY,
	     		:EOL_STATUS,
	     		:EOL_STARTDATE,
	     		:EOL_ENDDATE,
				 :currentUser,
			 	 :create_time,
			 	 :currentUser,
			 	 :create_time);
		 	
		 	
		END IF;
		
		--Modified by Zhoubinbin 20161115, Set eol status by priority
		/*update "EBGCFE"."UI_ITEM" A 
		   set A.EOL_STATUS             = MAP(IFNULL(A.USER_EOL_STATUS, ''), '', B.EOL_STATUS, A.EOL_STATUS),
	           A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	           A.SYS_LAST_MODIFIED_BY   = session_user  
	    from "EBGCFE"."UI_PRODFAMILY" B
		where A.ASP_PRD_FAMILY=B.PROD_FAMILY
		  and A.BRAND=B.BRAND; */
		  
		/*update "EBGCFE"."UI_ITEM" A 
		   set A.FAMILY_EOL = :EOL_STATUS,
	           A.EOL_STATUS = IFNULL(MAP(LENGTH(a.user_eol_status), 0, NULL, a.user_eol_status), 
                              IFNULL(MAP(LENGTH(a.mmr_eol), 0, NULL, a.mmr_eol), 
                              IFNULL(MAP(LENGTH(a.mt_eol), 0, NULL, a.mt_eol), 
                              IFNULL(MAP(LENGTH(:eol_status), 0, NULL, :eol_status), a.eol_status)))),
		       A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	           A.SYS_LAST_MODIFIED_BY   = session_user  
		where A.ASP_PRD_FAMILY = :PROD_FAMILY
		  and A.BRAND          = :BRAND;*/
		  
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('FAMILY', :PROD_FAMILY, :v_event_name, :v_exitcode); 
		
		call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::business_info"(
			:table_name || :business_code,:business_name,1,0,:table_name);
	
		ELSEIF validate1<=0 then
			call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily_err"('"BRAND"::'||:BRAND||' is illegal',
     		 :business_name,:CYCLE,:PRODUCT_GROUP,:BRAND,:PROD_FAMILY,:EOL_STATUS,:EOL_STARTDATE,:EOL_ENDDATE,:SEQ,:position);
		 	--error log
			
		 	return;
		ELSEIF validate2<=0 then
			call "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.upload::ui_prodfamily_err"('"EOL_STATUS"::'||:EOL_STATUS||' is illegal',
     		 :business_name,:CYCLE,:PRODUCT_GROUP,:BRAND,:PROD_FAMILY,:EOL_STATUS,:EOL_STARTDATE,:EOL_ENDDATE,:SEQ,:position);
			--error log
			
			return;
	END IF;
		
	
END;