PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom" ( 
	    IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_MANUAL_BOM_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT 
	--DEFAULT SCHEMA <default_schema_name>
	AS
	    aProduct_group NVARCHAR(10);
	    aBom_level NVARCHAR(10);
	    aFather NVARCHAR(18);
	    aChildren NVARCHAR(100);
	    aPlant NVARCHAR(40);
	    aQuantity NVARCHAR(100);
	    aFlag NVARCHAR(20);

		resourceExists BIGINT;
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		
		privilegeExists  NVARCHAR(300)  ;  
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;
DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_manual_bom::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
      
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom'
       ,I_MODULE=>'EBGCFE'
   	); 

select 
	PRODUCT_GROUP,	
    BOM_LEVEL,
    FATHER,
    CHILDREN,
    PLANT,
    QUANTITY,
    FLAG
  into 
 	aProduct_group,
 	aBom_level,
	aFather,
	aChildren,
	aPlant,
	aQuantity,
	aFlag
  from :newInfo;
  
    SELECT top 1 count(1) into resourceExists FROM "EBGCFE"."UI_MANUAL_BOM" A    
     WHERE A.BOM_LEVEL = :aBom_level
     and   A.FATHER = :aFather
     and   A.CHILDREN = :aChildren
     and   A.PLANT = :aPlant;

   
    if  :resourceExists > 0 
    then
	    /*errorInfo = select 400 as http_status_code, 
	     		'the record exists' error_message, 
	     		'the record exists' DETAIL from dummy;
	     		
	     	return;*/
	    SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record exists'; 	
    end if;
    
    insert into "EBGCFE"."UI_MANUAL_BOM"
  	(PRODUCT_GROUP, BOM_LEVEL, FATHER, CHILDREN, PLANT, QUANTITY, CYCLE, SYS_LAST_MODIFIED_BY, SYS_LAST_MODIFIED_DATE, SYS_CREATED_BY, SYS_CREATED_DATE,FLAG)
  	values('EBG', :aBom_level, :aFather, :aChildren, :aPlant, :aQuantity, 'CURRENT', session_user, CURRENT_TIMESTAMP, session_user, CURRENT_TIMESTAMP,:aFlag);

/*put operation to log table*/
    insert into "EBGCFE"."UI_MANUAL_BOM_LOG"
    (
    	PRODUCT_GROUP,	
	    BOM_LEVEL,
	    FATHER,
	    CHILDREN,
	    PLANT,
	    QUANTITY,    	
    	SYS_LAST_MODIFIED_DATE,   	
    	ACTION,
    	SYS_LAST_MODIFIED_BY,
    	AT_MODIFIED_ON,
    	AT_MILLIS,
    	FLAG  	
    )
    values
    (
    	:aProduct_group,
	 	:aBom_level,
		:aFather,
		:aChildren,
		:aPlant,
		:aQuantity,
    	current_date,    	
    	'create',
    	session_user,
    	current_date,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3')),
    	:aFlag
    );  	   	
   	/*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom ('||:aBom_level||' ,) successfully created . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui.ui_manual_bom::createUiManualBom'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);	
END;