PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_time_fence::deleteUiTimeFence" (
	IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_TIEMFENCE_T"
	,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY DEFINER--INVOKER 
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
	AS
/************************************************************************
*name      :                     deleteUiTimeFence
*function    :               
*input     ï¼š               
*output     :                
*author     :                     chenwh3
*CreateDate    :                  20160304
*UpdateDate  :        
*************************************************************************/
	 OEM_NAME 		 	NVARCHAR(40);
	 TIME_FENCE		 	NVARCHAR(1000);
	 FUNCTION_TYPE	 	NVARCHAR(40);
	 TIME_FENCE_TYPE    NVARCHAR(40);
	 DATA_TYPE			NVARCHAR(40);
	 PROFIT_CENTER      NVARCHAR(40);
	 START_DATE         TIMESTAMP;
	 END_DATE           TIMESTAMP;
	 STATUS 			NVARCHAR(40);
	 USER_ACTION		NVARCHAR(40);
	 SYS_CREATED_BY     NVARCHAR(70);
	 SYS_CREATED_DATE   TIMESTAMP;
	 SYS_LAST_MODIFIED_BY  NVARCHAR(70);
	 SYS_LAST_MODIFIED_DATE TIMESTAMP;
	 
	 aI_DETAIL 	    NVARCHAR(300) :='';
	 alogide 			INTEGER :=0;
	 privilegeExists  NVARCHAR(300)  ; 
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::deleteUiTimeFence error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiTimeFence'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  
--check the privilige
    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_time_fence::deleteable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
    
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiTimeFence'
       ,I_MODULE=>'EBGCFE'
   	);
   	--get the delete recorde
 select
     OEM_NAME 		 	,
	 TIME_FENCE		 	,
	 PROFIT_CENTER	 	
  into  	
 	 OEM_NAME 		 	,
	 TIME_FENCE		 	,
	 PROFIT_CENTER	 	
  from :newInfo;
  
  SELECT 
  	TIME_FENCE_TYPE    ,
	 DATA_TYPE			,
	 FUNCTION_TYPE      ,
	 START_DATE         ,
	 END_DATE           ,
	 STATUS 			,
	 USER_ACTION		,
	 SYS_CREATED_BY     ,
	 SYS_CREATED_DATE  ,
	 SYS_LAST_MODIFIED_BY ,
	 SYS_LAST_MODIFIED_DATE 
	 INTO 
		TIME_FENCE_TYPE    ,
	 	DATA_TYPE			,
	 	FUNCTION_TYPE      ,
	 	START_DATE         ,
	 	END_DATE           ,
	 	STATUS 			,
	 	USER_ACTION		,
	 	SYS_CREATED_BY     ,
	 	SYS_CREATED_DATE  ,
	 	SYS_LAST_MODIFIED_BY ,
	 	SYS_LAST_MODIFIED_DATE 
  from "EBGCFE"."PM_UI_TIME_FENCE"
  	where PRODUCT_GROUP = 'EBG'
  	      and OEM_NAME = :OEM_NAME
  	      and TIME_FENCE = :TIME_FENCE
  	      and PROFIT_CENTER = :PROFIT_CENTER;
  	      
  delete from "EBGCFE"."PM_UI_TIME_FENCE"
  	where PRODUCT_GROUP = 'EBG'
  	      and OEM_NAME = :OEM_NAME
  	      and TIME_FENCE = :TIME_FENCE
  	      and PROFIT_CENTER = :PROFIT_CENTER;

/*put operation to log table*/
    insert into "EBGCFE"."PM_UI_TIME_FENCE_LOG"
    (
    	 PRODUCT_GROUP,
    	 OEM_NAME, 
    	 TIME_FENCE, 
    	 FUNCTION_TYPE, 
    	 TIME_FENCE_TYPE,
	 	 DATA_TYPE,
	 	 PROFIT_CENTER,
	 	 START_DATE,
	 	 END_DATE,
	 	 STATUS,
	 	 USER_ACTION,
	 	 SYS_CREATED_BY,
	 	 SYS_CREATED_DATE,
	 	 SYS_LAST_MODIFIED_BY,
	 	 SYS_LAST_MODIFIED_DATE, 
    	 AT_ACTION,
    	 log_date
    )
    values
    (
    	 'EBG',
    	 :OEM_NAME, 
    	 :TIME_FENCE, 
    	 :FUNCTION_TYPE, 
    	 :TIME_FENCE_TYPE,
	 	 :DATA_TYPE,
	 	 :PROFIT_CENTER,
	 	 :START_DATE,
	 	 :END_DATE,
	 	 :STATUS,
	 	 :USER_ACTION,
	 	 :SYS_CREATED_BY,
	 	 :SYS_CREATED_DATE,
	 	 :SYS_LAST_MODIFIED_BY,
	 	 :SYS_LAST_MODIFIED_DATE, 
    	 'delete',
    	 CURRENT_TIMESTAMP
    );  	  
              
 /*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::deleteUiTimeFence  successfully deleted . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiTimeFence'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);	  
END;
