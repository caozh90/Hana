PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_cost_tape_ori::activateUiCostTapeOri" ( 
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_COST_TAPE_ORI_ACTIVATE_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER  
	--DEFAULT SCHEMA <default_schema_name>
	AS 
		   aProduct_group NVARCHAR(10);
	       aPart_number NVARCHAR(40);
	       aMfg_plant NVARCHAR(20); 
	       aCost_elem NVARCHAR(20);
	       
		   resourceExists BIGINT;
		   alogide INTEGER :=0;
		   aI_DETAIL NVARCHAR(300) :='';	
		   privilegeExists  NVARCHAR(300)  ;
BEGIN 
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTapeOri error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::deleteUiCostTapeOri'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END; 

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_cost_tape_ori::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;

select
    PRODUCT_GROUP,	
    PART_NUMBER,
    MFG_PLANT,
    COST_ELEM
  into  	
 	aProduct_group,
 	aPart_number,
 	aMfg_plant,
 	aCost_elem
  from :newInfo;
      
    delete from "EBGCFE"."UI_COST_TAPE_ORI"
  	where PART_NUMBER = :aPart_number
          AND MFG_PLANT = :aMfg_plant
          AND COST_ELEM = :aCost_elem
    	  AND PRODUCT_GROUP = :aProduct_group; 
END;