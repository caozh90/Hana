PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_machine_type::createUiMachineType" ( 
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_MACHINETYPE_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
	    aMachineType NVARCHAR(40);
	    aBrand NVARCHAR(40);
	    aProdFamily NVARCHAR(100);
		    	
		resourceExists BIGINT;
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		privilegeExists  NVARCHAR(300)  ;  
		
		v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.ui_machine_type::createUiMachineType';
		v_exitcode    DECIMAL;
BEGIN 
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::createUiMachineType error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createUiMachineType'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_machine_type::createable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
  
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createUiMachineType'
       ,I_MODULE=>'EBGCFE'
   	); 
   	
select 
    MACHINETYPE,
    BRAND,
    PROD_FAMILY
  into 
 	aMachineType,
	aBrand,
	aProdFamily
  from :newInfo;
  
    SELECT top 1 count(1) into resourceExists FROM "EBGCFE"."UI_MACHINETYPE" A    
     WHERE A.MACHINETYPE = :aMachineType;
   
    if  :resourceExists > 0 
    then
	    errorInfo = select 400 as http_status_code, 
	     		'the record exists' error_message, 
	     		'the record exists' DETAIL from dummy;
	     		
	     	return;
    end if;
    
    insert into "EBGCFE"."UI_MACHINETYPE"
  	(PRODUCT_GROUP, MACHINETYPE, BRAND, PROD_FAMILY, CYCLE, SYS_CREATED_DATE, SYS_CREATED_BY)
  	values('EBG', :aMachineType, :aBrand, :aProdFamily, 'CURRENT', CURRENT_TIMESTAMP, SESSION_USER);

/*put operation to log table*/
    insert into "EBGCFE"."UI_MACHINETYPE_LOG"
    (
    	PRODUCT_GROUP,
    	MACHINETYPE,
	    BRAND,
	    PROD_FAMILY,    	
    	SYS_LAST_MODIFIED_DATE,   	
    	AT_ACTION,
    	SYS_LAST_MODIFIED_BY,
    	AT_MODIFIED_ON,
    	AT_MILLIS    	
    )
    values
    (
    	'EBG',
    	:aMachineType,
		:aBrand,
		:aProdFamily,		
    	current_date,    	
    	'create',
    	SESSION_USER,
    	current_date,
    	TO_DECIMAL(TO_VARCHAR(CURRENT_TIMESTAMP,'HH24MISSFF3'))
    ); 
    
    --Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('MT', :aMachineType, :v_event_name, :v_exitcode);
     	
  	    /*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::createUiMachineType ('||:aMachineType||' ,) successfully created . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::createUiMachineType'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	); 
 
END;