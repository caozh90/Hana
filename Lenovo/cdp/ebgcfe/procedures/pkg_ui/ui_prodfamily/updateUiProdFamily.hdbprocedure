PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.ui_prodfamily::updateUiProdFamily" (
		IN newInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_PRODFAMILY_T"
		,IN oldInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.UI_PRODFAMILY_T"
		,OUT errorInfo "EBGCFE"."cdp.ebgcfe.data::EBGCFE_T.HttpError"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY DEFINER 
	--DEFAULT SCHEMA <default_schema_name>
	AS
/************************************************************************
*name      :                     updateUiProdFamily
*function    :               
*input     ï¼š               
*output     :                
*author     :                     shangqian
*CreateDate    :                  2014.12.2
*UpdateDate  :        
*************************************************************************/		
		aProduct_group NVARCHAR(10);
		aBrand NVARCHAR(40);
		aProd_family NVARCHAR(100);
		aEol_status NVARCHAR(10);
		aEol_startdate TIMESTAMP;
		aEol_enddate TIMESTAMP;
		
		resourceExists BIGINT;
		alogide INTEGER :=0;
		aI_DETAIL NVARCHAR(300) :='';
		privilegeExists  NVARCHAR(300)  ;
		
	    v_event_name  VARCHAR(200) := 'cdp.ebgcfe.procedures.pkg_ui.ui_prodfamily::updateUiProdFamily';
        v_exitcode    DECIMAL;
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 DECLARE DATA_CONFLICT CONDITION FOR SQL_ERROR_CODE 11000;
 DECLARE EXIT HANDLER FOR SQLEXCEPTION   
    BEGIN              
    	aI_DETAIL :='cdp.ebgcfe.procedures.pkg_ui::updateUiProdFamily error : '||::SQL_ERROR_CODE||::SQL_ERROR_MESSAGE;
    	
    	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    	 I_TYPE=>'PROC_ERROR'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::updateUiProdFamily'
	     	,I_MODULE=>'EBGCFE'
	     	,I_MESSAGE=>'E'||::SQL_ERROR_CODE
	     	,I_DETAIL=>:aI_DETAIL
     	);	
 
 		errorInfo = select 400 as http_status_code, 
     		'SQL ERROR CODE : '||::SQL_ERROR_CODE error_message, 
     		aI_DETAIL detail from dummy;
    END;  

    call "SECURITY"."cdp.security.procedures::checkPrivilege" (         
    'ui_prodfamily::editable',privilegeExists);
    IF  privilegeExists != 'OK' THEN
    errorInfo = select 400 as http_status_code, 
              'SQL ERROR CODE : 0' error_message, 
              privilegeExists detail from dummy;
       RETURN ;
    END IF;
    
 --START
	CALL "EX_LOG"."cdp.log.procedures::logProc"(
	    I_TYPE=>'PROC_START'
       ,I_LOGSID=>:alogide
       ,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::updateUiProdFamily'
       ,I_MODULE=>'EBGCFE'
   	); 
   	
 select
    EOL_STATUS,
    EOL_STARTDATE,
    EOL_ENDDATE      
  into  	
	aEol_status,
	aEol_startdate,
	aEol_enddate	
  from :newInfo;
 
 select
    --PRODUCT_GROUP,	
    BRAND,
    PROD_FAMILY    
  into  	
 	--aProduct_group,
 	aBrand,
	aProd_family
  from :oldInfo;
      
    SELECT top 1 count(1) into resourceExists FROM "EBGCFE"."UI_PRODFAMILY" A    
     WHERE /*A.PRODUCT_GROUP = :aProduct_group
          AND*/ A.BRAND = :aBrand 
          AND A.PROD_FAMILY = :aProd_family
          AND A.EOL_STATUS = :aEol_status
          AND A.EOL_STARTDATE = :aEol_startdate
          AND A.EOL_ENDDATE = :aEol_enddate;
   
    if  :resourceExists > 0 
    then
	    /*errorInfo = select 400 as http_status_code, 
	     		'the record is same as before' error_message, 
	     		'the record is same as before' DETAIL from dummy;
	     		
	     	return;*/
	     --SIGNAL DATA_CONFLICT SET MESSAGE_TEXT = 'the record is same as before'; 	
	     return;
    end if;
     
    update "EBGCFE"."UI_PRODFAMILY" set
    	EOL_STATUS = :aEol_status,
    	SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
    	SYS_LAST_MODIFIED_BY = session_user,
    	EOL_STARTDATE = case when :aEol_startdate = TO_TIMESTAMP('1899-12-31 16:00:00.0000000') then null else :aEol_startdate end,
    	EOL_ENDDATE = case when :aEol_enddate = TO_TIMESTAMP('1899-12-31 16:00:00.0000000') then null else :aEol_enddate end
    where
    	BRAND = :aBrand and
    	/*PRODUCT_GROUP = :aProduct_group and*/
    	PROD_FAMILY = :aProd_family;
    
    /*--2015-01-28 according to lenovo mail
	update "EBGCFE"."UI_ITEM" A 
	   set --Modified by Zhoubinbin 20161115, set eol status by priority
	       --A.EOL_STATUS             = MAP(IFNULL(A.USER_EOL_STATUS, ''), '', B.EOL_STATUS, A.EOL_STATUS),
	       A.FAMILY_EOL             = B.EOL_STATUS,
	       A.EOL_STATUS = IFNULL(MAP(LENGTH(a.user_eol_status), 0, NULL, a.user_eol_status), 
                           IFNULL(MAP(LENGTH(a.mmr_eol), 0, NULL, a.mmr_eol), 
                           IFNULL(MAP(LENGTH(a.mt_eol), 0, NULL, a.mt_eol), 
                           IFNULL(MAP(LENGTH(b.eol_status), 0, NULL, b.eol_status), a.eol_status)))),
	       A.SYS_LAST_MODIFIED_DATE = CURRENT_TIMESTAMP,
	       A.SYS_LAST_MODIFIED_BY   = session_user  
	  from :newInfo B
     where A.ASP_PRD_FAMILY = B.PROD_FAMILY
	   and A.BRAND          = B.BRAND; */	
	   
/*put operation to log table*/
  	insert into "EBGCFE"."UI_PRODFAMILY_LOG"
  	(
  		PRODUCT_GROUP,
  		BRAND,
  		PROD_FAMILY,
  		EOL_STATUS,
  		EOL_STARTDATE,
  		EOL_ENDDATE,
  		ACTION,
    	SYS_LAST_MODIFIED_BY,
    	SYS_LAST_MODIFIED_DATE,
    	AT_MODIFIED_TIME
  	)
  	values
  	(
  		'EBG',
  		:aBrand,
  		:aProd_family,
  		:aEol_status,
  		:aEol_startdate,
  		:aEol_enddate,
  		'create',
    	session_user,
    	current_date,
    	CURRENT_TIMESTAMP
  	); 	
  	
	--Added by Zhoubinbin 20161127, Set eol status logic
    CALL "EBGCFE"."cdp.ebgcfe.procedures.pkg_ui.base_funcs::updateEolStatus"('FAMILY', :aProd_family, :v_event_name, :v_exitcode);
    	
/*END*/
 	    aI_DETAIL := 'cdp.ebgcfe.procedures.pkg_ui::updateUiProdFamily ('||:aBrand||' ,) successfully updated . ';
 		CALL "EX_LOG"."cdp.log.procedures::logProc"(
	 		I_TYPE=>'PROC_END'	
	     	,I_LOGSID=>:alogide
	     	,I_EVENT_NAME=>'cdp.ebgcfe.procedures.pkg_ui::updateUiProdFamily'
	     	,I_MODULE=>'EBGCFE'
	     	,I_DETAIL=>:aI_DETAIL
     	);
END;