PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_cfe_to_pcdw::PRC_EXP_CTO_COST"(
	OUT p_out_exitcode   integer,
    OUT p_out_exitmess   VARCHAR(500)
)     
    LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	DEFAULT SCHEMA EBGCFE
	--READS SQL DATA 
/************************************************************************
*name       : PRC_EXP_CTO_COST            
*function   : 
*input      ：p_change_id : change id / p_product_group : product group
              / p_user_id : user id 
*output     : p_out_exitcode : error code / p_out_exitmess : error message
*author     : kangl
*CreateDate : 2015-08-25
*UpdateDateV_1 : 2015-10-17      Frankie --函数更改信息（包括作者、时间、更改内容等
*UpdateDateV_2 : 2015-10-28		 Jetbrains --通过cycle_productgroup删除sales_office_all的历史数据，通过cycle
								来merge pre的数据到all
*************************************************************************/	
	AS


  
     v_prc_name 	     VARCHAR(30)  := 'PRC_EXP_CTO_COST';
     v_g_pkg_name 	     VARCHAR(30)  := 'pkg_cfe_to_pcdw';
     v_full_name      	 VARCHAR(60)  := v_g_pkg_name ||'.'|| v_prc_name;
     v_time              BIGINT;
     v_taking_time       BIGINT;
     v_debug             CHAR;
     v_step_counter      INT;
     v_cycle_name        VARCHAR(60);
     logidi              INT :=0;
     v_init_data         INT :=0;
     v_normal_cycle      INT :=0;
     v_is_ondemand       INTEGER;


    
BEGIN
/*******************************************************************************************/
  -- exception
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	BEGIN
    	p_out_exitcode := ::SQL_ERROR_CODE;     
	    p_out_exitmess := SUBSTR(::SQL_ERROR_MESSAGE, 1, 500 );  
 	 	CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE        => 'PROC_ERROR',
 	 	                                            I_LOGSID      => :logidi,
 	 	                                            I_EVENT_NAME  => :v_full_name,
 	 	                                            I_MODULE      => 'EBGCFE',
		                                            I_MESSAGE     => 'ERROR',
		                                            I_DETAIL      => TO_CHAR(::SQL_ERROR_CODE) || ':' ||
                                                                     SUBSTR(::SQL_ERROR_MESSAGE, 1, 500) );                                   
    END;
	
	
    
    
    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_START',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE'); 
		                                        
		 
   --clear Export table data on PCDW
	
	DELETE FROM pcdw.exp_cfe_cto_commissioncost;	 
		 	 
		                                        
		                                        
	SELECT COUNT(*)  INTO v_normal_cycle FROM ui_control_point
    WHERE control_point='BAKE' 
      AND control_point_status='COMPLETED'
      AND cycle_type <> 'OEMOUT'
      AND Product_group='EBG';
	
    IF v_normal_cycle > 0 THEN	 
	    SELECT  TOP 1 cycle_name INTO v_cycle_name FROM ui_control_point 
	    WHERE  control_point='BAKE' 
          AND  control_point_status='COMPLETED'
          AND  cycle_type <> 'OEMOUT'
          AND  product_group='EBG';
		   
		
    SELECT COUNT(*) INTO v_is_ondemand FROM ui_ondemand_cal_list WHERE item_type='CTO';
    
    --Modified by Zhoubinbin 20160909, change_id: 201609091706 start
    --AS-is: cannt delete old adders, Remove cost_type condition so that can do it
    /*IF v_is_ondemand > 0 THEN
 	---merge data to EXP_CFE_MTM_SALES_OFFICE_ALL		
	    DELETE FROM pcdw.exp_cfe_cto_sales_office_all a
	    WHERE cycle_productgroup = :v_cycle_name||'EBG' 
	      AND EXISTS (SELECT * FROM biz_cto_salesoffice_pre p
		               WHERE a.variant       = p.variant
		                 AND a.sales_org     = p.sales_org
		                 AND a.sales_office  = p.sales_office
		                 AND a.cost_type     = p.cost_type
		                 AND a.producthier_1 = p.producthier_1
		                 AND a.producthier_2 = p.producthier_2
		                 AND a.producthier_3 = p.producthier_3
		                 AND a.producthier_4 = p.producthier_4);
    ELSE
	  	DELETE  FROM  pcdw.exp_cfe_cto_sales_office_all where cycle_productgroup = :v_cycle_name||'EBG';
	
	END IF;*/
	
	IF v_is_ondemand = 0 THEN
	    DELETE FROM pcdw.exp_cfe_cto_sales_office_all where cycle_productgroup = :v_cycle_name||'EBG';
	END IF;
	
    DELETE FROM pcdw.exp_cfe_cto_sales_office_all a
    WHERE EXISTS (SELECT * FROM biz_cto_salesoffice_pre p
	               WHERE a.variant       = p.variant
	                 AND a.sales_org     = p.sales_org
	                 AND a.sales_office  = p.sales_office
	                 AND a.producthier_1 = p.producthier_1
	                 AND a.producthier_2 = p.producthier_2
	                 AND a.producthier_3 = p.producthier_3
	                 AND a.producthier_4 = p.producthier_4); 

	/*UPDATE pcdw.exp_cfe_cto_sales_office_all a 
		SET (a.cycle,a.m1,a.m2,a.m3,a.m4,a.m5,a.m6,
			 a.m7,a.m8,a.m9,a.m10,a.m11,a.m12,a.cycle_productgroup) =
			(SUBSTR(:v_cycle_name,1,6),ROUND(b.m1,2),ROUND(b.m2,2),ROUND(b.m3,2),ROUND(b.m4,2),ROUND(b.m5,2),
			 ROUND(b.m6,2),ROUND(b.m7,2),ROUND(b.m8,2),ROUND(b.m9,2),ROUND(b.m10,2),ROUND(b.m11,2),ROUND(b.m12,2),
			 :v_cycle_name||b.product_group) 
    FROM biz_cto_salesoffice_pre b
	WHERE   a.variant        = b.variant 
	  AND   a.sales_org      = b.sales_org 
	  AND   a.sales_office   = b.sales_office 
	  AND   a.cost_type      = b.cost_type
	  AND   a.producthier_1  = b.producthier_1
	  AND   a.producthier_2  = b.producthier_2
	  AND   a.producthier_3  = b.producthier_3
	  AND   a.producthier_4  = b.producthier_4
	  AND   a.product_group  = b.product_group;*/
	  
	--end change_id: 201609091706
	
	
	--The source and target table data different
	

	
	INSERT INTO  pcdw.exp_cfe_cto_sales_office_all (
			variant, sales_org, sales_office,
			cost_type, cycle, producthier_1,producthier_2,
			producthier_3,producthier_4,currency_name, price_unit,
			m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12,
			product_group, sys_created_date,cycle_productgroup)
	SELECT  variant, sales_org, sales_office,
			cost_type, SUBSTR(:v_cycle_name,1,6) AS cycle, producthier_1,producthier_2,
			producthier_3,producthier_4,currency_name, price_unit,
			ROUND(b.m1,2),ROUND(b.m2,2),ROUND(b.m3,2),ROUND(b.m4,2),ROUND(b.m5,2),ROUND(b.m6,2),
			ROUND(b.m7,2),ROUND(b.m8,2),ROUND(b.m9,2),ROUND(b.m10,2),ROUND(b.m11,2),ROUND(b.m12,2),
			product_group, sys_created_date, :v_cycle_name||product_group as cycle_productgroup
	FROM biz_cto_salesoffice_pre b 
	WHERE NOT EXISTS (SELECT * FROM pcdw.exp_cfe_cto_sales_office_all a 
			WHERE a.variant       = b.variant 
			AND   a.sales_org     = b.sales_org 
			AND   a.sales_office  = b.sales_office 
			AND   a.cost_type     = b.cost_type
			AND   a.producthier_1 = b.producthier_1
			AND   a.producthier_2 = b.producthier_2
			AND   a.producthier_3 = b.producthier_3
			AND   a.producthier_4 = b.producthier_4
			AND   a.product_group = b.product_group);	
	
	

	
	SELECT COUNT (*) INTO v_init_data FROM biz_cto_commissioncost_all ;
	
  
    IF v_init_data=0 THEN
	
	    INSERT INTO pcdw.exp_cfe_cto_commissioncost
		(
			variant,
			sales_org,
			producthier_1,
			producthier_2,
			producthier_3,
			producthier_4,
			currency_name,
			price_unit,
			from_date,
			to_date,
			m1,
			action,
			status,
			sys_created_date,
			sys_created_by,
			sys_last_modified_date,
			sys_last_modified_by,
			product_group
		) 
		SELECT 
			variant,
			sales_org,
			producthier_1,
			producthier_2,
			producthier_3,
			producthier_4,
			currency_name,
			price_unit,
			from_date,
			to_date,
			ROUND(m1,2),
			action,
			status,
			sys_created_date,
			sys_created_by,
			sys_last_modified_date,
			sys_last_modified_by,
			product_group
		FROM biz_cto_commissioncost_pre;
		
	ELSE		
	
	---compare BIZ_MTM_COMMISSIONCOST_PRE and BIZ_MTM_COMMISSIONCOST_ALL differents
	--put differents into EXP_CFE_MTM_COMMISSIONCOST
	INSERT INTO pcdw.exp_cfe_cto_commissioncost
	(
		variant,
		sales_org,
		producthier_1,
		producthier_2,
		producthier_3,
		producthier_4,
		currency_name,
		price_unit,
		from_date,
		to_date,
		m1,
		action,
		status,
		sys_created_date,
		sys_created_by,
		sys_last_modified_date,
		sys_last_modified_by,
		product_group
	) 
	SELECT 
		variant,
		sales_org,
		producthier_1,
		producthier_2,
		producthier_3,
		producthier_4,
		currency_name,
		price_unit,
		from_date,
		to_date,
		m1,
		action,
		status,
		sys_created_date,
		sys_created_by,
		sys_last_modified_date,
		sys_last_modified_by,
		product_group
	FROM (
			--get BIZ_MTM_COMMISSIONCOST_PRE exists and BIZ_MTM_COMMISSIONCOST_ALL not exists data	
			SELECT 
			    variant,
				sales_org,
				producthier_1,
				producthier_2,
				producthier_3,
				producthier_4,
				currency_name,
				price_unit,
				from_date,
				to_date,
				ROUND(m1,2) AS m1,
				action,
				status,
				sys_created_date,
				sys_created_by,
				sys_last_modified_date,
				sys_last_modified_by,
				product_group
		    FROM biz_cto_commissioncost_pre a  
			WHERE NOT EXISTS (  
				SELECT 1 FROM biz_cto_commissioncost_all b 
				WHERE a.variant         = b.variant 
				  AND   a.sales_org     = b.sales_org 
				  AND   a.producthier_1 = b.producthier_1
				  AND   a.producthier_2 = b.producthier_2
				  AND   a.producthier_3 = b.producthier_3
				  AND   a.producthier_4 = b.producthier_4  
				  AND   a.product_group = b.product_group)
	 
		  )
		   UNION ALL
		  ( 
		  		--THE PRIMARY KEY SAME COMPARE M1 VALUE
				SELECT  
					c.variant,
					c.sales_org,
					c.producthier_1,
					c.producthier_2,
					c.producthier_3,
					c.producthier_4,
					c.currency_name,
					c.price_unit,
					c.from_date,
					c.to_date,
					ROUND(c.m1,2) AS m1,
					c.action,
					c.status,
					c.sys_created_date,
					c.sys_created_by,
					c.sys_last_modified_date,
					c.sys_last_modified_by,
					c.product_group
				FROM biz_cto_commissioncost_pre c ,
					(SELECT * ,MAX(sys_last_modified_date) 
					 OVER (PARTITION BY variant,sales_org,producthier_1,producthier_2,producthier_3,producthier_4,product_group ) AS max_modified_date  
					 FROM biz_cto_commissioncost_all ) d 
				WHERE c.variant       = d.variant 
				AND   c.sales_org     = d.sales_org 
				AND   c.producthier_1 = d.producthier_1
				AND   c.producthier_2 = d.producthier_2
				AND   c.producthier_3 = d.producthier_3
				AND   c.producthier_4 = d.producthier_4 
				AND   c.product_group = d.product_group
				AND   c.m1            <> d.m1 
				AND	  d.sys_last_modified_date = max_modified_date
	 	  );
	 	  
	END IF;
	
	
    --to_Production Pricing Tool:merge sales_org_pre data to pcdw
    IF v_is_ondemand = 0 THEN
    	DELETE FROM pcdw.exp_cto_salesorg_pre;
    	DELETE FROM pcdw.exp_cto_salesoffice_pre;
    ELSE
    	DELETE FROM pcdw.exp_cto_salesorg_pre a
    	WHERE EXISTS (SELECT 1 FROM biz_cto_salesorg_pre b
    	               WHERE a.variant       = b.variant
    	                 AND a.sales_org     = b.sales_org
    	                 --AND a.cost_type     = b.cost_type
    	                 AND a.producthier_1 = b.producthier_1
    	                 AND a.producthier_2 = b.producthier_2
    	                 AND a.producthier_3 = b.producthier_3
    	                 AND a.producthier_4 = b.producthier_4);
 
    	DELETE FROM pcdw.exp_cto_salesoffice_pre a
    	WHERE EXISTS (SELECT 1 FROM biz_cto_salesoffice_pre b
    	               WHERE a.variant       = b.variant
    	                 AND a.sales_org     = b.sales_org
    	                 AND a.sales_office  = b.sales_office
    	                 --AND a.cost_type     = b.cost_type
    	                 AND a.producthier_1 = b.producthier_1
    	                 AND a.producthier_2 = b.producthier_2
    	                 AND a.producthier_3 = b.producthier_3
    	                 AND a.producthier_4 = b.producthier_4);
    END IF;
       	 
    	
    INSERT INTO pcdw.exp_cto_salesorg_pre 
    	(variant,sales_org,sales_office,cost_type,cycle,producthier_1,producthier_2,producthier_3,producthier_4,
    	 currency_name,price_unit,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,product_group,sys_created_date)	
	SELECT variant,sales_org,sales_office,cost_type,SUBSTR(:v_cycle_name,1,6) AS cycle,producthier_1,producthier_2,producthier_3,producthier_4,
    	   currency_name,price_unit,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,product_group,CURRENT_TIMESTAMP
	  FROM biz_cto_salesorg_pre ;
    --to_lbp:merge sales_office_pre data to pcdw
    
    INSERT INTO pcdw.exp_cto_salesoffice_pre 
    	(variant,sales_org,sales_office,cost_type,cycle,producthier_1,producthier_2,producthier_3,producthier_4,
    	 currency_name,price_unit,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,product_group,sys_created_date)	
	SELECT variant,sales_org,sales_office,cost_type,SUBSTR(:v_cycle_name,1,6) AS cycle,producthier_1,producthier_2,producthier_3,producthier_4,
    	   currency_name,price_unit,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,product_group,CURRENT_TIMESTAMP
	  FROM biz_cto_salesoffice_pre ; 	  
	  	
	
END IF;	

     p_out_exitcode := 0;
     p_out_exitmess := 'SUCCESSFUL';

    CALL "EX_LOG"."cdp.log.procedures::logProc"(I_TYPE       => 'PROC_END',
                                                I_LOGSID     => :logidi,
		                                        I_EVENT_NAME => :v_full_name,
		                                        I_MODULE     => 'EBGCFE');  

END;