PROCEDURE "EBGCFE"."cdp.ebgcfe.procedures.pkg_ondemand::PRC_ONDEMAND_BOMREFRESH_PRE" (
  in  p_change_id          varchar(100),
  in  p_product_group   varchar(20),
  in  p_user_id               varchar(64),
  in  p_model                varchar(1000),
  in  p_family                varchar(1000),
  out p_exit_code         integer,
  out p_exit_message   varchar(500)
)
  language sqlscript sql security definer
  default schema "EBGCFE"	
AS
 /*
   name: 
       PRC_ONDEMAND_BOMREFRESH_PRE
   function:
       PRE: UI CALL BOM_REFRESH BY ITEM.
   intput: 
       1. p_change_id
       2. p_product_group
       3. p_user_id
       4. p_model
       5. p_family
   output:
       1. p_exit_exitcode
       2. p_exit_message 
   create/updated : 
       xwu. 2015/9/1
 */ 
BEGIN

  -------------------------------------// variables // -----------------------------------------
  declare v_pkg_name          varchar(30) := 'PKG_ONDEMAND';
  declare v_prc_name           varchar(30) := 'PRC_ONDEMAND_BOMREFRESH_PRE';
  declare v_full_name           varchar(60) := :v_pkg_name ||'.'|| :v_prc_name;
  declare logidi                     integer := 0;  
  declare v_tmp_pra             varchar(1000);
  declare v_tmp_pra_value   varchar(1000);

  -------------------------------------// exception // ----------------------------------------
  declare exit handler for SQLEXCEPTION
  begin
       p_exit_code := ::SQL_ERROR_CODE;
       p_exit_message := ::SQL_ERROR_MESSAGE;
       --log
	   call "EX_LOG"."cdp.log.procedures::logProc"(
	               I_TYPE=>'PROC_ERROR',
	               I_LOGSID=>:logidi,
		           I_EVENT_NAME=>:v_full_name, 
		           I_MODULE=>'EBGCFE',
		           I_MESSAGE=>'ERROR', 
		           I_DETAIL=>to_char(::SQL_ERROR_CODE) || ':' || substr(::SQL_ERROR_MESSAGE, 1, 500));
   end;

  -----------------------------------// logic process // --------------------------------------
  --1. process start 
  p_exit_code := -1;
  p_exit_message := 'FAILED';
  call "EX_LOG"."cdp.log.procedures::logProc"(
           I_TYPE=>'PROC_START',
           I_LOGSID=>:logidi,
           I_EVENT_NAME=>:v_full_name,
           I_MODULE=>'EBGCFE');  

  --2. insert data into ui table
  if length(p_model) >0 then
     v_tmp_pra := :p_model;
     
     while locate(:v_tmp_pra, ',') != 0
     do
	      v_tmp_pra_value := SUBSTR_BEFORE(:v_tmp_pra, ',');
	      v_tmp_pra := SUBSTR_AFTER(:v_tmp_pra, ',');
	    
	      insert into "UI_ONDEMAND_REFRESH"(PRODUCT_GROUP, ONDEMAND_TYPE, ITEM, PROD_FAMILY, EVENT_NAME, MESSAGE, SYS_CREATED_BY, SYS_CREATED_DATE)
	      values ('EBG','BOM_REFRESH',:v_tmp_pra_value,'',:P_CHANGE_ID,'SUCCESS',:P_USER_ID,CURRENT_TIMESTAMP); 
     end while;
     
     if locate(:v_tmp_pra, ',') = 0 and length(:v_tmp_pra) != 0  then
	      insert into "UI_ONDEMAND_REFRESH"(PRODUCT_GROUP, ONDEMAND_TYPE, ITEM, PROD_FAMILY, EVENT_NAME, MESSAGE, SYS_CREATED_BY, SYS_CREATED_DATE)
          values ('EBG','BOM_REFRESH',:v_tmp_pra,'',:P_CHANGE_ID,'SUCCESS',:P_USER_ID,CURRENT_TIMESTAMP);
	 end if;	 
  elseif length(p_family) > 0 then
        -- 如果指定了p_family值，从UI ITEM更新记录到ui refresh.
        insert into "UI_ONDEMAND_REFRESH"(PRODUCT_GROUP, ONDEMAND_TYPE, ITEM, PROD_FAMILY, EVENT_NAME, MESSAGE, SYS_CREATED_BY, SYS_CREATED_DATE)
        select distinct 'EBG','BOM_REFRESH',item ,ASP_PRD_FAMILY,:P_CHANGE_ID,'SUCCESS',:P_USER_ID,CURRENT_TIMESTAMP
        from EBGCFE.UI_ITEM where ASP_PRD_FAMILY=:p_family;         
  end if;
  
  --3. data preparation
  delete from mid_item_ol where product_group = :p_product_group;
 
  insert into mid_item_ol 
             (product_group, item, prod_family, brand, item_type, subgeo, country, plant, 
              action, eol_status, prod_h, custommodelflag, sys_created_date, sys_created_by)
  select product_group, item, asp_prd_family, brand, item_type, NULL, NULL, NULL,
           action, eol_status, prod_h, custommodelflag, current_timestamp, :v_full_name
  from ui_item  as a
  where exists (
              select 1 from ui_ondemand_refresh b
              where b.item = a.item
                 and b.event_name = :p_change_id
                 and b.product_group = a.product_group)
       and product_group = :p_product_group;
  
  --4. process end
  p_exit_code := 0;
  p_exit_message := 'SUCCESSFUL';
  call "EX_LOG"."cdp.log.procedures::logProc"(
                  I_TYPE=>'PROC_END',
                  I_LOGSID=>:logidi,
	              I_EVENT_NAME=>:v_full_name,
	              I_MODULE=>'EBGCFE'); 

END;
